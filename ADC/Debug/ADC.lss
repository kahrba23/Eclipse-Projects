
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001d82  00001e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800108  00800108  00001e1e  2**0
                  ALLOC
  3 .stab         00001a04  00000000  00000000  00001e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d23  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004547  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004687  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000047f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000732b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000080d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008238  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000084c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a8 e0       	ldi	r26, 0x08	; 8
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	ad 30       	cpi	r26, 0x0D	; 13
      80:	b1 07       	cpc	r27, r17
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e2 e8       	ldi	r30, 0x82	; 130
      8c:	fd e1       	ldi	r31, 0x1D	; 29
      8e:	02 c0       	rjmp	.+4      	; 0x94 <.do_copy_data_start>

00000090 <.do_copy_data_loop>:
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0

00000094 <.do_copy_data_start>:
      94:	a8 30       	cpi	r26, 0x08	; 8
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <.do_copy_data_loop>
      9a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <main>
      9e:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__fixunssfsi>:
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	7b 01       	movw	r14, r22
      b0:	8c 01       	movw	r16, r24
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__gesf2>
      be:	88 23       	and	r24, r24
      c0:	8c f0       	brlt	.+34     	; 0xe4 <__fixunssfsi+0x3e>
      c2:	c8 01       	movw	r24, r16
      c4:	b7 01       	movw	r22, r14
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	5f e4       	ldi	r21, 0x4F	; 79
      ce:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
      d2:	0e 94 b3 03 	call	0x766	; 0x766 <__fixsfsi>
      d6:	9b 01       	movw	r18, r22
      d8:	ac 01       	movw	r20, r24
      da:	20 50       	subi	r18, 0x00	; 0
      dc:	30 40       	sbci	r19, 0x00	; 0
      de:	40 40       	sbci	r20, 0x00	; 0
      e0:	50 48       	sbci	r21, 0x80	; 128
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <__fixunssfsi+0x4a>
      e4:	c8 01       	movw	r24, r16
      e6:	b7 01       	movw	r22, r14
      e8:	0e 94 b3 03 	call	0x766	; 0x766 <__fixsfsi>
      ec:	9b 01       	movw	r18, r22
      ee:	ac 01       	movw	r20, r24
      f0:	b9 01       	movw	r22, r18
      f2:	ca 01       	movw	r24, r20
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	ff 90       	pop	r15
      fa:	ef 90       	pop	r14
      fc:	08 95       	ret

000000fe <_fpadd_parts>:
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	e5 e8       	ldi	r30, 0x85	; 133
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__prologue_saves__>
     10a:	dc 01       	movw	r26, r24
     10c:	2b 01       	movw	r4, r22
     10e:	fa 01       	movw	r30, r20
     110:	9c 91       	ld	r25, X
     112:	92 30       	cpi	r25, 0x02	; 2
     114:	08 f4       	brcc	.+2      	; 0x118 <_fpadd_parts+0x1a>
     116:	39 c1       	rjmp	.+626    	; 0x38a <_fpadd_parts+0x28c>
     118:	eb 01       	movw	r28, r22
     11a:	88 81       	ld	r24, Y
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	08 f4       	brcc	.+2      	; 0x122 <_fpadd_parts+0x24>
     120:	33 c1       	rjmp	.+614    	; 0x388 <_fpadd_parts+0x28a>
     122:	94 30       	cpi	r25, 0x04	; 4
     124:	69 f4       	brne	.+26     	; 0x140 <_fpadd_parts+0x42>
     126:	84 30       	cpi	r24, 0x04	; 4
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x2e>
     12a:	2f c1       	rjmp	.+606    	; 0x38a <_fpadd_parts+0x28c>
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	9c 91       	ld	r25, X
     130:	11 97       	sbiw	r26, 0x01	; 1
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	98 17       	cp	r25, r24
     136:	09 f4       	brne	.+2      	; 0x13a <_fpadd_parts+0x3c>
     138:	28 c1       	rjmp	.+592    	; 0x38a <_fpadd_parts+0x28c>
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	25 c1       	rjmp	.+586    	; 0x38a <_fpadd_parts+0x28c>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	09 f4       	brne	.+2      	; 0x146 <_fpadd_parts+0x48>
     144:	21 c1       	rjmp	.+578    	; 0x388 <_fpadd_parts+0x28a>
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	a9 f4       	brne	.+42     	; 0x174 <_fpadd_parts+0x76>
     14a:	92 30       	cpi	r25, 0x02	; 2
     14c:	09 f0       	breq	.+2      	; 0x150 <_fpadd_parts+0x52>
     14e:	1d c1       	rjmp	.+570    	; 0x38a <_fpadd_parts+0x28c>
     150:	9a 01       	movw	r18, r20
     152:	ad 01       	movw	r20, r26
     154:	88 e0       	ldi	r24, 0x08	; 8
     156:	ea 01       	movw	r28, r20
     158:	09 90       	ld	r0, Y+
     15a:	ae 01       	movw	r20, r28
     15c:	e9 01       	movw	r28, r18
     15e:	09 92       	st	Y+, r0
     160:	9e 01       	movw	r18, r28
     162:	81 50       	subi	r24, 0x01	; 1
     164:	c1 f7       	brne	.-16     	; 0x156 <_fpadd_parts+0x58>
     166:	e2 01       	movw	r28, r4
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	9c 91       	ld	r25, X
     16e:	89 23       	and	r24, r25
     170:	81 83       	std	Z+1, r24	; 0x01
     172:	08 c1       	rjmp	.+528    	; 0x384 <_fpadd_parts+0x286>
     174:	92 30       	cpi	r25, 0x02	; 2
     176:	09 f4       	brne	.+2      	; 0x17a <_fpadd_parts+0x7c>
     178:	07 c1       	rjmp	.+526    	; 0x388 <_fpadd_parts+0x28a>
     17a:	12 96       	adiw	r26, 0x02	; 2
     17c:	2d 90       	ld	r2, X+
     17e:	3c 90       	ld	r3, X
     180:	13 97       	sbiw	r26, 0x03	; 3
     182:	eb 01       	movw	r28, r22
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	14 96       	adiw	r26, 0x04	; 4
     18a:	ad 90       	ld	r10, X+
     18c:	bd 90       	ld	r11, X+
     18e:	cd 90       	ld	r12, X+
     190:	dc 90       	ld	r13, X
     192:	17 97       	sbiw	r26, 0x07	; 7
     194:	ec 80       	ldd	r14, Y+4	; 0x04
     196:	fd 80       	ldd	r15, Y+5	; 0x05
     198:	0e 81       	ldd	r16, Y+6	; 0x06
     19a:	1f 81       	ldd	r17, Y+7	; 0x07
     19c:	91 01       	movw	r18, r2
     19e:	28 1b       	sub	r18, r24
     1a0:	39 0b       	sbc	r19, r25
     1a2:	b9 01       	movw	r22, r18
     1a4:	37 ff       	sbrs	r19, 7
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xb2>
     1a8:	66 27       	eor	r22, r22
     1aa:	77 27       	eor	r23, r23
     1ac:	62 1b       	sub	r22, r18
     1ae:	73 0b       	sbc	r23, r19
     1b0:	60 32       	cpi	r22, 0x20	; 32
     1b2:	71 05       	cpc	r23, r1
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <_fpadd_parts+0xba>
     1b6:	61 c0       	rjmp	.+194    	; 0x27a <_fpadd_parts+0x17c>
     1b8:	12 16       	cp	r1, r18
     1ba:	13 06       	cpc	r1, r19
     1bc:	6c f5       	brge	.+90     	; 0x218 <_fpadd_parts+0x11a>
     1be:	37 01       	movw	r6, r14
     1c0:	48 01       	movw	r8, r16
     1c2:	06 2e       	mov	r0, r22
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <_fpadd_parts+0xd0>
     1c6:	96 94       	lsr	r9
     1c8:	87 94       	ror	r8
     1ca:	77 94       	ror	r7
     1cc:	67 94       	ror	r6
     1ce:	0a 94       	dec	r0
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <_fpadd_parts+0xc8>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <_fpadd_parts+0xe6>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	44 1f       	adc	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	6a 95       	dec	r22
     1e6:	d2 f7       	brpl	.-12     	; 0x1dc <_fpadd_parts+0xde>
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	30 40       	sbci	r19, 0x00	; 0
     1ec:	40 40       	sbci	r20, 0x00	; 0
     1ee:	50 40       	sbci	r21, 0x00	; 0
     1f0:	2e 21       	and	r18, r14
     1f2:	3f 21       	and	r19, r15
     1f4:	40 23       	and	r20, r16
     1f6:	51 23       	and	r21, r17
     1f8:	21 15       	cp	r18, r1
     1fa:	31 05       	cpc	r19, r1
     1fc:	41 05       	cpc	r20, r1
     1fe:	51 05       	cpc	r21, r1
     200:	21 f0       	breq	.+8      	; 0x20a <_fpadd_parts+0x10c>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	79 01       	movw	r14, r18
     20c:	8a 01       	movw	r16, r20
     20e:	e6 28       	or	r14, r6
     210:	f7 28       	or	r15, r7
     212:	08 29       	or	r16, r8
     214:	19 29       	or	r17, r9
     216:	3c c0       	rjmp	.+120    	; 0x290 <_fpadd_parts+0x192>
     218:	23 2b       	or	r18, r19
     21a:	d1 f1       	breq	.+116    	; 0x290 <_fpadd_parts+0x192>
     21c:	26 0e       	add	r2, r22
     21e:	37 1e       	adc	r3, r23
     220:	35 01       	movw	r6, r10
     222:	46 01       	movw	r8, r12
     224:	06 2e       	mov	r0, r22
     226:	04 c0       	rjmp	.+8      	; 0x230 <_fpadd_parts+0x132>
     228:	96 94       	lsr	r9
     22a:	87 94       	ror	r8
     22c:	77 94       	ror	r7
     22e:	67 94       	ror	r6
     230:	0a 94       	dec	r0
     232:	d2 f7       	brpl	.-12     	; 0x228 <_fpadd_parts+0x12a>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x148>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	6a 95       	dec	r22
     248:	d2 f7       	brpl	.-12     	; 0x23e <_fpadd_parts+0x140>
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	30 40       	sbci	r19, 0x00	; 0
     24e:	40 40       	sbci	r20, 0x00	; 0
     250:	50 40       	sbci	r21, 0x00	; 0
     252:	2a 21       	and	r18, r10
     254:	3b 21       	and	r19, r11
     256:	4c 21       	and	r20, r12
     258:	5d 21       	and	r21, r13
     25a:	21 15       	cp	r18, r1
     25c:	31 05       	cpc	r19, r1
     25e:	41 05       	cpc	r20, r1
     260:	51 05       	cpc	r21, r1
     262:	21 f0       	breq	.+8      	; 0x26c <_fpadd_parts+0x16e>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	59 01       	movw	r10, r18
     26e:	6a 01       	movw	r12, r20
     270:	a6 28       	or	r10, r6
     272:	b7 28       	or	r11, r7
     274:	c8 28       	or	r12, r8
     276:	d9 28       	or	r13, r9
     278:	0b c0       	rjmp	.+22     	; 0x290 <_fpadd_parts+0x192>
     27a:	82 15       	cp	r24, r2
     27c:	93 05       	cpc	r25, r3
     27e:	2c f0       	brlt	.+10     	; 0x28a <_fpadd_parts+0x18c>
     280:	1c 01       	movw	r2, r24
     282:	aa 24       	eor	r10, r10
     284:	bb 24       	eor	r11, r11
     286:	65 01       	movw	r12, r10
     288:	03 c0       	rjmp	.+6      	; 0x290 <_fpadd_parts+0x192>
     28a:	ee 24       	eor	r14, r14
     28c:	ff 24       	eor	r15, r15
     28e:	87 01       	movw	r16, r14
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	9c 91       	ld	r25, X
     294:	d2 01       	movw	r26, r4
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	8c 91       	ld	r24, X
     29a:	98 17       	cp	r25, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <_fpadd_parts+0x1a2>
     29e:	45 c0       	rjmp	.+138    	; 0x32a <_fpadd_parts+0x22c>
     2a0:	99 23       	and	r25, r25
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <_fpadd_parts+0x1b4>
     2a4:	a8 01       	movw	r20, r16
     2a6:	97 01       	movw	r18, r14
     2a8:	2a 19       	sub	r18, r10
     2aa:	3b 09       	sbc	r19, r11
     2ac:	4c 09       	sbc	r20, r12
     2ae:	5d 09       	sbc	r21, r13
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <_fpadd_parts+0x1c0>
     2b2:	a6 01       	movw	r20, r12
     2b4:	95 01       	movw	r18, r10
     2b6:	2e 19       	sub	r18, r14
     2b8:	3f 09       	sbc	r19, r15
     2ba:	40 0b       	sbc	r20, r16
     2bc:	51 0b       	sbc	r21, r17
     2be:	57 fd       	sbrc	r21, 7
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <_fpadd_parts+0x1d4>
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	33 82       	std	Z+3, r3	; 0x03
     2c6:	22 82       	std	Z+2, r2	; 0x02
     2c8:	24 83       	std	Z+4, r18	; 0x04
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	46 83       	std	Z+6, r20	; 0x06
     2ce:	57 83       	std	Z+7, r21	; 0x07
     2d0:	1d c0       	rjmp	.+58     	; 0x30c <_fpadd_parts+0x20e>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	81 83       	std	Z+1, r24	; 0x01
     2d6:	33 82       	std	Z+3, r3	; 0x03
     2d8:	22 82       	std	Z+2, r2	; 0x02
     2da:	88 27       	eor	r24, r24
     2dc:	99 27       	eor	r25, r25
     2de:	dc 01       	movw	r26, r24
     2e0:	82 1b       	sub	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	a4 0b       	sbc	r26, r20
     2e6:	b5 0b       	sbc	r27, r21
     2e8:	84 83       	std	Z+4, r24	; 0x04
     2ea:	95 83       	std	Z+5, r25	; 0x05
     2ec:	a6 83       	std	Z+6, r26	; 0x06
     2ee:	b7 83       	std	Z+7, r27	; 0x07
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <_fpadd_parts+0x20e>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	44 1f       	adc	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	24 83       	std	Z+4, r18	; 0x04
     2fc:	35 83       	std	Z+5, r19	; 0x05
     2fe:	46 83       	std	Z+6, r20	; 0x06
     300:	57 83       	std	Z+7, r21	; 0x07
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	93 83       	std	Z+3, r25	; 0x03
     30a:	82 83       	std	Z+2, r24	; 0x02
     30c:	24 81       	ldd	r18, Z+4	; 0x04
     30e:	35 81       	ldd	r19, Z+5	; 0x05
     310:	46 81       	ldd	r20, Z+6	; 0x06
     312:	57 81       	ldd	r21, Z+7	; 0x07
     314:	da 01       	movw	r26, r20
     316:	c9 01       	movw	r24, r18
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	a1 09       	sbc	r26, r1
     31c:	b1 09       	sbc	r27, r1
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	af 4f       	sbci	r26, 0xFF	; 255
     324:	bf 43       	sbci	r27, 0x3F	; 63
     326:	28 f3       	brcs	.-54     	; 0x2f2 <_fpadd_parts+0x1f4>
     328:	0b c0       	rjmp	.+22     	; 0x340 <_fpadd_parts+0x242>
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	33 82       	std	Z+3, r3	; 0x03
     32e:	22 82       	std	Z+2, r2	; 0x02
     330:	ea 0c       	add	r14, r10
     332:	fb 1c       	adc	r15, r11
     334:	0c 1d       	adc	r16, r12
     336:	1d 1d       	adc	r17, r13
     338:	e4 82       	std	Z+4, r14	; 0x04
     33a:	f5 82       	std	Z+5, r15	; 0x05
     33c:	06 83       	std	Z+6, r16	; 0x06
     33e:	17 83       	std	Z+7, r17	; 0x07
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	80 83       	st	Z, r24
     344:	24 81       	ldd	r18, Z+4	; 0x04
     346:	35 81       	ldd	r19, Z+5	; 0x05
     348:	46 81       	ldd	r20, Z+6	; 0x06
     34a:	57 81       	ldd	r21, Z+7	; 0x07
     34c:	57 ff       	sbrs	r21, 7
     34e:	1a c0       	rjmp	.+52     	; 0x384 <_fpadd_parts+0x286>
     350:	c9 01       	movw	r24, r18
     352:	aa 27       	eor	r26, r26
     354:	97 fd       	sbrc	r25, 7
     356:	a0 95       	com	r26
     358:	ba 2f       	mov	r27, r26
     35a:	81 70       	andi	r24, 0x01	; 1
     35c:	90 70       	andi	r25, 0x00	; 0
     35e:	a0 70       	andi	r26, 0x00	; 0
     360:	b0 70       	andi	r27, 0x00	; 0
     362:	56 95       	lsr	r21
     364:	47 95       	ror	r20
     366:	37 95       	ror	r19
     368:	27 95       	ror	r18
     36a:	82 2b       	or	r24, r18
     36c:	93 2b       	or	r25, r19
     36e:	a4 2b       	or	r26, r20
     370:	b5 2b       	or	r27, r21
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	95 83       	std	Z+5, r25	; 0x05
     376:	a6 83       	std	Z+6, r26	; 0x06
     378:	b7 83       	std	Z+7, r27	; 0x07
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	93 81       	ldd	r25, Z+3	; 0x03
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
     384:	df 01       	movw	r26, r30
     386:	01 c0       	rjmp	.+2      	; 0x38a <_fpadd_parts+0x28c>
     388:	d2 01       	movw	r26, r4
     38a:	cd 01       	movw	r24, r26
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	e2 e1       	ldi	r30, 0x12	; 18
     392:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__epilogue_restores__>

00000396 <__subsf3>:
     396:	a0 e2       	ldi	r26, 0x20	; 32
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e1 ed       	ldi	r30, 0xD1	; 209
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__prologue_saves__+0x18>
     3a2:	69 83       	std	Y+1, r22	; 0x01
     3a4:	7a 83       	std	Y+2, r23	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	2d 83       	std	Y+5, r18	; 0x05
     3ac:	3e 83       	std	Y+6, r19	; 0x06
     3ae:	4f 83       	std	Y+7, r20	; 0x07
     3b0:	58 87       	std	Y+8, r21	; 0x08
     3b2:	e9 e0       	ldi	r30, 0x09	; 9
     3b4:	ee 2e       	mov	r14, r30
     3b6:	f1 2c       	mov	r15, r1
     3b8:	ec 0e       	add	r14, r28
     3ba:	fd 1e       	adc	r15, r29
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	b7 01       	movw	r22, r14
     3c2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     3c6:	8e 01       	movw	r16, r28
     3c8:	0f 5e       	subi	r16, 0xEF	; 239
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	ce 01       	movw	r24, r28
     3ce:	05 96       	adiw	r24, 0x05	; 5
     3d0:	b8 01       	movw	r22, r16
     3d2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	89 27       	eor	r24, r25
     3dc:	8a 8b       	std	Y+18, r24	; 0x12
     3de:	c7 01       	movw	r24, r14
     3e0:	b8 01       	movw	r22, r16
     3e2:	ae 01       	movw	r20, r28
     3e4:	47 5e       	subi	r20, 0xE7	; 231
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     3ec:	0e 94 07 04 	call	0x80e	; 0x80e <__pack_f>
     3f0:	a0 96       	adiw	r28, 0x20	; 32
     3f2:	e6 e0       	ldi	r30, 0x06	; 6
     3f4:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__epilogue_restores__+0x18>

000003f8 <__addsf3>:
     3f8:	a0 e2       	ldi	r26, 0x20	; 32
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__prologue_saves__+0x18>
     404:	69 83       	std	Y+1, r22	; 0x01
     406:	7a 83       	std	Y+2, r23	; 0x02
     408:	8b 83       	std	Y+3, r24	; 0x03
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	2d 83       	std	Y+5, r18	; 0x05
     40e:	3e 83       	std	Y+6, r19	; 0x06
     410:	4f 83       	std	Y+7, r20	; 0x07
     412:	58 87       	std	Y+8, r21	; 0x08
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	ef 2e       	mov	r14, r31
     418:	f1 2c       	mov	r15, r1
     41a:	ec 0e       	add	r14, r28
     41c:	fd 1e       	adc	r15, r29
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	b7 01       	movw	r22, r14
     424:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     428:	8e 01       	movw	r16, r28
     42a:	0f 5e       	subi	r16, 0xEF	; 239
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	ce 01       	movw	r24, r28
     430:	05 96       	adiw	r24, 0x05	; 5
     432:	b8 01       	movw	r22, r16
     434:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     438:	c7 01       	movw	r24, r14
     43a:	b8 01       	movw	r22, r16
     43c:	ae 01       	movw	r20, r28
     43e:	47 5e       	subi	r20, 0xE7	; 231
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     446:	0e 94 07 04 	call	0x80e	; 0x80e <__pack_f>
     44a:	a0 96       	adiw	r28, 0x20	; 32
     44c:	e6 e0       	ldi	r30, 0x06	; 6
     44e:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__epilogue_restores__+0x18>

00000452 <__mulsf3>:
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ef e2       	ldi	r30, 0x2F	; 47
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__prologue_saves__>
     45e:	69 83       	std	Y+1, r22	; 0x01
     460:	7a 83       	std	Y+2, r23	; 0x02
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	2d 83       	std	Y+5, r18	; 0x05
     468:	3e 83       	std	Y+6, r19	; 0x06
     46a:	4f 83       	std	Y+7, r20	; 0x07
     46c:	58 87       	std	Y+8, r21	; 0x08
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	be 01       	movw	r22, r28
     474:	67 5f       	subi	r22, 0xF7	; 247
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     47c:	ce 01       	movw	r24, r28
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	be 01       	movw	r22, r28
     482:	6f 5e       	subi	r22, 0xEF	; 239
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	92 30       	cpi	r25, 0x02	; 2
     48e:	88 f0       	brcs	.+34     	; 0x4b2 <__mulsf3+0x60>
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	c8 f0       	brcs	.+50     	; 0x4c8 <__mulsf3+0x76>
     496:	94 30       	cpi	r25, 0x04	; 4
     498:	19 f4       	brne	.+6      	; 0x4a0 <__mulsf3+0x4e>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	51 f4       	brne	.+20     	; 0x4b2 <__mulsf3+0x60>
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__mulsf3+0x56>
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	29 f4       	brne	.+10     	; 0x4ae <__mulsf3+0x5c>
     4a4:	92 30       	cpi	r25, 0x02	; 2
     4a6:	81 f4       	brne	.+32     	; 0x4c8 <__mulsf3+0x76>
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	c6 c0       	rjmp	.+396    	; 0x63a <__mulsf3+0x1e8>
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <__mulsf3+0x72>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	8a 89       	ldd	r24, Y+18	; 0x12
     4b8:	98 13       	cpse	r25, r24
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 87       	std	Y+10, r18	; 0x0a
     4be:	ce 01       	movw	r24, r28
     4c0:	09 96       	adiw	r24, 0x09	; 9
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <__mulsf3+0x1e8>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	49 f4       	brne	.+18     	; 0x4da <__mulsf3+0x88>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	98 13       	cpse	r25, r24
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	2a 8b       	std	Y+18, r18	; 0x12
     4d4:	ce 01       	movw	r24, r28
     4d6:	41 96       	adiw	r24, 0x11	; 17
     4d8:	b0 c0       	rjmp	.+352    	; 0x63a <__mulsf3+0x1e8>
     4da:	2d 84       	ldd	r2, Y+13	; 0x0d
     4dc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4de:	4f 84       	ldd	r4, Y+15	; 0x0f
     4e0:	58 88       	ldd	r5, Y+16	; 0x10
     4e2:	6d 88       	ldd	r6, Y+21	; 0x15
     4e4:	7e 88       	ldd	r7, Y+22	; 0x16
     4e6:	8f 88       	ldd	r8, Y+23	; 0x17
     4e8:	98 8c       	ldd	r9, Y+24	; 0x18
     4ea:	ee 24       	eor	r14, r14
     4ec:	ff 24       	eor	r15, r15
     4ee:	87 01       	movw	r16, r14
     4f0:	aa 24       	eor	r10, r10
     4f2:	bb 24       	eor	r11, r11
     4f4:	65 01       	movw	r12, r10
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	c1 01       	movw	r24, r2
     504:	81 70       	andi	r24, 0x01	; 1
     506:	90 70       	andi	r25, 0x00	; 0
     508:	89 2b       	or	r24, r25
     50a:	e9 f0       	breq	.+58     	; 0x546 <__mulsf3+0xf4>
     50c:	e6 0c       	add	r14, r6
     50e:	f7 1c       	adc	r15, r7
     510:	08 1d       	adc	r16, r8
     512:	19 1d       	adc	r17, r9
     514:	9a 01       	movw	r18, r20
     516:	ab 01       	movw	r20, r22
     518:	2a 0d       	add	r18, r10
     51a:	3b 1d       	adc	r19, r11
     51c:	4c 1d       	adc	r20, r12
     51e:	5d 1d       	adc	r21, r13
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e6 14       	cp	r14, r6
     52a:	f7 04       	cpc	r15, r7
     52c:	08 05       	cpc	r16, r8
     52e:	19 05       	cpc	r17, r9
     530:	20 f4       	brcc	.+8      	; 0x53a <__mulsf3+0xe8>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	a9 01       	movw	r20, r18
     53e:	48 0f       	add	r20, r24
     540:	59 1f       	adc	r21, r25
     542:	6a 1f       	adc	r22, r26
     544:	7b 1f       	adc	r23, r27
     546:	aa 0c       	add	r10, r10
     548:	bb 1c       	adc	r11, r11
     54a:	cc 1c       	adc	r12, r12
     54c:	dd 1c       	adc	r13, r13
     54e:	97 fe       	sbrs	r9, 7
     550:	08 c0       	rjmp	.+16     	; 0x562 <__mulsf3+0x110>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	a8 2a       	or	r10, r24
     55c:	b9 2a       	or	r11, r25
     55e:	ca 2a       	or	r12, r26
     560:	db 2a       	or	r13, r27
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	e0 32       	cpi	r30, 0x20	; 32
     566:	f1 05       	cpc	r31, r1
     568:	49 f0       	breq	.+18     	; 0x57c <__mulsf3+0x12a>
     56a:	66 0c       	add	r6, r6
     56c:	77 1c       	adc	r7, r7
     56e:	88 1c       	adc	r8, r8
     570:	99 1c       	adc	r9, r9
     572:	56 94       	lsr	r5
     574:	47 94       	ror	r4
     576:	37 94       	ror	r3
     578:	27 94       	ror	r2
     57a:	c3 cf       	rjmp	.-122    	; 0x502 <__mulsf3+0xb0>
     57c:	fa 85       	ldd	r31, Y+10	; 0x0a
     57e:	ea 89       	ldd	r30, Y+18	; 0x12
     580:	2b 89       	ldd	r18, Y+19	; 0x13
     582:	3c 89       	ldd	r19, Y+20	; 0x14
     584:	8b 85       	ldd	r24, Y+11	; 0x0b
     586:	9c 85       	ldd	r25, Y+12	; 0x0c
     588:	28 0f       	add	r18, r24
     58a:	39 1f       	adc	r19, r25
     58c:	2e 5f       	subi	r18, 0xFE	; 254
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <__mulsf3+0x16e>
     592:	ca 01       	movw	r24, r20
     594:	81 70       	andi	r24, 0x01	; 1
     596:	90 70       	andi	r25, 0x00	; 0
     598:	89 2b       	or	r24, r25
     59a:	61 f0       	breq	.+24     	; 0x5b4 <__mulsf3+0x162>
     59c:	16 95       	lsr	r17
     59e:	07 95       	ror	r16
     5a0:	f7 94       	ror	r15
     5a2:	e7 94       	ror	r14
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e8       	ldi	r27, 0x80	; 128
     5ac:	e8 2a       	or	r14, r24
     5ae:	f9 2a       	or	r15, r25
     5b0:	0a 2b       	or	r16, r26
     5b2:	1b 2b       	or	r17, r27
     5b4:	76 95       	lsr	r23
     5b6:	67 95       	ror	r22
     5b8:	57 95       	ror	r21
     5ba:	47 95       	ror	r20
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	e7 cf       	rjmp	.-50     	; 0x592 <__mulsf3+0x140>
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__mulsf3+0x18c>
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	66 1f       	adc	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	17 fd       	sbrc	r17, 7
     5d0:	41 60       	ori	r20, 0x01	; 1
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	00 1f       	adc	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	30 40       	sbci	r19, 0x00	; 0
     5de:	40 30       	cpi	r20, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	59 07       	cpc	r21, r25
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	69 07       	cpc	r22, r25
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	79 07       	cpc	r23, r25
     5ec:	60 f3       	brcs	.-40     	; 0x5c6 <__mulsf3+0x174>
     5ee:	2b 8f       	std	Y+27, r18	; 0x1b
     5f0:	3c 8f       	std	Y+28, r19	; 0x1c
     5f2:	db 01       	movw	r26, r22
     5f4:	ca 01       	movw	r24, r20
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	90 70       	andi	r25, 0x00	; 0
     5fa:	a0 70       	andi	r26, 0x00	; 0
     5fc:	b0 70       	andi	r27, 0x00	; 0
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	61 f4       	brne	.+24     	; 0x620 <__mulsf3+0x1ce>
     608:	47 fd       	sbrc	r20, 7
     60a:	0a c0       	rjmp	.+20     	; 0x620 <__mulsf3+0x1ce>
     60c:	e1 14       	cp	r14, r1
     60e:	f1 04       	cpc	r15, r1
     610:	01 05       	cpc	r16, r1
     612:	11 05       	cpc	r17, r1
     614:	29 f0       	breq	.+10     	; 0x620 <__mulsf3+0x1ce>
     616:	40 5c       	subi	r20, 0xC0	; 192
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	6f 4f       	sbci	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	40 78       	andi	r20, 0x80	; 128
     620:	1a 8e       	std	Y+26, r1	; 0x1a
     622:	fe 17       	cp	r31, r30
     624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1d8>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	8a 8f       	std	Y+26, r24	; 0x1a
     62a:	4d 8f       	std	Y+29, r20	; 0x1d
     62c:	5e 8f       	std	Y+30, r21	; 0x1e
     62e:	6f 8f       	std	Y+31, r22	; 0x1f
     630:	78 a3       	std	Y+32, r23	; 0x20
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	89 8f       	std	Y+25, r24	; 0x19
     636:	ce 01       	movw	r24, r28
     638:	49 96       	adiw	r24, 0x19	; 25
     63a:	0e 94 07 04 	call	0x80e	; 0x80e <__pack_f>
     63e:	a0 96       	adiw	r28, 0x20	; 32
     640:	e2 e1       	ldi	r30, 0x12	; 18
     642:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__epilogue_restores__>

00000646 <__gtsf2>:
     646:	a8 e1       	ldi	r26, 0x18	; 24
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e9 e2       	ldi	r30, 0x29	; 41
     64c:	f3 e0       	ldi	r31, 0x03	; 3
     64e:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__prologue_saves__+0x18>
     652:	69 83       	std	Y+1, r22	; 0x01
     654:	7a 83       	std	Y+2, r23	; 0x02
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	2d 83       	std	Y+5, r18	; 0x05
     65c:	3e 83       	std	Y+6, r19	; 0x06
     65e:	4f 83       	std	Y+7, r20	; 0x07
     660:	58 87       	std	Y+8, r21	; 0x08
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	e8 2e       	mov	r14, r24
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	b7 01       	movw	r22, r14
     672:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     676:	8e 01       	movw	r16, r28
     678:	0f 5e       	subi	r16, 0xEF	; 239
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	ce 01       	movw	r24, r28
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	b8 01       	movw	r22, r16
     682:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     686:	89 85       	ldd	r24, Y+9	; 0x09
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	40 f0       	brcs	.+16     	; 0x69c <__gtsf2+0x56>
     68c:	89 89       	ldd	r24, Y+17	; 0x11
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	28 f0       	brcs	.+10     	; 0x69c <__gtsf2+0x56>
     692:	c7 01       	movw	r24, r14
     694:	b8 01       	movw	r22, r16
     696:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fpcmp_parts_f>
     69a:	01 c0       	rjmp	.+2      	; 0x69e <__gtsf2+0x58>
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	68 96       	adiw	r28, 0x18	; 24
     6a0:	e6 e0       	ldi	r30, 0x06	; 6
     6a2:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__epilogue_restores__+0x18>

000006a6 <__gesf2>:
     6a6:	a8 e1       	ldi	r26, 0x18	; 24
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	e9 e5       	ldi	r30, 0x59	; 89
     6ac:	f3 e0       	ldi	r31, 0x03	; 3
     6ae:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__prologue_saves__+0x18>
     6b2:	69 83       	std	Y+1, r22	; 0x01
     6b4:	7a 83       	std	Y+2, r23	; 0x02
     6b6:	8b 83       	std	Y+3, r24	; 0x03
     6b8:	9c 83       	std	Y+4, r25	; 0x04
     6ba:	2d 83       	std	Y+5, r18	; 0x05
     6bc:	3e 83       	std	Y+6, r19	; 0x06
     6be:	4f 83       	std	Y+7, r20	; 0x07
     6c0:	58 87       	std	Y+8, r21	; 0x08
     6c2:	89 e0       	ldi	r24, 0x09	; 9
     6c4:	e8 2e       	mov	r14, r24
     6c6:	f1 2c       	mov	r15, r1
     6c8:	ec 0e       	add	r14, r28
     6ca:	fd 1e       	adc	r15, r29
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	b7 01       	movw	r22, r14
     6d2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     6d6:	8e 01       	movw	r16, r28
     6d8:	0f 5e       	subi	r16, 0xEF	; 239
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	ce 01       	movw	r24, r28
     6de:	05 96       	adiw	r24, 0x05	; 5
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     6e6:	89 85       	ldd	r24, Y+9	; 0x09
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	40 f0       	brcs	.+16     	; 0x6fc <__gesf2+0x56>
     6ec:	89 89       	ldd	r24, Y+17	; 0x11
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	28 f0       	brcs	.+10     	; 0x6fc <__gesf2+0x56>
     6f2:	c7 01       	movw	r24, r14
     6f4:	b8 01       	movw	r22, r16
     6f6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fpcmp_parts_f>
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <__gesf2+0x58>
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	68 96       	adiw	r28, 0x18	; 24
     700:	e6 e0       	ldi	r30, 0x06	; 6
     702:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__epilogue_restores__+0x18>

00000706 <__ltsf2>:
     706:	a8 e1       	ldi	r26, 0x18	; 24
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	e9 e8       	ldi	r30, 0x89	; 137
     70c:	f3 e0       	ldi	r31, 0x03	; 3
     70e:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__prologue_saves__+0x18>
     712:	69 83       	std	Y+1, r22	; 0x01
     714:	7a 83       	std	Y+2, r23	; 0x02
     716:	8b 83       	std	Y+3, r24	; 0x03
     718:	9c 83       	std	Y+4, r25	; 0x04
     71a:	2d 83       	std	Y+5, r18	; 0x05
     71c:	3e 83       	std	Y+6, r19	; 0x06
     71e:	4f 83       	std	Y+7, r20	; 0x07
     720:	58 87       	std	Y+8, r21	; 0x08
     722:	89 e0       	ldi	r24, 0x09	; 9
     724:	e8 2e       	mov	r14, r24
     726:	f1 2c       	mov	r15, r1
     728:	ec 0e       	add	r14, r28
     72a:	fd 1e       	adc	r15, r29
     72c:	ce 01       	movw	r24, r28
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	b7 01       	movw	r22, r14
     732:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     736:	8e 01       	movw	r16, r28
     738:	0f 5e       	subi	r16, 0xEF	; 239
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
     73c:	ce 01       	movw	r24, r28
     73e:	05 96       	adiw	r24, 0x05	; 5
     740:	b8 01       	movw	r22, r16
     742:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     746:	89 85       	ldd	r24, Y+9	; 0x09
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	40 f0       	brcs	.+16     	; 0x75c <__ltsf2+0x56>
     74c:	89 89       	ldd	r24, Y+17	; 0x11
     74e:	82 30       	cpi	r24, 0x02	; 2
     750:	28 f0       	brcs	.+10     	; 0x75c <__ltsf2+0x56>
     752:	c7 01       	movw	r24, r14
     754:	b8 01       	movw	r22, r16
     756:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fpcmp_parts_f>
     75a:	01 c0       	rjmp	.+2      	; 0x75e <__ltsf2+0x58>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	68 96       	adiw	r28, 0x18	; 24
     760:	e6 e0       	ldi	r30, 0x06	; 6
     762:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__epilogue_restores__+0x18>

00000766 <__fixsfsi>:
     766:	ac e0       	ldi	r26, 0x0C	; 12
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	e9 eb       	ldi	r30, 0xB9	; 185
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__prologue_saves__+0x20>
     772:	69 83       	std	Y+1, r22	; 0x01
     774:	7a 83       	std	Y+2, r23	; 0x02
     776:	8b 83       	std	Y+3, r24	; 0x03
     778:	9c 83       	std	Y+4, r25	; 0x04
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	be 01       	movw	r22, r28
     780:	6b 5f       	subi	r22, 0xFB	; 251
     782:	7f 4f       	sbci	r23, 0xFF	; 255
     784:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     788:	8d 81       	ldd	r24, Y+5	; 0x05
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	61 f1       	breq	.+88     	; 0x7e6 <__fixsfsi+0x80>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	50 f1       	brcs	.+84     	; 0x7e6 <__fixsfsi+0x80>
     792:	84 30       	cpi	r24, 0x04	; 4
     794:	21 f4       	brne	.+8      	; 0x79e <__fixsfsi+0x38>
     796:	8e 81       	ldd	r24, Y+6	; 0x06
     798:	88 23       	and	r24, r24
     79a:	51 f1       	breq	.+84     	; 0x7f0 <__fixsfsi+0x8a>
     79c:	2e c0       	rjmp	.+92     	; 0x7fa <__fixsfsi+0x94>
     79e:	2f 81       	ldd	r18, Y+7	; 0x07
     7a0:	38 85       	ldd	r19, Y+8	; 0x08
     7a2:	37 fd       	sbrc	r19, 7
     7a4:	20 c0       	rjmp	.+64     	; 0x7e6 <__fixsfsi+0x80>
     7a6:	6e 81       	ldd	r22, Y+6	; 0x06
     7a8:	2f 31       	cpi	r18, 0x1F	; 31
     7aa:	31 05       	cpc	r19, r1
     7ac:	1c f0       	brlt	.+6      	; 0x7b4 <__fixsfsi+0x4e>
     7ae:	66 23       	and	r22, r22
     7b0:	f9 f0       	breq	.+62     	; 0x7f0 <__fixsfsi+0x8a>
     7b2:	23 c0       	rjmp	.+70     	; 0x7fa <__fixsfsi+0x94>
     7b4:	8e e1       	ldi	r24, 0x1E	; 30
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	82 1b       	sub	r24, r18
     7ba:	93 0b       	sbc	r25, r19
     7bc:	29 85       	ldd	r18, Y+9	; 0x09
     7be:	3a 85       	ldd	r19, Y+10	; 0x0a
     7c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <__fixsfsi+0x68>
     7c6:	56 95       	lsr	r21
     7c8:	47 95       	ror	r20
     7ca:	37 95       	ror	r19
     7cc:	27 95       	ror	r18
     7ce:	8a 95       	dec	r24
     7d0:	d2 f7       	brpl	.-12     	; 0x7c6 <__fixsfsi+0x60>
     7d2:	66 23       	and	r22, r22
     7d4:	b1 f0       	breq	.+44     	; 0x802 <__fixsfsi+0x9c>
     7d6:	50 95       	com	r21
     7d8:	40 95       	com	r20
     7da:	30 95       	com	r19
     7dc:	21 95       	neg	r18
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
     7e0:	4f 4f       	sbci	r20, 0xFF	; 255
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	0e c0       	rjmp	.+28     	; 0x802 <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	09 c0       	rjmp	.+18     	; 0x802 <__fixsfsi+0x9c>
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	3f ef       	ldi	r19, 0xFF	; 255
     7f4:	4f ef       	ldi	r20, 0xFF	; 255
     7f6:	5f e7       	ldi	r21, 0x7F	; 127
     7f8:	04 c0       	rjmp	.+8      	; 0x802 <__fixsfsi+0x9c>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e8       	ldi	r21, 0x80	; 128
     802:	b9 01       	movw	r22, r18
     804:	ca 01       	movw	r24, r20
     806:	2c 96       	adiw	r28, 0x0c	; 12
     808:	e2 e0       	ldi	r30, 0x02	; 2
     80a:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__epilogue_restores__+0x20>

0000080e <__pack_f>:
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	fc 01       	movw	r30, r24
     81a:	e4 80       	ldd	r14, Z+4	; 0x04
     81c:	f5 80       	ldd	r15, Z+5	; 0x05
     81e:	06 81       	ldd	r16, Z+6	; 0x06
     820:	17 81       	ldd	r17, Z+7	; 0x07
     822:	d1 80       	ldd	r13, Z+1	; 0x01
     824:	80 81       	ld	r24, Z
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	48 f4       	brcc	.+18     	; 0x83c <__pack_f+0x2e>
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	a0 e1       	ldi	r26, 0x10	; 16
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	e8 2a       	or	r14, r24
     834:	f9 2a       	or	r15, r25
     836:	0a 2b       	or	r16, r26
     838:	1b 2b       	or	r17, r27
     83a:	a5 c0       	rjmp	.+330    	; 0x986 <__stack+0x87>
     83c:	84 30       	cpi	r24, 0x04	; 4
     83e:	09 f4       	brne	.+2      	; 0x842 <__pack_f+0x34>
     840:	9f c0       	rjmp	.+318    	; 0x980 <__stack+0x81>
     842:	82 30       	cpi	r24, 0x02	; 2
     844:	21 f4       	brne	.+8      	; 0x84e <__pack_f+0x40>
     846:	ee 24       	eor	r14, r14
     848:	ff 24       	eor	r15, r15
     84a:	87 01       	movw	r16, r14
     84c:	05 c0       	rjmp	.+10     	; 0x858 <__pack_f+0x4a>
     84e:	e1 14       	cp	r14, r1
     850:	f1 04       	cpc	r15, r1
     852:	01 05       	cpc	r16, r1
     854:	11 05       	cpc	r17, r1
     856:	19 f4       	brne	.+6      	; 0x85e <__pack_f+0x50>
     858:	e0 e0       	ldi	r30, 0x00	; 0
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	96 c0       	rjmp	.+300    	; 0x98a <__stack+0x8b>
     85e:	62 81       	ldd	r22, Z+2	; 0x02
     860:	73 81       	ldd	r23, Z+3	; 0x03
     862:	9f ef       	ldi	r25, 0xFF	; 255
     864:	62 38       	cpi	r22, 0x82	; 130
     866:	79 07       	cpc	r23, r25
     868:	0c f0       	brlt	.+2      	; 0x86c <__pack_f+0x5e>
     86a:	5b c0       	rjmp	.+182    	; 0x922 <__stack+0x23>
     86c:	22 e8       	ldi	r18, 0x82	; 130
     86e:	3f ef       	ldi	r19, 0xFF	; 255
     870:	26 1b       	sub	r18, r22
     872:	37 0b       	sbc	r19, r23
     874:	2a 31       	cpi	r18, 0x1A	; 26
     876:	31 05       	cpc	r19, r1
     878:	2c f0       	brlt	.+10     	; 0x884 <__pack_f+0x76>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	2a c0       	rjmp	.+84     	; 0x8d8 <__pack_f+0xca>
     884:	b8 01       	movw	r22, r16
     886:	a7 01       	movw	r20, r14
     888:	02 2e       	mov	r0, r18
     88a:	04 c0       	rjmp	.+8      	; 0x894 <__pack_f+0x86>
     88c:	76 95       	lsr	r23
     88e:	67 95       	ror	r22
     890:	57 95       	ror	r21
     892:	47 95       	ror	r20
     894:	0a 94       	dec	r0
     896:	d2 f7       	brpl	.-12     	; 0x88c <__pack_f+0x7e>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 e0       	ldi	r26, 0x00	; 0
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__pack_f+0x9c>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	aa 1f       	adc	r26, r26
     8a8:	bb 1f       	adc	r27, r27
     8aa:	2a 95       	dec	r18
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <__pack_f+0x94>
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	a1 09       	sbc	r26, r1
     8b2:	b1 09       	sbc	r27, r1
     8b4:	8e 21       	and	r24, r14
     8b6:	9f 21       	and	r25, r15
     8b8:	a0 23       	and	r26, r16
     8ba:	b1 23       	and	r27, r17
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	a1 05       	cpc	r26, r1
     8c0:	b1 05       	cpc	r27, r1
     8c2:	21 f0       	breq	.+8      	; 0x8cc <__pack_f+0xbe>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	9a 01       	movw	r18, r20
     8ce:	ab 01       	movw	r20, r22
     8d0:	28 2b       	or	r18, r24
     8d2:	39 2b       	or	r19, r25
     8d4:	4a 2b       	or	r20, r26
     8d6:	5b 2b       	or	r21, r27
     8d8:	da 01       	movw	r26, r20
     8da:	c9 01       	movw	r24, r18
     8dc:	8f 77       	andi	r24, 0x7F	; 127
     8de:	90 70       	andi	r25, 0x00	; 0
     8e0:	a0 70       	andi	r26, 0x00	; 0
     8e2:	b0 70       	andi	r27, 0x00	; 0
     8e4:	80 34       	cpi	r24, 0x40	; 64
     8e6:	91 05       	cpc	r25, r1
     8e8:	a1 05       	cpc	r26, r1
     8ea:	b1 05       	cpc	r27, r1
     8ec:	39 f4       	brne	.+14     	; 0x8fc <__pack_f+0xee>
     8ee:	27 ff       	sbrs	r18, 7
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <__stack+0x5>
     8f2:	20 5c       	subi	r18, 0xC0	; 192
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	4f 4f       	sbci	r20, 0xFF	; 255
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <__stack+0x5>
     8fc:	21 5c       	subi	r18, 0xC1	; 193
     8fe:	3f 4f       	sbci	r19, 0xFF	; 255
     900:	4f 4f       	sbci	r20, 0xFF	; 255
     902:	5f 4f       	sbci	r21, 0xFF	; 255
     904:	e0 e0       	ldi	r30, 0x00	; 0
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	20 30       	cpi	r18, 0x00	; 0
     90a:	a0 e0       	ldi	r26, 0x00	; 0
     90c:	3a 07       	cpc	r19, r26
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	4a 07       	cpc	r20, r26
     912:	a0 e4       	ldi	r26, 0x40	; 64
     914:	5a 07       	cpc	r21, r26
     916:	10 f0       	brcs	.+4      	; 0x91c <__stack+0x1d>
     918:	e1 e0       	ldi	r30, 0x01	; 1
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	79 01       	movw	r14, r18
     91e:	8a 01       	movw	r16, r20
     920:	27 c0       	rjmp	.+78     	; 0x970 <__stack+0x71>
     922:	60 38       	cpi	r22, 0x80	; 128
     924:	71 05       	cpc	r23, r1
     926:	64 f5       	brge	.+88     	; 0x980 <__stack+0x81>
     928:	fb 01       	movw	r30, r22
     92a:	e1 58       	subi	r30, 0x81	; 129
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	d8 01       	movw	r26, r16
     930:	c7 01       	movw	r24, r14
     932:	8f 77       	andi	r24, 0x7F	; 127
     934:	90 70       	andi	r25, 0x00	; 0
     936:	a0 70       	andi	r26, 0x00	; 0
     938:	b0 70       	andi	r27, 0x00	; 0
     93a:	80 34       	cpi	r24, 0x40	; 64
     93c:	91 05       	cpc	r25, r1
     93e:	a1 05       	cpc	r26, r1
     940:	b1 05       	cpc	r27, r1
     942:	39 f4       	brne	.+14     	; 0x952 <__stack+0x53>
     944:	e7 fe       	sbrs	r14, 7
     946:	0d c0       	rjmp	.+26     	; 0x962 <__stack+0x63>
     948:	80 e4       	ldi	r24, 0x40	; 64
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	04 c0       	rjmp	.+8      	; 0x95a <__stack+0x5b>
     952:	8f e3       	ldi	r24, 0x3F	; 63
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e8 0e       	add	r14, r24
     95c:	f9 1e       	adc	r15, r25
     95e:	0a 1f       	adc	r16, r26
     960:	1b 1f       	adc	r17, r27
     962:	17 ff       	sbrs	r17, 7
     964:	05 c0       	rjmp	.+10     	; 0x970 <__stack+0x71>
     966:	16 95       	lsr	r17
     968:	07 95       	ror	r16
     96a:	f7 94       	ror	r15
     96c:	e7 94       	ror	r14
     96e:	31 96       	adiw	r30, 0x01	; 1
     970:	87 e0       	ldi	r24, 0x07	; 7
     972:	16 95       	lsr	r17
     974:	07 95       	ror	r16
     976:	f7 94       	ror	r15
     978:	e7 94       	ror	r14
     97a:	8a 95       	dec	r24
     97c:	d1 f7       	brne	.-12     	; 0x972 <__stack+0x73>
     97e:	05 c0       	rjmp	.+10     	; 0x98a <__stack+0x8b>
     980:	ee 24       	eor	r14, r14
     982:	ff 24       	eor	r15, r15
     984:	87 01       	movw	r16, r14
     986:	ef ef       	ldi	r30, 0xFF	; 255
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	6e 2f       	mov	r22, r30
     98c:	67 95       	ror	r22
     98e:	66 27       	eor	r22, r22
     990:	67 95       	ror	r22
     992:	90 2f       	mov	r25, r16
     994:	9f 77       	andi	r25, 0x7F	; 127
     996:	d7 94       	ror	r13
     998:	dd 24       	eor	r13, r13
     99a:	d7 94       	ror	r13
     99c:	8e 2f       	mov	r24, r30
     99e:	86 95       	lsr	r24
     9a0:	49 2f       	mov	r20, r25
     9a2:	46 2b       	or	r20, r22
     9a4:	58 2f       	mov	r21, r24
     9a6:	5d 29       	or	r21, r13
     9a8:	b7 01       	movw	r22, r14
     9aa:	ca 01       	movw	r24, r20
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	08 95       	ret

000009b8 <__unpack_f>:
     9b8:	fc 01       	movw	r30, r24
     9ba:	db 01       	movw	r26, r22
     9bc:	40 81       	ld	r20, Z
     9be:	51 81       	ldd	r21, Z+1	; 0x01
     9c0:	22 81       	ldd	r18, Z+2	; 0x02
     9c2:	62 2f       	mov	r22, r18
     9c4:	6f 77       	andi	r22, 0x7F	; 127
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	22 1f       	adc	r18, r18
     9ca:	22 27       	eor	r18, r18
     9cc:	22 1f       	adc	r18, r18
     9ce:	93 81       	ldd	r25, Z+3	; 0x03
     9d0:	89 2f       	mov	r24, r25
     9d2:	88 0f       	add	r24, r24
     9d4:	82 2b       	or	r24, r18
     9d6:	28 2f       	mov	r18, r24
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	99 1f       	adc	r25, r25
     9dc:	99 27       	eor	r25, r25
     9de:	99 1f       	adc	r25, r25
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	9c 93       	st	X, r25
     9e4:	11 97       	sbiw	r26, 0x01	; 1
     9e6:	21 15       	cp	r18, r1
     9e8:	31 05       	cpc	r19, r1
     9ea:	a9 f5       	brne	.+106    	; 0xa56 <__unpack_f+0x9e>
     9ec:	41 15       	cp	r20, r1
     9ee:	51 05       	cpc	r21, r1
     9f0:	61 05       	cpc	r22, r1
     9f2:	71 05       	cpc	r23, r1
     9f4:	11 f4       	brne	.+4      	; 0x9fa <__unpack_f+0x42>
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	37 c0       	rjmp	.+110    	; 0xa68 <__unpack_f+0xb0>
     9fa:	82 e8       	ldi	r24, 0x82	; 130
     9fc:	9f ef       	ldi	r25, 0xFF	; 255
     9fe:	13 96       	adiw	r26, 0x03	; 3
     a00:	9c 93       	st	X, r25
     a02:	8e 93       	st	-X, r24
     a04:	12 97       	sbiw	r26, 0x02	; 2
     a06:	9a 01       	movw	r18, r20
     a08:	ab 01       	movw	r20, r22
     a0a:	67 e0       	ldi	r22, 0x07	; 7
     a0c:	22 0f       	add	r18, r18
     a0e:	33 1f       	adc	r19, r19
     a10:	44 1f       	adc	r20, r20
     a12:	55 1f       	adc	r21, r21
     a14:	6a 95       	dec	r22
     a16:	d1 f7       	brne	.-12     	; 0xa0c <__unpack_f+0x54>
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	8c 93       	st	X, r24
     a1c:	0d c0       	rjmp	.+26     	; 0xa38 <__unpack_f+0x80>
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
     a22:	44 1f       	adc	r20, r20
     a24:	55 1f       	adc	r21, r21
     a26:	12 96       	adiw	r26, 0x02	; 2
     a28:	8d 91       	ld	r24, X+
     a2a:	9c 91       	ld	r25, X
     a2c:	13 97       	sbiw	r26, 0x03	; 3
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	13 96       	adiw	r26, 0x03	; 3
     a32:	9c 93       	st	X, r25
     a34:	8e 93       	st	-X, r24
     a36:	12 97       	sbiw	r26, 0x02	; 2
     a38:	20 30       	cpi	r18, 0x00	; 0
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	38 07       	cpc	r19, r24
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	48 07       	cpc	r20, r24
     a42:	80 e4       	ldi	r24, 0x40	; 64
     a44:	58 07       	cpc	r21, r24
     a46:	58 f3       	brcs	.-42     	; 0xa1e <__unpack_f+0x66>
     a48:	14 96       	adiw	r26, 0x04	; 4
     a4a:	2d 93       	st	X+, r18
     a4c:	3d 93       	st	X+, r19
     a4e:	4d 93       	st	X+, r20
     a50:	5c 93       	st	X, r21
     a52:	17 97       	sbiw	r26, 0x07	; 7
     a54:	08 95       	ret
     a56:	2f 3f       	cpi	r18, 0xFF	; 255
     a58:	31 05       	cpc	r19, r1
     a5a:	79 f4       	brne	.+30     	; 0xa7a <__unpack_f+0xc2>
     a5c:	41 15       	cp	r20, r1
     a5e:	51 05       	cpc	r21, r1
     a60:	61 05       	cpc	r22, r1
     a62:	71 05       	cpc	r23, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__unpack_f+0xb4>
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	8c 93       	st	X, r24
     a6a:	08 95       	ret
     a6c:	64 ff       	sbrs	r22, 4
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <__unpack_f+0xbe>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	8c 93       	st	X, r24
     a74:	12 c0       	rjmp	.+36     	; 0xa9a <__unpack_f+0xe2>
     a76:	1c 92       	st	X, r1
     a78:	10 c0       	rjmp	.+32     	; 0xa9a <__unpack_f+0xe2>
     a7a:	2f 57       	subi	r18, 0x7F	; 127
     a7c:	30 40       	sbci	r19, 0x00	; 0
     a7e:	13 96       	adiw	r26, 0x03	; 3
     a80:	3c 93       	st	X, r19
     a82:	2e 93       	st	-X, r18
     a84:	12 97       	sbiw	r26, 0x02	; 2
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	8c 93       	st	X, r24
     a8a:	87 e0       	ldi	r24, 0x07	; 7
     a8c:	44 0f       	add	r20, r20
     a8e:	55 1f       	adc	r21, r21
     a90:	66 1f       	adc	r22, r22
     a92:	77 1f       	adc	r23, r23
     a94:	8a 95       	dec	r24
     a96:	d1 f7       	brne	.-12     	; 0xa8c <__unpack_f+0xd4>
     a98:	70 64       	ori	r23, 0x40	; 64
     a9a:	14 96       	adiw	r26, 0x04	; 4
     a9c:	4d 93       	st	X+, r20
     a9e:	5d 93       	st	X+, r21
     aa0:	6d 93       	st	X+, r22
     aa2:	7c 93       	st	X, r23
     aa4:	17 97       	sbiw	r26, 0x07	; 7
     aa6:	08 95       	ret

00000aa8 <__fpcmp_parts_f>:
     aa8:	1f 93       	push	r17
     aaa:	dc 01       	movw	r26, r24
     aac:	fb 01       	movw	r30, r22
     aae:	9c 91       	ld	r25, X
     ab0:	92 30       	cpi	r25, 0x02	; 2
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <__fpcmp_parts_f+0xe>
     ab4:	47 c0       	rjmp	.+142    	; 0xb44 <__fpcmp_parts_f+0x9c>
     ab6:	80 81       	ld	r24, Z
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	08 f4       	brcc	.+2      	; 0xabe <__fpcmp_parts_f+0x16>
     abc:	43 c0       	rjmp	.+134    	; 0xb44 <__fpcmp_parts_f+0x9c>
     abe:	94 30       	cpi	r25, 0x04	; 4
     ac0:	51 f4       	brne	.+20     	; 0xad6 <__fpcmp_parts_f+0x2e>
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	1c 91       	ld	r17, X
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	99 f5       	brne	.+102    	; 0xb30 <__fpcmp_parts_f+0x88>
     aca:	81 81       	ldd	r24, Z+1	; 0x01
     acc:	68 2f       	mov	r22, r24
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	61 1b       	sub	r22, r17
     ad2:	71 09       	sbc	r23, r1
     ad4:	3f c0       	rjmp	.+126    	; 0xb54 <__fpcmp_parts_f+0xac>
     ad6:	84 30       	cpi	r24, 0x04	; 4
     ad8:	21 f0       	breq	.+8      	; 0xae2 <__fpcmp_parts_f+0x3a>
     ada:	92 30       	cpi	r25, 0x02	; 2
     adc:	31 f4       	brne	.+12     	; 0xaea <__fpcmp_parts_f+0x42>
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	b9 f1       	breq	.+110    	; 0xb50 <__fpcmp_parts_f+0xa8>
     ae2:	81 81       	ldd	r24, Z+1	; 0x01
     ae4:	88 23       	and	r24, r24
     ae6:	89 f1       	breq	.+98     	; 0xb4a <__fpcmp_parts_f+0xa2>
     ae8:	2d c0       	rjmp	.+90     	; 0xb44 <__fpcmp_parts_f+0x9c>
     aea:	11 96       	adiw	r26, 0x01	; 1
     aec:	1c 91       	ld	r17, X
     aee:	11 97       	sbiw	r26, 0x01	; 1
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	f1 f0       	breq	.+60     	; 0xb30 <__fpcmp_parts_f+0x88>
     af4:	81 81       	ldd	r24, Z+1	; 0x01
     af6:	18 17       	cp	r17, r24
     af8:	d9 f4       	brne	.+54     	; 0xb30 <__fpcmp_parts_f+0x88>
     afa:	12 96       	adiw	r26, 0x02	; 2
     afc:	2d 91       	ld	r18, X+
     afe:	3c 91       	ld	r19, X
     b00:	13 97       	sbiw	r26, 0x03	; 3
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	82 17       	cp	r24, r18
     b08:	93 07       	cpc	r25, r19
     b0a:	94 f0       	brlt	.+36     	; 0xb30 <__fpcmp_parts_f+0x88>
     b0c:	28 17       	cp	r18, r24
     b0e:	39 07       	cpc	r19, r25
     b10:	bc f0       	brlt	.+46     	; 0xb40 <__fpcmp_parts_f+0x98>
     b12:	14 96       	adiw	r26, 0x04	; 4
     b14:	8d 91       	ld	r24, X+
     b16:	9d 91       	ld	r25, X+
     b18:	0d 90       	ld	r0, X+
     b1a:	bc 91       	ld	r27, X
     b1c:	a0 2d       	mov	r26, r0
     b1e:	24 81       	ldd	r18, Z+4	; 0x04
     b20:	35 81       	ldd	r19, Z+5	; 0x05
     b22:	46 81       	ldd	r20, Z+6	; 0x06
     b24:	57 81       	ldd	r21, Z+7	; 0x07
     b26:	28 17       	cp	r18, r24
     b28:	39 07       	cpc	r19, r25
     b2a:	4a 07       	cpc	r20, r26
     b2c:	5b 07       	cpc	r21, r27
     b2e:	18 f4       	brcc	.+6      	; 0xb36 <__fpcmp_parts_f+0x8e>
     b30:	11 23       	and	r17, r17
     b32:	41 f0       	breq	.+16     	; 0xb44 <__fpcmp_parts_f+0x9c>
     b34:	0a c0       	rjmp	.+20     	; 0xb4a <__fpcmp_parts_f+0xa2>
     b36:	82 17       	cp	r24, r18
     b38:	93 07       	cpc	r25, r19
     b3a:	a4 07       	cpc	r26, r20
     b3c:	b5 07       	cpc	r27, r21
     b3e:	40 f4       	brcc	.+16     	; 0xb50 <__fpcmp_parts_f+0xa8>
     b40:	11 23       	and	r17, r17
     b42:	19 f0       	breq	.+6      	; 0xb4a <__fpcmp_parts_f+0xa2>
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	05 c0       	rjmp	.+10     	; 0xb54 <__fpcmp_parts_f+0xac>
     b4a:	6f ef       	ldi	r22, 0xFF	; 255
     b4c:	7f ef       	ldi	r23, 0xFF	; 255
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <__fpcmp_parts_f+0xac>
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	cb 01       	movw	r24, r22
     b56:	1f 91       	pop	r17
     b58:	08 95       	ret

00000b5a <ADC_voidInit>:
static void (*ADC_pvCallBackNotificationFunc)(void)=NULL;
static u8 ADC_u8BusyState=IDLE;


void ADC_voidInit(void)
{
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
	/*Voltage Reference Selection */
#if V_REF==AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
     b62:	ac e7       	ldi	r26, 0x7C	; 124
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	ec e7       	ldi	r30, 0x7C	; 124
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 7b       	andi	r24, 0xBF	; 191
     b6e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b70:	ac e7       	ldi	r26, 0x7C	; 124
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	ec e7       	ldi	r30, 0x7C	; 124
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	8c 93       	st	X, r24
#error "Wrong V_REF configuration option"
#endif

	/*Check Left adjust result enable initial state*/
#if LEFT_ADJUST==ADC_8_BIT
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b7e:	ac e7       	ldi	r26, 0x7C	; 124
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	ec e7       	ldi	r30, 0x7C	; 124
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	80 62       	ori	r24, 0x20	; 32
     b8a:	8c 93       	st	X, r24
#error "Wrong LEFT_ADJUST configuration option"
#endif

	/*Check Peripheral ADC enable initial state*/
#if ADC_STATE==ADC_ENABLED
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b8c:	aa e7       	ldi	r26, 0x7A	; 122
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ea e7       	ldi	r30, 0x7A	; 122
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	80 68       	ori	r24, 0x80	; 128
     b98:	8c 93       	st	X, r24
#endif

	/*ADC Prescaler Selection*/

	/*Clear First 3_bit in ADCSRA register */
	ADCSRA&=ADC_PRISCALER_MASK;
     b9a:	aa e7       	ldi	r26, 0x7A	; 122
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ea e7       	ldi	r30, 0x7A	; 122
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	88 7f       	andi	r24, 0xF8	; 248
     ba6:	8c 93       	st	X, r24
	/*Set First 3_bit in ADCSRA register to select Division Factor r between the system clock frequency and the input clock to the ADC*/
	ADCSRA|=ADC_PRISCALER;
     ba8:	aa e7       	ldi	r26, 0x7A	; 122
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e7       	ldi	r30, 0x7A	; 122
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	87 60       	ori	r24, 0x07	; 7
     bb4:	8c 93       	st	X, r24

}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <ADC_u8StartConversionSynch>:




u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u8*Copy_pu8Reading)
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	28 97       	sbiw	r28, 0x08	; 8
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	8e 83       	std	Y+6, r24	; 0x06
     bd2:	78 87       	std	Y+8, r23	; 0x08
     bd4:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bd6:	1a 82       	std	Y+2, r1	; 0x02
     bd8:	1b 82       	std	Y+3, r1	; 0x03
     bda:	1c 82       	std	Y+4, r1	; 0x04
     bdc:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     bde:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE)
     be0:	80 91 0c 01 	lds	r24, 0x010C
     be4:	88 23       	and	r24, r24
     be6:	09 f0       	breq	.+2      	; 0xbea <ADC_u8StartConversionSynch+0x2e>
     be8:	54 c0       	rjmp	.+168    	; 0xc92 <ADC_u8StartConversionSynch+0xd6>
	{
		ADC_u8BusyState=BUSY;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	80 93 0c 01 	sts	0x010C, r24
		/*Choose Channel of ADC*/

		/*Clear First 4_bit in ADMUX register */
		ADMUX&=ADC_ADMUX_MASK;
     bf0:	ac e7       	ldi	r26, 0x7C	; 124
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ec e7       	ldi	r30, 0x7C	; 124
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 7f       	andi	r24, 0xF0	; 240
     bfc:	8c 93       	st	X, r24
		/*SET the required Channel into the MUX bits */
		ADMUX|=Copy_u8Channel;
     bfe:	ac e7       	ldi	r26, 0x7C	; 124
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ec e7       	ldi	r30, 0x7C	; 124
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	90 81       	ld	r25, Z
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	89 2b       	or	r24, r25
     c0c:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     c0e:	aa e7       	ldi	r26, 0x7A	; 122
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ea e7       	ldi	r30, 0x7A	; 122
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 64       	ori	r24, 0x40	; 64
     c1a:	8c 93       	st	X, r24
     c1c:	0b c0       	rjmp	.+22     	; 0xc34 <ADC_u8StartConversionSynch+0x78>

		while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0&&Local_u32Counter!=ADC_u32TIMEOUT)
		{
			Local_u32Counter++;
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	ac 81       	ldd	r26, Y+4	; 0x04
     c24:	bd 81       	ldd	r27, Y+5	; 0x05
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	a1 1d       	adc	r26, r1
     c2a:	b1 1d       	adc	r27, r1
     c2c:	8a 83       	std	Y+2, r24	; 0x02
     c2e:	9b 83       	std	Y+3, r25	; 0x03
     c30:	ac 83       	std	Y+4, r26	; 0x04
     c32:	bd 83       	std	Y+5, r27	; 0x05
		ADMUX|=Copy_u8Channel;

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0&&Local_u32Counter!=ADC_u32TIMEOUT)
     c34:	ea e7       	ldi	r30, 0x7A	; 122
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	82 95       	swap	r24
     c3c:	8f 70       	andi	r24, 0x0F	; 15
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	81 70       	andi	r24, 0x01	; 1
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	61 f4       	brne	.+24     	; 0xc62 <ADC_u8StartConversionSynch+0xa6>
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	ac 81       	ldd	r26, Y+4	; 0x04
     c50:	bd 81       	ldd	r27, Y+5	; 0x05
     c52:	80 35       	cpi	r24, 0x50	; 80
     c54:	23 ec       	ldi	r18, 0xC3	; 195
     c56:	92 07       	cpc	r25, r18
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	a2 07       	cpc	r26, r18
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	b2 07       	cpc	r27, r18
     c60:	f1 f6       	brne	.-68     	; 0xc1e <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	9b 81       	ldd	r25, Y+3	; 0x03
     c66:	ac 81       	ldd	r26, Y+4	; 0x04
     c68:	bd 81       	ldd	r27, Y+5	; 0x05
     c6a:	80 35       	cpi	r24, 0x50	; 80
     c6c:	23 ec       	ldi	r18, 0xC3	; 195
     c6e:	92 07       	cpc	r25, r18
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	a2 07       	cpc	r26, r18
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	b2 07       	cpc	r27, r18
     c78:	19 f4       	brne	.+6      	; 0xc80 <ADC_u8StartConversionSynch+0xc4>
		{
			//loop broken cause the timeout is reached
			Local_u8ErrorState=NOK;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	0b c0       	rjmp	.+22     	; 0xc96 <ADC_u8StartConversionSynch+0xda>
		}
		else
		{
			//Loop is broken cause of the rising of ADC Flag
			*Copy_pu8Reading=ADCH;
     c80:	e9 e7       	ldi	r30, 0x79	; 121
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	ef 81       	ldd	r30, Y+7	; 0x07
     c88:	f8 85       	ldd	r31, Y+8	; 0x08
     c8a:	80 83       	st	Z, r24

			ADC_u8BusyState=IDLE;
     c8c:	10 92 0c 01 	sts	0x010C, r1
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <ADC_u8StartConversionSynch+0xda>
		}

	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
}
     c98:	28 96       	adiw	r28, 0x08	; 8
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <ADC_u8StartConversionAsynch>:



u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u8 *Copy_pu8Reading,void(*Copy_pvNotificationFunc)(void))
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <ADC_u8StartConversionAsynch+0x6>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <ADC_u8StartConversionAsynch+0x8>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <ADC_u8StartConversionAsynch+0xa>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	8a 83       	std	Y+2, r24	; 0x02
     cba:	7c 83       	std	Y+4, r23	; 0x04
     cbc:	6b 83       	std	Y+3, r22	; 0x03
     cbe:	5e 83       	std	Y+6, r21	; 0x06
     cc0:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     cc2:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE)
     cc4:	80 91 0c 01 	lds	r24, 0x010C
     cc8:	88 23       	and	r24, r24
     cca:	c1 f5       	brne	.+112    	; 0xd3c <ADC_u8StartConversionAsynch+0x92>
	{
		ADC_u8BusyState=BUSY;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 0c 01 	sts	0x010C, r24
		if(Copy_pu8Reading==NULL||Copy_pvNotificationFunc==NULL)
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	21 f0       	breq	.+8      	; 0xce2 <ADC_u8StartConversionAsynch+0x38>
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	9e 81       	ldd	r25, Y+6	; 0x06
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	19 f4       	brne	.+6      	; 0xce8 <ADC_u8StartConversionAsynch+0x3e>
		{
			Local_u8ErrorState=NULL_POINTER;
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	2c c0       	rjmp	.+88     	; 0xd40 <ADC_u8StartConversionAsynch+0x96>
		}
		else
		{
			ADC_pu8Reading=Copy_pu8Reading;
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	9c 81       	ldd	r25, Y+4	; 0x04
     cec:	90 93 09 01 	sts	0x0109, r25
     cf0:	80 93 08 01 	sts	0x0108, r24
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	90 93 0b 01 	sts	0x010B, r25
     cfc:	80 93 0a 01 	sts	0x010A, r24
			/*Clear First 4_bit in ADMUX register */
			ADMUX&=ADC_ADMUX_MASK;
     d00:	ac e7       	ldi	r26, 0x7C	; 124
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ec e7       	ldi	r30, 0x7C	; 124
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	80 7f       	andi	r24, 0xF0	; 240
     d0c:	8c 93       	st	X, r24
			/*SET the required Channel into the MUX bits */
			ADMUX|=Copy_u8Channel;
     d0e:	ac e7       	ldi	r26, 0x7C	; 124
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ec e7       	ldi	r30, 0x7C	; 124
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	90 81       	ld	r25, Z
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	89 2b       	or	r24, r25
     d1c:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d1e:	aa e7       	ldi	r26, 0x7A	; 122
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ea e7       	ldi	r30, 0x7A	; 122
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	80 64       	ori	r24, 0x40	; 64
     d2a:	8c 93       	st	X, r24
			/*enable ADC INT*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d2c:	aa e7       	ldi	r26, 0x7A	; 122
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ea e7       	ldi	r30, 0x7A	; 122
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	8c 93       	st	X, r24
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <ADC_u8StartConversionAsynch+0x96>

		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d40:	89 81       	ldd	r24, Y+1	; 0x01

}
     d42:	26 96       	adiw	r28, 0x06	; 6
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <__vector_21>:

void __vector_21 (void) __attribute__((signal));
void __vector_21 (void)
{
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	2f 93       	push	r18
     d60:	3f 93       	push	r19
     d62:	4f 93       	push	r20
     d64:	5f 93       	push	r21
     d66:	6f 93       	push	r22
     d68:	7f 93       	push	r23
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25
     d6e:	af 93       	push	r26
     d70:	bf 93       	push	r27
     d72:	ef 93       	push	r30
     d74:	ff 93       	push	r31
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	/*Read ADC result*/
	*ADC_pu8Reading=ADCH;
     d7e:	a0 91 08 01 	lds	r26, 0x0108
     d82:	b0 91 09 01 	lds	r27, 0x0109
     d86:	e9 e7       	ldi	r30, 0x79	; 121
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8c 93       	st	X, r24
	/*MAke ADC Sate IDLE*/
	ADC_u8BusyState=IDLE;
     d8e:	10 92 0c 01 	sts	0x010C, r1
	/*Invoke the call back notification function*/
	ADC_pvCallBackNotificationFunc();
     d92:	e0 91 0a 01 	lds	r30, 0x010A
     d96:	f0 91 0b 01 	lds	r31, 0x010B
     d9a:	09 95       	icall
	/*Disable ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     d9c:	aa e7       	ldi	r26, 0x7A	; 122
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e7       	ldi	r30, 0x7A	; 122
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	87 7f       	andi	r24, 0xF7	; 247
     da8:	8c 93       	st	X, r24
}
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	bf 91       	pop	r27
     db4:	af 91       	pop	r26
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	7f 91       	pop	r23
     dbc:	6f 91       	pop	r22
     dbe:	5f 91       	pop	r21
     dc0:	4f 91       	pop	r20
     dc2:	3f 91       	pop	r19
     dc4:	2f 91       	pop	r18
     dc6:	0f 90       	pop	r0
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	0f 90       	pop	r0
     dcc:	1f 90       	pop	r1
     dce:	18 95       	reti

00000dd0 <CLCD_voidSendCommand>:
#include"CLCD_private.h"



void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	6d 97       	sbiw	r28, 0x1d	; 29
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>

	/*Set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command>>4);
     dfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dfc:	98 2f       	mov	r25, r24
     dfe:	92 95       	swap	r25
     e00:	9f 70       	andi	r25, 0x0F	; 15
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	69 2f       	mov	r22, r25
     e06:	0e 94 23 0c 	call	0x1846	; 0x1846 <DIO_u8SetPortValue>

	/*Set enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a0 e4       	ldi	r26, 0x40	; 64
     e1a:	b0 e4       	ldi	r27, 0x40	; 64
     e1c:	89 8f       	std	Y+25, r24	; 0x19
     e1e:	9a 8f       	std	Y+26, r25	; 0x1a
     e20:	ab 8f       	std	Y+27, r26	; 0x1b
     e22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e24:	69 8d       	ldd	r22, Y+25	; 0x19
     e26:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	4a ef       	ldi	r20, 0xFA	; 250
     e32:	54 e4       	ldi	r21, 0x44	; 68
     e34:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	8d 8b       	std	Y+21, r24	; 0x15
     e3e:	9e 8b       	std	Y+22, r25	; 0x16
     e40:	af 8b       	std	Y+23, r26	; 0x17
     e42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e44:	6d 89       	ldd	r22, Y+21	; 0x15
     e46:	7e 89       	ldd	r23, Y+22	; 0x16
     e48:	8f 89       	ldd	r24, Y+23	; 0x17
     e4a:	98 8d       	ldd	r25, Y+24	; 0x18
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e8       	ldi	r20, 0x80	; 128
     e52:	5f e3       	ldi	r21, 0x3F	; 63
     e54:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
     e58:	88 23       	and	r24, r24
     e5a:	2c f4       	brge	.+10     	; 0xe66 <CLCD_voidSendCommand+0x96>
		__ticks = 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9c 8b       	std	Y+20, r25	; 0x14
     e62:	8b 8b       	std	Y+19, r24	; 0x13
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <CLCD_voidSendCommand+0x114>
	else if (__tmp > 65535)
     e66:	6d 89       	ldd	r22, Y+21	; 0x15
     e68:	7e 89       	ldd	r23, Y+22	; 0x16
     e6a:	8f 89       	ldd	r24, Y+23	; 0x17
     e6c:	98 8d       	ldd	r25, Y+24	; 0x18
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	3f ef       	ldi	r19, 0xFF	; 255
     e72:	4f e7       	ldi	r20, 0x7F	; 127
     e74:	57 e4       	ldi	r21, 0x47	; 71
     e76:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
     e7a:	18 16       	cp	r1, r24
     e7c:	4c f5       	brge	.+82     	; 0xed0 <CLCD_voidSendCommand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e7e:	69 8d       	ldd	r22, Y+25	; 0x19
     e80:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e82:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e84:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e2       	ldi	r20, 0x20	; 32
     e8c:	51 e4       	ldi	r21, 0x41	; 65
     e8e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	9c 8b       	std	Y+20, r25	; 0x14
     ea4:	8b 8b       	std	Y+19, r24	; 0x13
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <CLCD_voidSendCommand+0xf6>
     ea8:	88 ec       	ldi	r24, 0xC8	; 200
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9a 8b       	std	Y+18, r25	; 0x12
     eae:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eb0:	89 89       	ldd	r24, Y+17	; 0x11
     eb2:	9a 89       	ldd	r25, Y+18	; 0x12
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <CLCD_voidSendCommand+0xe4>
     eb8:	9a 8b       	std	Y+18, r25	; 0x12
     eba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ebc:	8b 89       	ldd	r24, Y+19	; 0x13
     ebe:	9c 89       	ldd	r25, Y+20	; 0x14
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	9c 8b       	std	Y+20, r25	; 0x14
     ec4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec6:	8b 89       	ldd	r24, Y+19	; 0x13
     ec8:	9c 89       	ldd	r25, Y+20	; 0x14
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	69 f7       	brne	.-38     	; 0xea8 <CLCD_voidSendCommand+0xd8>
     ece:	14 c0       	rjmp	.+40     	; 0xef8 <CLCD_voidSendCommand+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed0:	6d 89       	ldd	r22, Y+21	; 0x15
     ed2:	7e 89       	ldd	r23, Y+22	; 0x16
     ed4:	8f 89       	ldd	r24, Y+23	; 0x17
     ed6:	98 8d       	ldd	r25, Y+24	; 0x18
     ed8:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	9c 8b       	std	Y+20, r25	; 0x14
     ee2:	8b 8b       	std	Y+19, r24	; 0x13
     ee4:	8b 89       	ldd	r24, Y+19	; 0x13
     ee6:	9c 89       	ldd	r25, Y+20	; 0x14
     ee8:	98 8b       	std	Y+16, r25	; 0x10
     eea:	8f 87       	std	Y+15, r24	; 0x0f
     eec:	8f 85       	ldd	r24, Y+15	; 0x0f
     eee:	98 89       	ldd	r25, Y+16	; 0x10
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <CLCD_voidSendCommand+0x120>
     ef4:	98 8b       	std	Y+16, r25	; 0x10
     ef6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	62 e0       	ldi	r22, 0x02	; 2
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f06:	0e 94 23 0c 	call	0x1846	; 0x1846 <DIO_u8SetPortValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	62 e0       	ldi	r22, 0x02	; 2
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	a0 e4       	ldi	r26, 0x40	; 64
     f1a:	b0 e4       	ldi	r27, 0x40	; 64
     f1c:	8b 87       	std	Y+11, r24	; 0x0b
     f1e:	9c 87       	std	Y+12, r25	; 0x0c
     f20:	ad 87       	std	Y+13, r26	; 0x0d
     f22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f24:	6b 85       	ldd	r22, Y+11	; 0x0b
     f26:	7c 85       	ldd	r23, Y+12	; 0x0c
     f28:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	4a ef       	ldi	r20, 0xFA	; 250
     f32:	54 e4       	ldi	r21, 0x44	; 68
     f34:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	8f 83       	std	Y+7, r24	; 0x07
     f3e:	98 87       	std	Y+8, r25	; 0x08
     f40:	a9 87       	std	Y+9, r26	; 0x09
     f42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f44:	6f 81       	ldd	r22, Y+7	; 0x07
     f46:	78 85       	ldd	r23, Y+8	; 0x08
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e8       	ldi	r20, 0x80	; 128
     f52:	5f e3       	ldi	r21, 0x3F	; 63
     f54:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
     f58:	88 23       	and	r24, r24
     f5a:	2c f4       	brge	.+10     	; 0xf66 <CLCD_voidSendCommand+0x196>
		__ticks = 1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	3f c0       	rjmp	.+126    	; 0xfe4 <CLCD_voidSendCommand+0x214>
	else if (__tmp > 65535)
     f66:	6f 81       	ldd	r22, Y+7	; 0x07
     f68:	78 85       	ldd	r23, Y+8	; 0x08
     f6a:	89 85       	ldd	r24, Y+9	; 0x09
     f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	3f ef       	ldi	r19, 0xFF	; 255
     f72:	4f e7       	ldi	r20, 0x7F	; 127
     f74:	57 e4       	ldi	r21, 0x47	; 71
     f76:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
     f7a:	18 16       	cp	r1, r24
     f7c:	4c f5       	brge	.+82     	; 0xfd0 <CLCD_voidSendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f80:	7c 85       	ldd	r23, Y+12	; 0x0c
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e2       	ldi	r20, 0x20	; 32
     f8c:	51 e4       	ldi	r21, 0x41	; 65
     f8e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9e 83       	std	Y+6, r25	; 0x06
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	0f c0       	rjmp	.+30     	; 0xfc6 <CLCD_voidSendCommand+0x1f6>
     fa8:	88 ec       	ldi	r24, 0xC8	; 200
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 83       	std	Y+4, r25	; 0x04
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <CLCD_voidSendCommand+0x1e4>
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	9e 81       	ldd	r25, Y+6	; 0x06
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	69 f7       	brne	.-38     	; 0xfa8 <CLCD_voidSendCommand+0x1d8>
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <CLCD_voidSendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd0:	6f 81       	ldd	r22, Y+7	; 0x07
     fd2:	78 85       	ldd	r23, Y+8	; 0x08
     fd4:	89 85       	ldd	r24, Y+9	; 0x09
     fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd8:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <CLCD_voidSendCommand+0x220>
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(3);

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	62 e0       	ldi	r22, 0x02	; 2
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>

}
    1002:	6d 96       	adiw	r28, 0x1d	; 29
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	6d 97       	sbiw	r28, 0x1d	; 29
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	41 e0       	ldi	r20, 0x01	; 1
    1030:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>

	/*Set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>

	/*Set data to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data>>4);
    103e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1040:	98 2f       	mov	r25, r24
    1042:	92 95       	swap	r25
    1044:	9f 70       	andi	r25, 0x0F	; 15
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	69 2f       	mov	r22, r25
    104a:	0e 94 23 0c 	call	0x1846	; 0x1846 <DIO_u8SetPortValue>

	/*Set enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	62 e0       	ldi	r22, 0x02	; 2
    1052:	41 e0       	ldi	r20, 0x01	; 1
    1054:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a0 e4       	ldi	r26, 0x40	; 64
    105e:	b0 e4       	ldi	r27, 0x40	; 64
    1060:	89 8f       	std	Y+25, r24	; 0x19
    1062:	9a 8f       	std	Y+26, r25	; 0x1a
    1064:	ab 8f       	std	Y+27, r26	; 0x1b
    1066:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1068:	69 8d       	ldd	r22, Y+25	; 0x19
    106a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    106e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	4a ef       	ldi	r20, 0xFA	; 250
    1076:	54 e4       	ldi	r21, 0x44	; 68
    1078:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8d 8b       	std	Y+21, r24	; 0x15
    1082:	9e 8b       	std	Y+22, r25	; 0x16
    1084:	af 8b       	std	Y+23, r26	; 0x17
    1086:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1088:	6d 89       	ldd	r22, Y+21	; 0x15
    108a:	7e 89       	ldd	r23, Y+22	; 0x16
    108c:	8f 89       	ldd	r24, Y+23	; 0x17
    108e:	98 8d       	ldd	r25, Y+24	; 0x18
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <CLCD_voidSendData+0x96>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9c 8b       	std	Y+20, r25	; 0x14
    10a6:	8b 8b       	std	Y+19, r24	; 0x13
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <CLCD_voidSendData+0x114>
	else if (__tmp > 65535)
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	57 e4       	ldi	r21, 0x47	; 71
    10ba:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
    10be:	18 16       	cp	r1, r24
    10c0:	4c f5       	brge	.+82     	; 0x1114 <CLCD_voidSendData+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	69 8d       	ldd	r22, Y+25	; 0x19
    10c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e2       	ldi	r20, 0x20	; 32
    10d0:	51 e4       	ldi	r21, 0x41	; 65
    10d2:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9c 8b       	std	Y+20, r25	; 0x14
    10e8:	8b 8b       	std	Y+19, r24	; 0x13
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <CLCD_voidSendData+0xf6>
    10ec:	88 ec       	ldi	r24, 0xC8	; 200
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9a 8b       	std	Y+18, r25	; 0x12
    10f2:	89 8b       	std	Y+17, r24	; 0x11
    10f4:	89 89       	ldd	r24, Y+17	; 0x11
    10f6:	9a 89       	ldd	r25, Y+18	; 0x12
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <CLCD_voidSendData+0xe4>
    10fc:	9a 8b       	std	Y+18, r25	; 0x12
    10fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	9c 8b       	std	Y+20, r25	; 0x14
    1108:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	8b 89       	ldd	r24, Y+19	; 0x13
    110c:	9c 89       	ldd	r25, Y+20	; 0x14
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	69 f7       	brne	.-38     	; 0x10ec <CLCD_voidSendData+0xd8>
    1112:	14 c0       	rjmp	.+40     	; 0x113c <CLCD_voidSendData+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1114:	6d 89       	ldd	r22, Y+21	; 0x15
    1116:	7e 89       	ldd	r23, Y+22	; 0x16
    1118:	8f 89       	ldd	r24, Y+23	; 0x17
    111a:	98 8d       	ldd	r25, Y+24	; 0x18
    111c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9c 8b       	std	Y+20, r25	; 0x14
    1126:	8b 8b       	std	Y+19, r24	; 0x13
    1128:	8b 89       	ldd	r24, Y+19	; 0x13
    112a:	9c 89       	ldd	r25, Y+20	; 0x14
    112c:	98 8b       	std	Y+16, r25	; 0x10
    112e:	8f 87       	std	Y+15, r24	; 0x0f
    1130:	8f 85       	ldd	r24, Y+15	; 0x0f
    1132:	98 89       	ldd	r25, Y+16	; 0x10
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <CLCD_voidSendData+0x120>
    1138:	98 8b       	std	Y+16, r25	; 0x10
    113a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(3);

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	62 e0       	ldi	r22, 0x02	; 2
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	6d 8d       	ldd	r22, Y+29	; 0x1d
    114a:	0e 94 23 0c 	call	0x1846	; 0x1846 <DIO_u8SetPortValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	62 e0       	ldi	r22, 0x02	; 2
    1152:	41 e0       	ldi	r20, 0x01	; 1
    1154:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 e4       	ldi	r26, 0x40	; 64
    115e:	b0 e4       	ldi	r27, 0x40	; 64
    1160:	8b 87       	std	Y+11, r24	; 0x0b
    1162:	9c 87       	std	Y+12, r25	; 0x0c
    1164:	ad 87       	std	Y+13, r26	; 0x0d
    1166:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1168:	6b 85       	ldd	r22, Y+11	; 0x0b
    116a:	7c 85       	ldd	r23, Y+12	; 0x0c
    116c:	8d 85       	ldd	r24, Y+13	; 0x0d
    116e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4a ef       	ldi	r20, 0xFA	; 250
    1176:	54 e4       	ldi	r21, 0x44	; 68
    1178:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	8f 83       	std	Y+7, r24	; 0x07
    1182:	98 87       	std	Y+8, r25	; 0x08
    1184:	a9 87       	std	Y+9, r26	; 0x09
    1186:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
    119c:	88 23       	and	r24, r24
    119e:	2c f4       	brge	.+10     	; 0x11aa <CLCD_voidSendData+0x196>
		__ticks = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9e 83       	std	Y+6, r25	; 0x06
    11a6:	8d 83       	std	Y+5, r24	; 0x05
    11a8:	3f c0       	rjmp	.+126    	; 0x1228 <CLCD_voidSendData+0x214>
	else if (__tmp > 65535)
    11aa:	6f 81       	ldd	r22, Y+7	; 0x07
    11ac:	78 85       	ldd	r23, Y+8	; 0x08
    11ae:	89 85       	ldd	r24, Y+9	; 0x09
    11b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	4f e7       	ldi	r20, 0x7F	; 127
    11b8:	57 e4       	ldi	r21, 0x47	; 71
    11ba:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
    11be:	18 16       	cp	r1, r24
    11c0:	4c f5       	brge	.+82     	; 0x1214 <CLCD_voidSendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e2       	ldi	r20, 0x20	; 32
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 83       	std	Y+5, r24	; 0x05
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <CLCD_voidSendData+0x1f6>
    11ec:	88 ec       	ldi	r24, 0xC8	; 200
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9c 83       	std	Y+4, r25	; 0x04
    11f2:	8b 83       	std	Y+3, r24	; 0x03
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <CLCD_voidSendData+0x1e4>
    11fc:	9c 83       	std	Y+4, r25	; 0x04
    11fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	9e 81       	ldd	r25, Y+6	; 0x06
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9e 83       	std	Y+6, r25	; 0x06
    1208:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	69 f7       	brne	.-38     	; 0x11ec <CLCD_voidSendData+0x1d8>
    1212:	14 c0       	rjmp	.+40     	; 0x123c <CLCD_voidSendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1214:	6f 81       	ldd	r22, Y+7	; 0x07
    1216:	78 85       	ldd	r23, Y+8	; 0x08
    1218:	89 85       	ldd	r24, Y+9	; 0x09
    121a:	9a 85       	ldd	r25, Y+10	; 0x0a
    121c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <CLCD_voidSendData+0x220>
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(3);

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	62 e0       	ldi	r22, 0x02	; 2
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>


}
    1246:	6d 96       	adiw	r28, 0x1d	; 29
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	2e 97       	sbiw	r28, 0x0e	; 14
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 e2       	ldi	r26, 0x20	; 32
    1272:	b2 e4       	ldi	r27, 0x42	; 66
    1274:	8b 87       	std	Y+11, r24	; 0x0b
    1276:	9c 87       	std	Y+12, r25	; 0x0c
    1278:	ad 87       	std	Y+13, r26	; 0x0d
    127a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127c:	6b 85       	ldd	r22, Y+11	; 0x0b
    127e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1280:	8d 85       	ldd	r24, Y+13	; 0x0d
    1282:	9e 85       	ldd	r25, Y+14	; 0x0e
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a ef       	ldi	r20, 0xFA	; 250
    128a:	54 e4       	ldi	r21, 0x44	; 68
    128c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	8f 83       	std	Y+7, r24	; 0x07
    1296:	98 87       	std	Y+8, r25	; 0x08
    1298:	a9 87       	std	Y+9, r26	; 0x09
    129a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    129c:	6f 81       	ldd	r22, Y+7	; 0x07
    129e:	78 85       	ldd	r23, Y+8	; 0x08
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	2c f4       	brge	.+10     	; 0x12be <CLCD_voidInit+0x66>
		__ticks = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	78 85       	ldd	r23, Y+8	; 0x08
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
    12ca:	4f e7       	ldi	r20, 0x7F	; 127
    12cc:	57 e4       	ldi	r21, 0x47	; 71
    12ce:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	4c f5       	brge	.+82     	; 0x1328 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e2       	ldi	r20, 0x20	; 32
    12e4:	51 e4       	ldi	r21, 0x41	; 65
    12e6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <CLCD_voidInit+0xc6>
    1300:	88 ec       	ldi	r24, 0xC8	; 200
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <CLCD_voidInit+0xb4>
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	69 f7       	brne	.-38     	; 0x1300 <CLCD_voidInit+0xa8>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <CLCD_voidInit+0xf0>
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01


	/*wait more than 15ms*/
	_delay_ms(40);

	CLCD_voidSendCommand(0x33);
    1350:	83 e3       	ldi	r24, 0x33	; 51
    1352:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x32);	/* Send for 4 bit initialization of LCD  */
    1356:	82 e3       	ldi	r24, 0x32	; 50
    1358:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
    135c:	88 e2       	ldi	r24, 0x28	; 40
    135e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x0c);	/* Display on cursor off */
    1362:	8c e0       	ldi	r24, 0x0C	; 12
    1364:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x06);	/* Increment cursor (shift cursor to right) */
    1368:	86 e0       	ldi	r24, 0x06	; 6
    136a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x01);	/* Clear display screen */
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <CLCD_voidSendCommand>
}
    1374:	2e 96       	adiw	r28, 0x0e	; 14
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <CLCD_voidSendString+0x6>
    138c:	0f 92       	push	r0
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	9b 83       	std	Y+3, r25	; 0x03
    1394:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Inc=0;
    1396:	19 82       	std	Y+1, r1	; 0x01
    1398:	0e c0       	rjmp	.+28     	; 0x13b6 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Inc]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Inc]);
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	9b 81       	ldd	r25, Y+3	; 0x03
    13a4:	fc 01       	movw	r30, r24
    13a6:	e2 0f       	add	r30, r18
    13a8:	f3 1f       	adc	r31, r19
    13aa:	80 81       	ld	r24, Z
    13ac:	0e 94 0a 08 	call	0x1014	; 0x1014 <CLCD_voidSendData>
		Local_u8Inc++;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	8f 5f       	subi	r24, 0xFF	; 255
    13b4:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Inc=0;
	while(Copy_pcString[Local_u8Inc]!='\0')
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	9b 81       	ldd	r25, Y+3	; 0x03
    13c0:	fc 01       	movw	r30, r24
    13c2:	e2 0f       	add	r30, r18
    13c4:	f3 1f       	adc	r31, r19
    13c6:	80 81       	ld	r24, Z
    13c8:	88 23       	and	r24, r24
    13ca:	39 f7       	brne	.-50     	; 0x139a <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Inc]);
		Local_u8Inc++;
	}

}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <CLCD_voidGoToXY+0x6>
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	6b 83       	std	Y+3, r22	; 0x03

	/*Hold address*/
	u8 Local_u8Address;

	/*Location at First line*/
	if(Copy_u8XPos==0)
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	88 23       	and	r24, r24
    13ec:	19 f4       	brne	.+6      	; 0x13f4 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <CLCD_voidGoToXY+0x28>
	}

	/*Location at Second line*/
	else if(Copy_u8XPos==1)
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	19 f4       	brne	.+6      	; 0x1400 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos+0x40;
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	80 5c       	subi	r24, 0xC0	; 192
    13fe:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Set bit number 7 for set DDRAM Address command then send the command(for command 0 0 )(  1 ac6 ac5 ac4 ac3 ac2 ac1 ac0 )*/
	CLCD_voidSendCommand(128+Local_u8Address);
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	80 58       	subi	r24, 0x80	; 128
    1404:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <CLCD_voidSendCommand>
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	27 97       	sbiw	r28, 0x07	; 7
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	9c 83       	std	Y+4, r25	; 0x04
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	6d 83       	std	Y+5, r22	; 0x05
    142e:	4e 83       	std	Y+6, r20	; 0x06
    1430:	2f 83       	std	Y+7, r18	; 0x07
	/*Calculate CG RAM address each block 8 bytes*/
	u8 Local_u8CGRAMAddress=Copy_u8PatternNumber*8,Local_u8Iterator;
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	8a 83       	std	Y+2, r24	; 0x02

	/*send CG RAM address command to LCD ,setting bit 6,clear bit 7*/
	CLCD_voidSendCommand(64+Local_u8CGRAMAddress);
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	80 5c       	subi	r24, 0xC0	; 192
    144a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <CLCD_voidSendCommand>

	/*write the pattern in CG RAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    144e:	19 82       	std	Y+1, r1	; 0x01
    1450:	0e c0       	rjmp	.+28     	; 0x146e <CLCD_voidWriteSpecialCharacter+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	fc 01       	movw	r30, r24
    145e:	e2 0f       	add	r30, r18
    1460:	f3 1f       	adc	r31, r19
    1462:	80 81       	ld	r24, Z
    1464:	0e 94 0a 08 	call	0x1014	; 0x1014 <CLCD_voidSendData>

	/*send CG RAM address command to LCD ,setting bit 6,clear bit 7*/
	CLCD_voidSendCommand(64+Local_u8CGRAMAddress);

	/*write the pattern in CG RAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	78 f3       	brcs	.-34     	; 0x1452 <CLCD_voidWriteSpecialCharacter+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*Go to DD RAM to Display data in CG RAM*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1474:	8e 81       	ldd	r24, Y+6	; 0x06
    1476:	6f 81       	ldd	r22, Y+7	; 0x07
    1478:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <CLCD_voidGoToXY>

	/*Display data in CGRAM in screen*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	0e 94 0a 08 	call	0x1014	; 0x1014 <CLCD_voidSendData>
}
    1482:	27 96       	adiw	r28, 0x07	; 7
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <DIO_u8SetPinDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include"DIO_interface.h"
#include"DIO_register.h"
u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction )
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	28 97       	sbiw	r28, 0x08	; 8
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	8a 83       	std	Y+2, r24	; 0x02
    14aa:	6b 83       	std	Y+3, r22	; 0x03
    14ac:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    14ae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	88 30       	cpi	r24, 0x08	; 8
    14b4:	08 f0       	brcs	.+2      	; 0x14b8 <DIO_u8SetPinDirection+0x24>
    14b6:	b3 c0       	rjmp	.+358    	; 0x161e <DIO_u8SetPinDirection+0x18a>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	88 23       	and	r24, r24
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <DIO_u8SetPinDirection+0x2c>
    14be:	56 c0       	rjmp	.+172    	; 0x156c <DIO_u8SetPinDirection+0xd8>
		{
			switch(Copy_u8Port)
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	38 87       	std	Y+8, r19	; 0x08
    14c8:	2f 83       	std	Y+7, r18	; 0x07
    14ca:	8f 81       	ldd	r24, Y+7	; 0x07
    14cc:	98 85       	ldd	r25, Y+8	; 0x08
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	91 05       	cpc	r25, r1
    14d2:	f9 f0       	breq	.+62     	; 0x1512 <DIO_u8SetPinDirection+0x7e>
    14d4:	2f 81       	ldd	r18, Y+7	; 0x07
    14d6:	38 85       	ldd	r19, Y+8	; 0x08
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	79 f1       	breq	.+94     	; 0x153c <DIO_u8SetPinDirection+0xa8>
    14de:	8f 81       	ldd	r24, Y+7	; 0x07
    14e0:	98 85       	ldd	r25, Y+8	; 0x08
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <DIO_u8SetPinDirection+0x54>
    14e6:	3f c0       	rjmp	.+126    	; 0x1566 <DIO_u8SetPinDirection+0xd2>
			{
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
    14e8:	aa e2       	ldi	r26, 0x2A	; 42
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ea e2       	ldi	r30, 0x2A	; 42
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_u8SetPinDirection+0x72>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_u8SetPinDirection+0x6e>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	88 c0       	rjmp	.+272    	; 0x1622 <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
    1512:	a7 e2       	ldi	r26, 0x27	; 39
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e7 e2       	ldi	r30, 0x27	; 39
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_u8SetPinDirection+0x9c>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_u8SetPinDirection+0x98>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	73 c0       	rjmp	.+230    	; 0x1622 <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
    153c:	a4 e2       	ldi	r26, 0x24	; 36
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e4 e2       	ldi	r30, 0x24	; 36
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_u8SetPinDirection+0xc6>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_u8SetPinDirection+0xc2>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	5e c0       	rjmp	.+188    	; 0x1622 <DIO_u8SetPinDirection+0x18e>
			default : Local_u8ErrorState=1;break;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	5b c0       	rjmp	.+182    	; 0x1622 <DIO_u8SetPinDirection+0x18e>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	09 f0       	breq	.+2      	; 0x1574 <DIO_u8SetPinDirection+0xe0>
    1572:	52 c0       	rjmp	.+164    	; 0x1618 <DIO_u8SetPinDirection+0x184>
		{
			switch(Copy_u8Port)
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3e 83       	std	Y+6, r19	; 0x06
    157c:	2d 83       	std	Y+5, r18	; 0x05
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	e9 f0       	breq	.+58     	; 0x15c2 <DIO_u8SetPinDirection+0x12e>
    1588:	2d 81       	ldd	r18, Y+5	; 0x05
    158a:	3e 81       	ldd	r19, Y+6	; 0x06
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	61 f1       	breq	.+88     	; 0x15ea <DIO_u8SetPinDirection+0x156>
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	e1 f5       	brne	.+120    	; 0x1612 <DIO_u8SetPinDirection+0x17e>
			{
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
    159a:	aa e2       	ldi	r26, 0x2A	; 42
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ea e2       	ldi	r30, 0x2A	; 42
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_u8SetPinDirection+0x124>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_u8SetPinDirection+0x120>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	30 c0       	rjmp	.+96     	; 0x1622 <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
    15c2:	a7 e2       	ldi	r26, 0x27	; 39
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 e2       	ldi	r30, 0x27	; 39
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_u8SetPinDirection+0x14c>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_u8SetPinDirection+0x148>
    15e4:	84 2b       	or	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	1c c0       	rjmp	.+56     	; 0x1622 <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
    15ea:	a4 e2       	ldi	r26, 0x24	; 36
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e4 e2       	ldi	r30, 0x24	; 36
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_u8SetPinDirection+0x174>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DIO_u8SetPinDirection+0x170>
    160c:	84 2b       	or	r24, r20
    160e:	8c 93       	st	X, r24
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <DIO_u8SetPinDirection+0x18e>
			default : Local_u8ErrorState=1;break;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <DIO_u8SetPinDirection+0x18e>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_u8SetPinDirection+0x18e>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1622:	89 81       	ldd	r24, Y+1	; 0x01

}
    1624:	28 96       	adiw	r28, 0x08	; 8
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction )
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <DIO_u8SetPortDirection+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_u8SetPortDirection+0x8>
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorState=0;
    1648:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3d 83       	std	Y+5, r19	; 0x05
    1652:	2c 83       	std	Y+4, r18	; 0x04
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	9d 81       	ldd	r25, Y+5	; 0x05
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	71 f0       	breq	.+28     	; 0x167a <DIO_u8SetPortDirection+0x44>
    165e:	2c 81       	ldd	r18, Y+4	; 0x04
    1660:	3d 81       	ldd	r19, Y+5	; 0x05
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	71 f0       	breq	.+28     	; 0x1684 <DIO_u8SetPortDirection+0x4e>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	79 f4       	brne	.+30     	; 0x168e <DIO_u8SetPortDirection+0x58>
	{
	case DIO_u8PORTD :DDRD=Copy_u8Direction ;break;
    1670:	ea e2       	ldi	r30, 0x2A	; 42
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	80 83       	st	Z, r24
    1678:	0c c0       	rjmp	.+24     	; 0x1692 <DIO_u8SetPortDirection+0x5c>
	case DIO_u8PORTC :DDRC=Copy_u8Direction ;break;
    167a:	e7 e2       	ldi	r30, 0x27	; 39
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	80 83       	st	Z, r24
    1682:	07 c0       	rjmp	.+14     	; 0x1692 <DIO_u8SetPortDirection+0x5c>
	case DIO_u8PORTB :DDRB=Copy_u8Direction ;break;
    1684:	e4 e2       	ldi	r30, 0x24	; 36
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	80 83       	st	Z, r24
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_u8SetPortDirection+0x5c>
	default : Local_u8ErrorState=1;break;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	28 97       	sbiw	r28, 0x08	; 8
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	8a 83       	std	Y+2, r24	; 0x02
    16ba:	6b 83       	std	Y+3, r22	; 0x03
    16bc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    16be:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	88 30       	cpi	r24, 0x08	; 8
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <DIO_u8SetPinValue+0x24>
    16c6:	b3 c0       	rjmp	.+358    	; 0x182e <DIO_u8SetPinValue+0x18a>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	88 23       	and	r24, r24
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <DIO_u8SetPinValue+0x2c>
    16ce:	56 c0       	rjmp	.+172    	; 0x177c <DIO_u8SetPinValue+0xd8>
		{
			switch(Copy_u8Port)
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	38 87       	std	Y+8, r19	; 0x08
    16d8:	2f 83       	std	Y+7, r18	; 0x07
    16da:	8f 81       	ldd	r24, Y+7	; 0x07
    16dc:	98 85       	ldd	r25, Y+8	; 0x08
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	91 05       	cpc	r25, r1
    16e2:	f9 f0       	breq	.+62     	; 0x1722 <DIO_u8SetPinValue+0x7e>
    16e4:	2f 81       	ldd	r18, Y+7	; 0x07
    16e6:	38 85       	ldd	r19, Y+8	; 0x08
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	79 f1       	breq	.+94     	; 0x174c <DIO_u8SetPinValue+0xa8>
    16ee:	8f 81       	ldd	r24, Y+7	; 0x07
    16f0:	98 85       	ldd	r25, Y+8	; 0x08
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <DIO_u8SetPinValue+0x54>
    16f6:	3f c0       	rjmp	.+126    	; 0x1776 <DIO_u8SetPinValue+0xd2>
			{
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
    16f8:	ab e2       	ldi	r26, 0x2B	; 43
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	eb e2       	ldi	r30, 0x2B	; 43
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_u8SetPinValue+0x72>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_u8SetPinValue+0x6e>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	88 c0       	rjmp	.+272    	; 0x1832 <DIO_u8SetPinValue+0x18e>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
    1722:	a8 e2       	ldi	r26, 0x28	; 40
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e8 e2       	ldi	r30, 0x28	; 40
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_u8SetPinValue+0x9c>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_u8SetPinValue+0x98>
    1744:	80 95       	com	r24
    1746:	84 23       	and	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	73 c0       	rjmp	.+230    	; 0x1832 <DIO_u8SetPinValue+0x18e>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
    174c:	a5 e2       	ldi	r26, 0x25	; 37
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e2       	ldi	r30, 0x25	; 37
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_u8SetPinValue+0xc6>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_u8SetPinValue+0xc2>
    176e:	80 95       	com	r24
    1770:	84 23       	and	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	5e c0       	rjmp	.+188    	; 0x1832 <DIO_u8SetPinValue+0x18e>
			default : Local_u8ErrorState=1;break;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	5b c0       	rjmp	.+182    	; 0x1832 <DIO_u8SetPinValue+0x18e>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	09 f0       	breq	.+2      	; 0x1784 <DIO_u8SetPinValue+0xe0>
    1782:	52 c0       	rjmp	.+164    	; 0x1828 <DIO_u8SetPinValue+0x184>
		{
			switch(Copy_u8Port)
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3e 83       	std	Y+6, r19	; 0x06
    178c:	2d 83       	std	Y+5, r18	; 0x05
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	91 05       	cpc	r25, r1
    1796:	e9 f0       	breq	.+58     	; 0x17d2 <DIO_u8SetPinValue+0x12e>
    1798:	2d 81       	ldd	r18, Y+5	; 0x05
    179a:	3e 81       	ldd	r19, Y+6	; 0x06
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	61 f1       	breq	.+88     	; 0x17fa <DIO_u8SetPinValue+0x156>
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	e1 f5       	brne	.+120    	; 0x1822 <DIO_u8SetPinValue+0x17e>
			{
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    17aa:	ab e2       	ldi	r26, 0x2B	; 43
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb e2       	ldi	r30, 0x2B	; 43
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_u8SetPinValue+0x124>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_u8SetPinValue+0x120>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	30 c0       	rjmp	.+96     	; 0x1832 <DIO_u8SetPinValue+0x18e>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    17d2:	a8 e2       	ldi	r26, 0x28	; 40
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e8 e2       	ldi	r30, 0x28	; 40
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_u8SetPinValue+0x14c>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_u8SetPinValue+0x148>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	1c c0       	rjmp	.+56     	; 0x1832 <DIO_u8SetPinValue+0x18e>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    17fa:	a5 e2       	ldi	r26, 0x25	; 37
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e5 e2       	ldi	r30, 0x25	; 37
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_u8SetPinValue+0x174>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_u8SetPinValue+0x170>
    181c:	84 2b       	or	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	08 c0       	rjmp	.+16     	; 0x1832 <DIO_u8SetPinValue+0x18e>
			default : Local_u8ErrorState=1;break;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <DIO_u8SetPinValue+0x18e>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <DIO_u8SetPinValue+0x18e>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1832:	89 81       	ldd	r24, Y+1	; 0x01

}
    1834:	28 96       	adiw	r28, 0x08	; 8
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <DIO_u8SetPortValue>:



u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <DIO_u8SetPortValue+0x6>
    184c:	00 d0       	rcall	.+0      	; 0x184e <DIO_u8SetPortValue+0x8>
    184e:	0f 92       	push	r0
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	8a 83       	std	Y+2, r24	; 0x02
    1856:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorState=0;
    1858:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	3d 83       	std	Y+5, r19	; 0x05
    1862:	2c 83       	std	Y+4, r18	; 0x04
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	91 05       	cpc	r25, r1
    186c:	71 f0       	breq	.+28     	; 0x188a <DIO_u8SetPortValue+0x44>
    186e:	2c 81       	ldd	r18, Y+4	; 0x04
    1870:	3d 81       	ldd	r19, Y+5	; 0x05
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	71 f0       	breq	.+28     	; 0x1894 <DIO_u8SetPortValue+0x4e>
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	9d 81       	ldd	r25, Y+5	; 0x05
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	79 f4       	brne	.+30     	; 0x189e <DIO_u8SetPortValue+0x58>
	{
	case DIO_u8PORTD :PORTD=Copy_u8Value ;break;
    1880:	eb e2       	ldi	r30, 0x2B	; 43
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	80 83       	st	Z, r24
    1888:	0c c0       	rjmp	.+24     	; 0x18a2 <DIO_u8SetPortValue+0x5c>
	case DIO_u8PORTC :PORTC=Copy_u8Value ;break;
    188a:	e8 e2       	ldi	r30, 0x28	; 40
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	80 83       	st	Z, r24
    1892:	07 c0       	rjmp	.+14     	; 0x18a2 <DIO_u8SetPortValue+0x5c>
	case DIO_u8PORTB :PORTB=Copy_u8Value ;break;
    1894:	e5 e2       	ldi	r30, 0x25	; 37
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	80 83       	st	Z, r24
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_u8SetPortValue+0x5c>
	default : Local_u8ErrorState=1;break;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01

}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	27 97       	sbiw	r28, 0x07	; 7
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	6b 83       	std	Y+3, r22	; 0x03
    18cc:	5d 83       	std	Y+5, r21	; 0x05
    18ce:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
    18d0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL&&Copy_u8Pin<=DIO_u8PIN7)
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	9d 81       	ldd	r25, Y+5	; 0x05
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	09 f4       	brne	.+2      	; 0x18dc <DIO_u8GetPinValue+0x28>
    18da:	58 c0       	rjmp	.+176    	; 0x198c <DIO_u8GetPinValue+0xd8>
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	88 30       	cpi	r24, 0x08	; 8
    18e0:	08 f0       	brcs	.+2      	; 0x18e4 <DIO_u8GetPinValue+0x30>
    18e2:	54 c0       	rjmp	.+168    	; 0x198c <DIO_u8GetPinValue+0xd8>
	{

		switch(Copy_u8Port)
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3f 83       	std	Y+7, r19	; 0x07
    18ec:	2e 83       	std	Y+6, r18	; 0x06
    18ee:	4e 81       	ldd	r20, Y+6	; 0x06
    18f0:	5f 81       	ldd	r21, Y+7	; 0x07
    18f2:	41 30       	cpi	r20, 0x01	; 1
    18f4:	51 05       	cpc	r21, r1
    18f6:	f9 f0       	breq	.+62     	; 0x1936 <DIO_u8GetPinValue+0x82>
    18f8:	8e 81       	ldd	r24, Y+6	; 0x06
    18fa:	9f 81       	ldd	r25, Y+7	; 0x07
    18fc:	82 30       	cpi	r24, 0x02	; 2
    18fe:	91 05       	cpc	r25, r1
    1900:	71 f1       	breq	.+92     	; 0x195e <DIO_u8GetPinValue+0xaa>
    1902:	2e 81       	ldd	r18, Y+6	; 0x06
    1904:	3f 81       	ldd	r19, Y+7	; 0x07
    1906:	21 15       	cp	r18, r1
    1908:	31 05       	cpc	r19, r1
    190a:	09 f0       	breq	.+2      	; 0x190e <DIO_u8GetPinValue+0x5a>
    190c:	3c c0       	rjmp	.+120    	; 0x1986 <DIO_u8GetPinValue+0xd2>
		{
		case DIO_u8PORTD :*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    190e:	e9 e2       	ldi	r30, 0x29	; 41
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <DIO_u8GetPinValue+0x72>
    1922:	55 95       	asr	r21
    1924:	47 95       	ror	r20
    1926:	8a 95       	dec	r24
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <DIO_u8GetPinValue+0x6e>
    192a:	ca 01       	movw	r24, r20
    192c:	81 70       	andi	r24, 0x01	; 1
    192e:	ec 81       	ldd	r30, Y+4	; 0x04
    1930:	fd 81       	ldd	r31, Y+5	; 0x05
    1932:	80 83       	st	Z, r24
    1934:	2d c0       	rjmp	.+90     	; 0x1990 <DIO_u8GetPinValue+0xdc>
		case DIO_u8PORTC :*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    1936:	e6 e2       	ldi	r30, 0x26	; 38
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a9 01       	movw	r20, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <DIO_u8GetPinValue+0x9a>
    194a:	55 95       	asr	r21
    194c:	47 95       	ror	r20
    194e:	8a 95       	dec	r24
    1950:	e2 f7       	brpl	.-8      	; 0x194a <DIO_u8GetPinValue+0x96>
    1952:	ca 01       	movw	r24, r20
    1954:	81 70       	andi	r24, 0x01	; 1
    1956:	ec 81       	ldd	r30, Y+4	; 0x04
    1958:	fd 81       	ldd	r31, Y+5	; 0x05
    195a:	80 83       	st	Z, r24
    195c:	19 c0       	rjmp	.+50     	; 0x1990 <DIO_u8GetPinValue+0xdc>
		case DIO_u8PORTB :*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    195e:	e3 e2       	ldi	r30, 0x23	; 35
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a9 01       	movw	r20, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_u8GetPinValue+0xc2>
    1972:	55 95       	asr	r21
    1974:	47 95       	ror	r20
    1976:	8a 95       	dec	r24
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_u8GetPinValue+0xbe>
    197a:	ca 01       	movw	r24, r20
    197c:	81 70       	andi	r24, 0x01	; 1
    197e:	ec 81       	ldd	r30, Y+4	; 0x04
    1980:	fd 81       	ldd	r31, Y+5	; 0x05
    1982:	80 83       	st	Z, r24
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <DIO_u8GetPinValue+0xdc>
		default : Local_u8ErrorState=1;break;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <DIO_u8GetPinValue+0xdc>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1990:	89 81       	ldd	r24, Y+1	; 0x01
}
    1992:	27 96       	adiw	r28, 0x07	; 7
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <GIE_voidEnable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"
 void GIE_voidEnable(void)
 {
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(SREG,SREG_I);
    19ac:	af e5       	ldi	r26, 0x5F	; 95
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ef e5       	ldi	r30, 0x5F	; 95
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	80 68       	ori	r24, 0x80	; 128
    19b8:	8c 93       	st	X, r24
 }
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <GIE_voidDisable>:
 void GIE_voidDisable(void)
 {
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
	 CLR_BIT(SREG,SREG_I);
    19c8:	af e5       	ldi	r26, 0x5F	; 95
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ef e5       	ldi	r30, 0x5F	; 95
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8f 77       	andi	r24, 0x7F	; 127
    19d4:	8c 93       	st	X, r24
 }
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_interface.h"
#include"PORT_register.h"

void PORT_voidInit(void)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
   DDRD=PORTD_DIR;
    19e4:	ea e2       	ldi	r30, 0x2A	; 42
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	8f e1       	ldi	r24, 0x1F	; 31
    19ea:	80 83       	st	Z, r24
   DDRC=PORTC_DIR;
    19ec:	e7 e2       	ldi	r30, 0x27	; 39
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	10 82       	st	Z, r1
   DDRB=PORTB_DIR;
    19f2:	e4 e2       	ldi	r30, 0x24	; 36
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	87 e0       	ldi	r24, 0x07	; 7
    19f8:	80 83       	st	Z, r24
   PORTD=PORTD_INIT;
    19fa:	eb e2       	ldi	r30, 0x2B	; 43
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	10 82       	st	Z, r1
   PORTC=PORTC_INIT;
    1a00:	e8 e2       	ldi	r30, 0x28	; 40
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	10 82       	st	Z, r1
   PORTB=PORTB_INIT;
    1a06:	e5 e2       	ldi	r30, 0x25	; 37
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	10 82       	st	Z, r1
}
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <main>:
#include"ADC_interface.h"
#include<util/delay.h>
#include"DIO_interface.h"
#include"GIE_interface.h"
void Func(void);
void main(){
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	a2 97       	sbiw	r28, 0x22	; 34
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    1a26:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <PORT_voidInit>
	CLCD_voidInit();
    1a2a:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidInit>
	GIE_voidEnable();
    1a2e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GIE_voidEnable>
	ADC_voidInit();
    1a32:	0e 94 ad 05 	call	0xb5a	; 0xb5a <ADC_voidInit>
	u8 Local_Reading=0;
    1a36:	1a a2       	std	Y+34, r1	; 0x22
	u16 Local_MilliVolt,Local_Temp=0;
    1a38:	1f 8e       	std	Y+31, r1	; 0x1f
    1a3a:	1e 8e       	std	Y+30, r1	; 0x1e
	while(1)
	{
		ADC_u8StartConversionAsynch(0,&Local_Reading,Func);
    1a3c:	9e 01       	movw	r18, r28
    1a3e:	2e 5d       	subi	r18, 0xDE	; 222
    1a40:	3f 4f       	sbci	r19, 0xFF	; 255
    1a42:	49 e4       	ldi	r20, 0x49	; 73
    1a44:	5e e0       	ldi	r21, 0x0E	; 14
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	b9 01       	movw	r22, r18
    1a4a:	0e 94 55 06 	call	0xcaa	; 0xcaa <ADC_u8StartConversionAsynch>
		Local_MilliVolt=(u16)(((u32)(Local_Reading*5000UL))/(256UL));
    1a4e:	8a a1       	ldd	r24, Y+34	; 0x22
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 e0       	ldi	r26, 0x00	; 0
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	28 e8       	ldi	r18, 0x88	; 136
    1a5a:	33 e1       	ldi	r19, 0x13	; 19
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__mulsi3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	89 2f       	mov	r24, r25
    1a6e:	9a 2f       	mov	r25, r26
    1a70:	ab 2f       	mov	r26, r27
    1a72:	bb 27       	eor	r27, r27
    1a74:	99 a3       	std	Y+33, r25	; 0x21
    1a76:	88 a3       	std	Y+32, r24	; 0x20
		Local_Temp=Local_MilliVolt/10UL;
    1a78:	88 a1       	ldd	r24, Y+32	; 0x20
    1a7a:	99 a1       	ldd	r25, Y+33	; 0x21
    1a7c:	2a e0       	ldi	r18, 0x0A	; 10
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	b9 01       	movw	r22, r18
    1a82:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__udivmodhi4>
    1a86:	cb 01       	movw	r24, r22
    1a88:	9f 8f       	std	Y+31, r25	; 0x1f
    1a8a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a8c:	16 c0       	rjmp	.+44     	; 0x1aba <main+0xa8>
		while(Local_Temp)
		{
			u8 num=Local_Temp%10;
    1a8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a92:	2a e0       	ldi	r18, 0x0A	; 10
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	b9 01       	movw	r22, r18
    1a98:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__udivmodhi4>
    1a9c:	8d 8f       	std	Y+29, r24	; 0x1d
			Local_Temp/=10;
    1a9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aa0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1aa2:	2a e0       	ldi	r18, 0x0A	; 10
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	b9 01       	movw	r22, r18
    1aa8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__udivmodhi4>
    1aac:	cb 01       	movw	r24, r22
    1aae:	9f 8f       	std	Y+31, r25	; 0x1f
    1ab0:	8e 8f       	std	Y+30, r24	; 0x1e
			CLCD_voidSendData(num+'0');
    1ab2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab4:	80 5d       	subi	r24, 0xD0	; 208
    1ab6:	0e 94 0a 08 	call	0x1014	; 0x1014 <CLCD_voidSendData>
	while(1)
	{
		ADC_u8StartConversionAsynch(0,&Local_Reading,Func);
		Local_MilliVolt=(u16)(((u32)(Local_Reading*5000UL))/(256UL));
		Local_Temp=Local_MilliVolt/10UL;
		while(Local_Temp)
    1aba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1abc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	31 f7       	brne	.-52     	; 0x1a8e <main+0x7c>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	aa ef       	ldi	r26, 0xFA	; 250
    1ac8:	b4 e4       	ldi	r27, 0x44	; 68
    1aca:	89 8f       	std	Y+25, r24	; 0x19
    1acc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ace:	ab 8f       	std	Y+27, r26	; 0x1b
    1ad0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ad6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4a ef       	ldi	r20, 0xFA	; 250
    1ae0:	54 e4       	ldi	r21, 0x44	; 68
    1ae2:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8d 8b       	std	Y+21, r24	; 0x15
    1aec:	9e 8b       	std	Y+22, r25	; 0x16
    1aee:	af 8b       	std	Y+23, r26	; 0x17
    1af0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1af2:	6d 89       	ldd	r22, Y+21	; 0x15
    1af4:	7e 89       	ldd	r23, Y+22	; 0x16
    1af6:	8f 89       	ldd	r24, Y+23	; 0x17
    1af8:	98 8d       	ldd	r25, Y+24	; 0x18
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <main+0x102>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9c 8b       	std	Y+20, r25	; 0x14
    1b10:	8b 8b       	std	Y+19, r24	; 0x13
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <main+0x180>
	else if (__tmp > 65535)
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	57 e4       	ldi	r21, 0x47	; 71
    1b24:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	4c f5       	brge	.+82     	; 0x1b7e <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e2       	ldi	r20, 0x20	; 32
    1b3a:	51 e4       	ldi	r21, 0x41	; 65
    1b3c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9c 8b       	std	Y+20, r25	; 0x14
    1b52:	8b 8b       	std	Y+19, r24	; 0x13
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <main+0x162>
    1b56:	88 ec       	ldi	r24, 0xC8	; 200
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9a 8b       	std	Y+18, r25	; 0x12
    1b5c:	89 8b       	std	Y+17, r24	; 0x11
    1b5e:	89 89       	ldd	r24, Y+17	; 0x11
    1b60:	9a 89       	ldd	r25, Y+18	; 0x12
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <main+0x150>
    1b66:	9a 8b       	std	Y+18, r25	; 0x12
    1b68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	9c 8b       	std	Y+20, r25	; 0x14
    1b72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b74:	8b 89       	ldd	r24, Y+19	; 0x13
    1b76:	9c 89       	ldd	r25, Y+20	; 0x14
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <main+0x144>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b80:	7e 89       	ldd	r23, Y+22	; 0x16
    1b82:	8f 89       	ldd	r24, Y+23	; 0x17
    1b84:	98 8d       	ldd	r25, Y+24	; 0x18
    1b86:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9c 8b       	std	Y+20, r25	; 0x14
    1b90:	8b 8b       	std	Y+19, r24	; 0x13
    1b92:	8b 89       	ldd	r24, Y+19	; 0x13
    1b94:	9c 89       	ldd	r25, Y+20	; 0x14
    1b96:	98 8b       	std	Y+16, r25	; 0x10
    1b98:	8f 87       	std	Y+15, r24	; 0x0f
    1b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9c:	98 89       	ldd	r25, Y+16	; 0x10
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <main+0x18c>
    1ba2:	98 8b       	std	Y+16, r25	; 0x10
    1ba4:	8f 87       	std	Y+15, r24	; 0x0f
			u8 num=Local_Temp%10;
			Local_Temp/=10;
			CLCD_voidSendData(num+'0');
		}
		_delay_ms(2000);
		CLCD_voidSendCommand(0x01);
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <CLCD_voidSendCommand>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	aa ef       	ldi	r26, 0xFA	; 250
    1bb2:	b4 e4       	ldi	r27, 0x44	; 68
    1bb4:	8b 87       	std	Y+11, r24	; 0x0b
    1bb6:	9c 87       	std	Y+12, r25	; 0x0c
    1bb8:	ad 87       	std	Y+13, r26	; 0x0d
    1bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a ef       	ldi	r20, 0xFA	; 250
    1bca:	54 e4       	ldi	r21, 0x44	; 68
    1bcc:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8f 83       	std	Y+7, r24	; 0x07
    1bd6:	98 87       	std	Y+8, r25	; 0x08
    1bd8:	a9 87       	std	Y+9, r26	; 0x09
    1bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bde:	78 85       	ldd	r23, Y+8	; 0x08
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <main+0x1ec>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <main+0x26a>
	else if (__tmp > 65535)
    1bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1c00:	78 85       	ldd	r23, Y+8	; 0x08
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <main+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <main+0x24c>
    1c40:	88 ec       	ldi	r24, 0xC8	; 200
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c 83       	std	Y+4, r25	; 0x04
    1c46:	8b 83       	std	Y+3, r24	; 0x03
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <main+0x23a>
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <main+0x22e>
    1c66:	ea ce       	rjmp	.-556    	; 0x1a3c <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <main+0x276>
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	d5 ce       	rjmp	.-598    	; 0x1a3c <main+0x2a>

00001c92 <Func>:
		_delay_ms(2000);
	}

}
void Func(void)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_HIGH);
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	64 e0       	ldi	r22, 0x04	; 4
    1c9e:	41 e0       	ldi	r20, 0x01	; 1
    1ca0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DIO_u8SetPinValue>
}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <__mulsi3>:
    1caa:	62 9f       	mul	r22, r18
    1cac:	d0 01       	movw	r26, r0
    1cae:	73 9f       	mul	r23, r19
    1cb0:	f0 01       	movw	r30, r0
    1cb2:	82 9f       	mul	r24, r18
    1cb4:	e0 0d       	add	r30, r0
    1cb6:	f1 1d       	adc	r31, r1
    1cb8:	64 9f       	mul	r22, r20
    1cba:	e0 0d       	add	r30, r0
    1cbc:	f1 1d       	adc	r31, r1
    1cbe:	92 9f       	mul	r25, r18
    1cc0:	f0 0d       	add	r31, r0
    1cc2:	83 9f       	mul	r24, r19
    1cc4:	f0 0d       	add	r31, r0
    1cc6:	74 9f       	mul	r23, r20
    1cc8:	f0 0d       	add	r31, r0
    1cca:	65 9f       	mul	r22, r21
    1ccc:	f0 0d       	add	r31, r0
    1cce:	99 27       	eor	r25, r25
    1cd0:	72 9f       	mul	r23, r18
    1cd2:	b0 0d       	add	r27, r0
    1cd4:	e1 1d       	adc	r30, r1
    1cd6:	f9 1f       	adc	r31, r25
    1cd8:	63 9f       	mul	r22, r19
    1cda:	b0 0d       	add	r27, r0
    1cdc:	e1 1d       	adc	r30, r1
    1cde:	f9 1f       	adc	r31, r25
    1ce0:	bd 01       	movw	r22, r26
    1ce2:	cf 01       	movw	r24, r30
    1ce4:	11 24       	eor	r1, r1
    1ce6:	08 95       	ret

00001ce8 <__udivmodhi4>:
    1ce8:	aa 1b       	sub	r26, r26
    1cea:	bb 1b       	sub	r27, r27
    1cec:	51 e1       	ldi	r21, 0x11	; 17
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <__udivmodhi4_ep>

00001cf0 <__udivmodhi4_loop>:
    1cf0:	aa 1f       	adc	r26, r26
    1cf2:	bb 1f       	adc	r27, r27
    1cf4:	a6 17       	cp	r26, r22
    1cf6:	b7 07       	cpc	r27, r23
    1cf8:	10 f0       	brcs	.+4      	; 0x1cfe <__udivmodhi4_ep>
    1cfa:	a6 1b       	sub	r26, r22
    1cfc:	b7 0b       	sbc	r27, r23

00001cfe <__udivmodhi4_ep>:
    1cfe:	88 1f       	adc	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	5a 95       	dec	r21
    1d04:	a9 f7       	brne	.-22     	; 0x1cf0 <__udivmodhi4_loop>
    1d06:	80 95       	com	r24
    1d08:	90 95       	com	r25
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	08 95       	ret

00001d10 <__prologue_saves__>:
    1d10:	2f 92       	push	r2
    1d12:	3f 92       	push	r3
    1d14:	4f 92       	push	r4
    1d16:	5f 92       	push	r5
    1d18:	6f 92       	push	r6
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	ca 1b       	sub	r28, r26
    1d3a:	db 0b       	sbc	r29, r27
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	09 94       	ijmp

00001d48 <__epilogue_restores__>:
    1d48:	2a 88       	ldd	r2, Y+18	; 0x12
    1d4a:	39 88       	ldd	r3, Y+17	; 0x11
    1d4c:	48 88       	ldd	r4, Y+16	; 0x10
    1d4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d50:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d52:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d54:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d56:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d58:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d5a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d5c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d5e:	df 80       	ldd	r13, Y+7	; 0x07
    1d60:	ee 80       	ldd	r14, Y+6	; 0x06
    1d62:	fd 80       	ldd	r15, Y+5	; 0x05
    1d64:	0c 81       	ldd	r16, Y+4	; 0x04
    1d66:	1b 81       	ldd	r17, Y+3	; 0x03
    1d68:	aa 81       	ldd	r26, Y+2	; 0x02
    1d6a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d6c:	ce 0f       	add	r28, r30
    1d6e:	d1 1d       	adc	r29, r1
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	ed 01       	movw	r28, r26
    1d7c:	08 95       	ret

00001d7e <_exit>:
    1d7e:	f8 94       	cli

00001d80 <__stop_program>:
    1d80:	ff cf       	rjmp	.-2      	; 0x1d80 <__stop_program>
