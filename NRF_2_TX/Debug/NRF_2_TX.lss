
NRF_2_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00002e56  00002eea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800188  00800188  00003012  2**0
                  ALLOC
  3 .stab         00002bec  00000000  00000000  00003014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f6  00000000  00000000  00005c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00007176  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00007349  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00009358  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b4cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8a 11 	call	0x2314	; 0x2314 <main>
      8a:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_U8SetPinDirection>:

#include"DIO_register.h"
#include"DIO_private.h"
#include"DIO_interface.h"
#include"DIO_config.h"
u8 DIO_U8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	28 97       	sbiw	r28, 0x08	; 8
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	6b 83       	std	Y+3, r22	; 0x03
     cee:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     cf0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	88 30       	cpi	r24, 0x08	; 8
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <DIO_U8SetPinDirection+0x24>
     cf8:	b3 c0       	rjmp	.+358    	; 0xe60 <DIO_U8SetPinDirection+0x18a>
		if(Copy_u8Direction==DIO_u8PIN_INPUT){
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	88 23       	and	r24, r24
     cfe:	09 f0       	breq	.+2      	; 0xd02 <DIO_U8SetPinDirection+0x2c>
     d00:	56 c0       	rjmp	.+172    	; 0xdae <DIO_U8SetPinDirection+0xd8>
			switch(Copy_u8Port){
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	38 87       	std	Y+8, r19	; 0x08
     d0a:	2f 83       	std	Y+7, r18	; 0x07
     d0c:	8f 81       	ldd	r24, Y+7	; 0x07
     d0e:	98 85       	ldd	r25, Y+8	; 0x08
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	91 05       	cpc	r25, r1
     d14:	f9 f0       	breq	.+62     	; 0xd54 <DIO_U8SetPinDirection+0x7e>
     d16:	2f 81       	ldd	r18, Y+7	; 0x07
     d18:	38 85       	ldd	r19, Y+8	; 0x08
     d1a:	22 30       	cpi	r18, 0x02	; 2
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f1       	breq	.+94     	; 0xd7e <DIO_U8SetPinDirection+0xa8>
     d20:	8f 81       	ldd	r24, Y+7	; 0x07
     d22:	98 85       	ldd	r25, Y+8	; 0x08
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	09 f0       	breq	.+2      	; 0xd2a <DIO_U8SetPinDirection+0x54>
     d28:	3f c0       	rjmp	.+126    	; 0xda8 <DIO_U8SetPinDirection+0xd2>
			case DIO_u8PORTD:CLEAR_BIT(DDRD,Copy_u8Pin);break;
     d2a:	aa e2       	ldi	r26, 0x2A	; 42
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea e2       	ldi	r30, 0x2A	; 42
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_U8SetPinDirection+0x72>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_U8SetPinDirection+0x6e>
     d4c:	80 95       	com	r24
     d4e:	84 23       	and	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	88 c0       	rjmp	.+272    	; 0xe64 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTB:CLEAR_BIT(DDRB,Copy_u8Pin);break;
     d54:	a4 e2       	ldi	r26, 0x24	; 36
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e4 e2       	ldi	r30, 0x24	; 36
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_U8SetPinDirection+0x9c>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_U8SetPinDirection+0x98>
     d76:	80 95       	com	r24
     d78:	84 23       	and	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	73 c0       	rjmp	.+230    	; 0xe64 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTC:CLEAR_BIT(DDRC,Copy_u8Pin);break;
     d7e:	a7 e2       	ldi	r26, 0x27	; 39
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e2       	ldi	r30, 0x27	; 39
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_U8SetPinDirection+0xc6>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_U8SetPinDirection+0xc2>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	5e c0       	rjmp	.+188    	; 0xe64 <DIO_U8SetPinDirection+0x18e>
			default :Local_u8ErrorState=1;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	5b c0       	rjmp	.+182    	; 0xe64 <DIO_U8SetPinDirection+0x18e>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT){
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	09 f0       	breq	.+2      	; 0xdb6 <DIO_U8SetPinDirection+0xe0>
     db4:	52 c0       	rjmp	.+164    	; 0xe5a <DIO_U8SetPinDirection+0x184>
			switch(Copy_u8Port){
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3e 83       	std	Y+6, r19	; 0x06
     dbe:	2d 83       	std	Y+5, r18	; 0x05
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	e9 f0       	breq	.+58     	; 0xe04 <DIO_U8SetPinDirection+0x12e>
     dca:	2d 81       	ldd	r18, Y+5	; 0x05
     dcc:	3e 81       	ldd	r19, Y+6	; 0x06
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	61 f1       	breq	.+88     	; 0xe2c <DIO_U8SetPinDirection+0x156>
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	e1 f5       	brne	.+120    	; 0xe54 <DIO_U8SetPinDirection+0x17e>
			case DIO_u8PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
     ddc:	aa e2       	ldi	r26, 0x2A	; 42
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ea e2       	ldi	r30, 0x2A	; 42
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_U8SetPinDirection+0x124>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_U8SetPinDirection+0x120>
     dfe:	84 2b       	or	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	30 c0       	rjmp	.+96     	; 0xe64 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
     e04:	a4 e2       	ldi	r26, 0x24	; 36
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e4 e2       	ldi	r30, 0x24	; 36
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_U8SetPinDirection+0x14c>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_U8SetPinDirection+0x148>
     e26:	84 2b       	or	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	1c c0       	rjmp	.+56     	; 0xe64 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
     e2c:	a7 e2       	ldi	r26, 0x27	; 39
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e7 e2       	ldi	r30, 0x27	; 39
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_U8SetPinDirection+0x174>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_U8SetPinDirection+0x170>
     e4e:	84 2b       	or	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <DIO_U8SetPinDirection+0x18e>
			default :Local_u8ErrorState=1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <DIO_U8SetPinDirection+0x18e>
			}
		}
		else{
			Local_u8ErrorState=1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_U8SetPinDirection+0x18e>
		}

	}
	else{
		Local_u8ErrorState=1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     e64:	89 81       	ldd	r24, Y+1	; 0x01

}
     e66:	28 96       	adiw	r28, 0x08	; 8
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <DIO_U8SetPortirection>:
u8 DIO_U8SetPortirection(u8 Copy_u8Port,u8 Copy_u8Direction){
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DIO_U8SetPortirection+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DIO_U8SetPortirection+0x8>
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	8a 83       	std	Y+2, r24	; 0x02
     e88:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     e8a:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3d 83       	std	Y+5, r19	; 0x05
     e94:	2c 83       	std	Y+4, r18	; 0x04
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	9d 81       	ldd	r25, Y+5	; 0x05
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	71 f0       	breq	.+28     	; 0xebc <DIO_U8SetPortirection+0x44>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	71 f0       	breq	.+28     	; 0xec6 <DIO_U8SetPortirection+0x4e>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	79 f4       	brne	.+30     	; 0xed0 <DIO_U8SetPortirection+0x58>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
     eb2:	ea e2       	ldi	r30, 0x2A	; 42
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	80 83       	st	Z, r24
     eba:	0c c0       	rjmp	.+24     	; 0xed4 <DIO_U8SetPortirection+0x5c>
	case DIO_u8PORTB: DDRB =Copy_u8Direction; break;
     ebc:	e4 e2       	ldi	r30, 0x24	; 36
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	80 83       	st	Z, r24
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <DIO_U8SetPortirection+0x5c>
	case DIO_u8PORTC: DDRC =Copy_u8Direction; break;
     ec6:	e7 e2       	ldi	r30, 0x27	; 39
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	80 83       	st	Z, r24
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_U8SetPortirection+0x5c>
	default:Local_u8ErrorState=1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorState;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01

}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <DIO_U8SetPinValue>:
u8 DIO_U8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Vlaue){
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	28 97       	sbiw	r28, 0x08	; 8
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	8a 83       	std	Y+2, r24	; 0x02
     efc:	6b 83       	std	Y+3, r22	; 0x03
     efe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     f00:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	88 30       	cpi	r24, 0x08	; 8
     f06:	08 f0       	brcs	.+2      	; 0xf0a <DIO_U8SetPinValue+0x24>
     f08:	b3 c0       	rjmp	.+358    	; 0x1070 <DIO_U8SetPinValue+0x18a>
			if(Copy_u8Vlaue==DIO_u8PIN_LOW){
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	88 23       	and	r24, r24
     f0e:	09 f0       	breq	.+2      	; 0xf12 <DIO_U8SetPinValue+0x2c>
     f10:	56 c0       	rjmp	.+172    	; 0xfbe <DIO_U8SetPinValue+0xd8>
				switch(Copy_u8Port){
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	38 87       	std	Y+8, r19	; 0x08
     f1a:	2f 83       	std	Y+7, r18	; 0x07
     f1c:	8f 81       	ldd	r24, Y+7	; 0x07
     f1e:	98 85       	ldd	r25, Y+8	; 0x08
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	f9 f0       	breq	.+62     	; 0xf64 <DIO_U8SetPinValue+0x7e>
     f26:	2f 81       	ldd	r18, Y+7	; 0x07
     f28:	38 85       	ldd	r19, Y+8	; 0x08
     f2a:	22 30       	cpi	r18, 0x02	; 2
     f2c:	31 05       	cpc	r19, r1
     f2e:	79 f1       	breq	.+94     	; 0xf8e <DIO_U8SetPinValue+0xa8>
     f30:	8f 81       	ldd	r24, Y+7	; 0x07
     f32:	98 85       	ldd	r25, Y+8	; 0x08
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <DIO_U8SetPinValue+0x54>
     f38:	3f c0       	rjmp	.+126    	; 0xfb8 <DIO_U8SetPinValue+0xd2>
				case DIO_u8PORTD:CLEAR_BIT(PORTD,Copy_u8Pin);break;
     f3a:	ab e2       	ldi	r26, 0x2B	; 43
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	eb e2       	ldi	r30, 0x2B	; 43
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_U8SetPinValue+0x72>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_U8SetPinValue+0x6e>
     f5c:	80 95       	com	r24
     f5e:	84 23       	and	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	88 c0       	rjmp	.+272    	; 0x1074 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTB:CLEAR_BIT(PORTB,Copy_u8Pin);break;
     f64:	a5 e2       	ldi	r26, 0x25	; 37
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e2       	ldi	r30, 0x25	; 37
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_U8SetPinValue+0x9c>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_U8SetPinValue+0x98>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	73 c0       	rjmp	.+230    	; 0x1074 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTC:CLEAR_BIT(PORTC,Copy_u8Pin);break;
     f8e:	a8 e2       	ldi	r26, 0x28	; 40
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e8 e2       	ldi	r30, 0x28	; 40
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_U8SetPinValue+0xc6>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_U8SetPinValue+0xc2>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	5e c0       	rjmp	.+188    	; 0x1074 <DIO_U8SetPinValue+0x18e>
				default :Local_u8ErrorState=1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	5b c0       	rjmp	.+182    	; 0x1074 <DIO_U8SetPinValue+0x18e>
				}
			}
			else if(Copy_u8Vlaue==DIO_u8PIN_HIGH)
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <DIO_U8SetPinValue+0xe0>
     fc4:	52 c0       	rjmp	.+164    	; 0x106a <DIO_U8SetPinValue+0x184>
			{
				switch(Copy_u8Port){
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3e 83       	std	Y+6, r19	; 0x06
     fce:	2d 83       	std	Y+5, r18	; 0x05
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	9e 81       	ldd	r25, Y+6	; 0x06
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	91 05       	cpc	r25, r1
     fd8:	e9 f0       	breq	.+58     	; 0x1014 <DIO_U8SetPinValue+0x12e>
     fda:	2d 81       	ldd	r18, Y+5	; 0x05
     fdc:	3e 81       	ldd	r19, Y+6	; 0x06
     fde:	22 30       	cpi	r18, 0x02	; 2
     fe0:	31 05       	cpc	r19, r1
     fe2:	61 f1       	breq	.+88     	; 0x103c <DIO_U8SetPinValue+0x156>
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	e1 f5       	brne	.+120    	; 0x1064 <DIO_U8SetPinValue+0x17e>
				case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
     fec:	ab e2       	ldi	r26, 0x2B	; 43
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	eb e2       	ldi	r30, 0x2B	; 43
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_U8SetPinValue+0x124>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_U8SetPinValue+0x120>
    100e:	84 2b       	or	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	30 c0       	rjmp	.+96     	; 0x1074 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    1014:	a5 e2       	ldi	r26, 0x25	; 37
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e2       	ldi	r30, 0x25	; 37
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_U8SetPinValue+0x14c>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_U8SetPinValue+0x148>
    1036:	84 2b       	or	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	1c c0       	rjmp	.+56     	; 0x1074 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    103c:	a8 e2       	ldi	r26, 0x28	; 40
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e8 e2       	ldi	r30, 0x28	; 40
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_U8SetPinValue+0x174>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_U8SetPinValue+0x170>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	08 c0       	rjmp	.+16     	; 0x1074 <DIO_U8SetPinValue+0x18e>
				default :Local_u8ErrorState=1;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <DIO_U8SetPinValue+0x18e>
				}
			}
			else{
				Local_u8ErrorState=1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_U8SetPinValue+0x18e>
			}

		}
		else{
			Local_u8ErrorState=1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
    1074:	89 81       	ldd	r24, Y+1	; 0x01

}
    1076:	28 96       	adiw	r28, 0x08	; 8
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <DIO_U8SetPortValue>:
u8 DIO_U8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <DIO_U8SetPortValue+0x6>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <DIO_U8SetPortValue+0x8>
    1090:	0f 92       	push	r0
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	8a 83       	std	Y+2, r24	; 0x02
    1098:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    109a:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3d 83       	std	Y+5, r19	; 0x05
    10a4:	2c 83       	std	Y+4, r18	; 0x04
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	9d 81       	ldd	r25, Y+5	; 0x05
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	71 f0       	breq	.+28     	; 0x10cc <DIO_U8SetPortValue+0x44>
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	3d 81       	ldd	r19, Y+5	; 0x05
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	71 f0       	breq	.+28     	; 0x10d6 <DIO_U8SetPortValue+0x4e>
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	9d 81       	ldd	r25, Y+5	; 0x05
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	79 f4       	brne	.+30     	; 0x10e0 <DIO_U8SetPortValue+0x58>
		case DIO_u8PORTD: PORTD =Copy_u8Value; break;
    10c2:	eb e2       	ldi	r30, 0x2B	; 43
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	80 83       	st	Z, r24
    10ca:	0c c0       	rjmp	.+24     	; 0x10e4 <DIO_U8SetPortValue+0x5c>
		case DIO_u8PORTB: PORTB =Copy_u8Value; break;
    10cc:	e5 e2       	ldi	r30, 0x25	; 37
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	80 83       	st	Z, r24
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <DIO_U8SetPortValue+0x5c>
		case DIO_u8PORTC: PORTC =Copy_u8Value; break;
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	80 83       	st	Z, r24
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_U8SetPortValue+0x5c>
		default:Local_u8ErrorState=1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	89 83       	std	Y+1, r24	; 0x01

		}
	return Local_u8ErrorState;
    10e4:	89 81       	ldd	r24, Y+1	; 0x01

}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_u8Value ){
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	27 97       	sbiw	r28, 0x07	; 7
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	8a 83       	std	Y+2, r24	; 0x02
    110c:	6b 83       	std	Y+3, r22	; 0x03
    110e:	5d 83       	std	Y+5, r21	; 0x05
    1110:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1112:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value!=NULL&&Copy_u8Pin<=DIO_u8PIN7){
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_U8GetPinValue+0x28>
    111c:	58 c0       	rjmp	.+176    	; 0x11ce <DIO_U8GetPinValue+0xd8>
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 30       	cpi	r24, 0x08	; 8
    1122:	08 f0       	brcs	.+2      	; 0x1126 <DIO_U8GetPinValue+0x30>
    1124:	54 c0       	rjmp	.+168    	; 0x11ce <DIO_U8GetPinValue+0xd8>
		switch(Copy_u8Port){
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	3f 83       	std	Y+7, r19	; 0x07
    112e:	2e 83       	std	Y+6, r18	; 0x06
    1130:	4e 81       	ldd	r20, Y+6	; 0x06
    1132:	5f 81       	ldd	r21, Y+7	; 0x07
    1134:	41 30       	cpi	r20, 0x01	; 1
    1136:	51 05       	cpc	r21, r1
    1138:	f9 f0       	breq	.+62     	; 0x1178 <DIO_U8GetPinValue+0x82>
    113a:	8e 81       	ldd	r24, Y+6	; 0x06
    113c:	9f 81       	ldd	r25, Y+7	; 0x07
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	91 05       	cpc	r25, r1
    1142:	71 f1       	breq	.+92     	; 0x11a0 <DIO_U8GetPinValue+0xaa>
    1144:	2e 81       	ldd	r18, Y+6	; 0x06
    1146:	3f 81       	ldd	r19, Y+7	; 0x07
    1148:	21 15       	cp	r18, r1
    114a:	31 05       	cpc	r19, r1
    114c:	09 f0       	breq	.+2      	; 0x1150 <DIO_U8GetPinValue+0x5a>
    114e:	3c c0       	rjmp	.+120    	; 0x11c8 <DIO_U8GetPinValue+0xd2>
		case DIO_u8PORTD: *Copy_u8Value=GET_BIT(PIND ,Copy_u8Pin);break;
    1150:	e9 e2       	ldi	r30, 0x29	; 41
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_U8GetPinValue+0x72>
    1164:	55 95       	asr	r21
    1166:	47 95       	ror	r20
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_U8GetPinValue+0x6e>
    116c:	ca 01       	movw	r24, r20
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	ec 81       	ldd	r30, Y+4	; 0x04
    1172:	fd 81       	ldd	r31, Y+5	; 0x05
    1174:	80 83       	st	Z, r24
    1176:	2d c0       	rjmp	.+90     	; 0x11d2 <DIO_U8GetPinValue+0xdc>
        case DIO_u8PORTB: *Copy_u8Value=GET_BIT(PINB ,Copy_u8Pin);break;
    1178:	e3 e2       	ldi	r30, 0x23	; 35
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_U8GetPinValue+0x9a>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_U8GetPinValue+0x96>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	ec 81       	ldd	r30, Y+4	; 0x04
    119a:	fd 81       	ldd	r31, Y+5	; 0x05
    119c:	80 83       	st	Z, r24
    119e:	19 c0       	rjmp	.+50     	; 0x11d2 <DIO_U8GetPinValue+0xdc>
        case DIO_u8PORTC:*Copy_u8Value=GET_BIT(PINC  ,Copy_u8Pin);break;
    11a0:	e6 e2       	ldi	r30, 0x26	; 38
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_U8GetPinValue+0xc2>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_U8GetPinValue+0xbe>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	ec 81       	ldd	r30, Y+4	; 0x04
    11c2:	fd 81       	ldd	r31, Y+5	; 0x05
    11c4:	80 83       	st	Z, r24
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <DIO_U8GetPinValue+0xdc>
        default:Local_u8ErrorState=1;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_U8GetPinValue+0xdc>
		}
	}
	else{
		Local_u8ErrorState=1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01

}
    11d4:	27 96       	adiw	r28, 0x07	; 7
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <delay_function>:
#include "NRF_config.h"
/*start of low level functions, specific to the mcu and compiler*/

/*delay in miliseconds*/
void delay_function(uint32_t duration_ms)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	62 97       	sbiw	r28, 0x12	; 18
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	6f 87       	std	Y+15, r22	; 0x0f
    11fc:	78 8b       	std	Y+16, r23	; 0x10
    11fe:	89 8b       	std	Y+17, r24	; 0x11
    1200:	9a 8b       	std	Y+18, r25	; 0x12

	_delay_ms(duration_ms);
    1202:	6f 85       	ldd	r22, Y+15	; 0x0f
    1204:	78 89       	ldd	r23, Y+16	; 0x10
    1206:	89 89       	ldd	r24, Y+17	; 0x11
    1208:	9a 89       	ldd	r25, Y+18	; 0x12
    120a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	8b 87       	std	Y+11, r24	; 0x0b
    1214:	9c 87       	std	Y+12, r25	; 0x0c
    1216:	ad 87       	std	Y+13, r26	; 0x0d
    1218:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6b 85       	ldd	r22, Y+11	; 0x0b
    121c:	7c 85       	ldd	r23, Y+12	; 0x0c
    121e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1220:	9e 85       	ldd	r25, Y+14	; 0x0e
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a e7       	ldi	r20, 0x7A	; 122
    1228:	53 e4       	ldi	r21, 0x43	; 67
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8f 83       	std	Y+7, r24	; 0x07
    1234:	98 87       	std	Y+8, r25	; 0x08
    1236:	a9 87       	std	Y+9, r26	; 0x09
    1238:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    123a:	6f 81       	ldd	r22, Y+7	; 0x07
    123c:	78 85       	ldd	r23, Y+8	; 0x08
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <delay_function+0x76>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9e 83       	std	Y+6, r25	; 0x06
    1258:	8d 83       	std	Y+5, r24	; 0x05
    125a:	3f c0       	rjmp	.+126    	; 0x12da <delay_function+0xf4>
	else if (__tmp > 65535)
    125c:	6f 81       	ldd	r22, Y+7	; 0x07
    125e:	78 85       	ldd	r23, Y+8	; 0x08
    1260:	89 85       	ldd	r24, Y+9	; 0x09
    1262:	9a 85       	ldd	r25, Y+10	; 0x0a
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <delay_function+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	6b 85       	ldd	r22, Y+11	; 0x0b
    1276:	7c 85       	ldd	r23, Y+12	; 0x0c
    1278:	8d 85       	ldd	r24, Y+13	; 0x0d
    127a:	9e 85       	ldd	r25, Y+14	; 0x0e
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9e 83       	std	Y+6, r25	; 0x06
    129a:	8d 83       	std	Y+5, r24	; 0x05
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <delay_function+0xd6>
    129e:	89 e1       	ldi	r24, 0x19	; 25
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 83       	std	Y+4, r25	; 0x04
    12a4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <delay_function+0xc4>
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <delay_function+0xb8>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <delay_function+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9e 83       	std	Y+6, r25	; 0x06
    12d8:	8d 83       	std	Y+5, r24	; 0x05
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	9a 81       	ldd	r25, Y+2	; 0x02
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <delay_function+0x100>
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01
}
    12ee:	62 96       	adiw	r28, 0x12	; 18
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <SPI_Initializer>:

/*contains all SPI configuations, such as pins and control registers*/
/*SPI control: master, interrupts disabled, clock polarity low when idle, clock phase falling edge, clock up tp 1 MHz*/
void SPI_Initializer()
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
	  SPCR = 0X51;                      /*master, interrupt disabled, spi enabled, clock polarity low when idle, clock phase falling edge, 1 MHz clock*/
    1308:	ec e4       	ldi	r30, 0x4C	; 76
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	81 e5       	ldi	r24, 0x51	; 81
    130e:	80 83       	st	Z, r24

}
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <pinout_Initializer>:

/*contains all CSN and CE pins gpio configurations, including setting them as gpio outputs and turning SPI off and CE '1'*/
void pinout_Initializer()
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinDirection(NRF_PORT, CE_PIN, DIO_u8PIN_OUTPUT);
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	66 e0       	ldi	r22, 0x06	; 6
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(NRF_PORT, CSN_PIN, DIO_u8PIN_OUTPUT);
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	67 e0       	ldi	r22, 0x07	; 7
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_U8SetPinDirection>
	DIO_U8SetPinValue(NRF_PORT, CSN_PIN, SPI_OFF);
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	67 e0       	ldi	r22, 0x07	; 7
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_U8SetPinValue>
	nrf24_CE(1);                         /*no need to change this line*/
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <nrf24_CE>



}
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <nrf24_SPI>:

/*CSN pin manipulation to high or low (SPI on or off)*/
void nrf24_SPI(uint8_t input)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	0f 92       	push	r0
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	89 83       	std	Y+1, r24	; 0x01
	if (input == SPI_ON){
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	88 23       	and	r24, r24
    1358:	31 f4       	brne	.+12     	; 0x1366 <nrf24_SPI+0x1e>
		DIO_U8SetPinValue(NRF_PORT, CSN_PIN, DIO_u8PIN_LOW);
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	67 e0       	ldi	r22, 0x07	; 7
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_U8SetPinValue>
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <nrf24_SPI+0x28>
	}
	else{
		DIO_U8SetPinValue(NRF_PORT, CSN_PIN, DIO_u8PIN_HIGH);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	67 e0       	ldi	r22, 0x07	; 7
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_U8SetPinValue>

	}

}
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <SPI_send_command>:

/*1 byte SPI shift register send and receive routine*/
uint8_t SPI_send_command(uint8_t command)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	0f 92       	push	r0
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	89 83       	std	Y+1, r24	; 0x01
	SPDR = command;
    1384:	ee e4       	ldi	r30, 0x4E	; 78
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	80 83       	st	Z, r24
	while ((SPSR & (1 << SPSR_SPIF)) == 0);
    138c:	ed e4       	ldi	r30, 0x4D	; 77
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	88 23       	and	r24, r24
    1394:	dc f7       	brge	.-10     	; 0x138c <SPI_send_command+0x14>
	return SPDR;
    1396:	ee e4       	ldi	r30, 0x4E	; 78
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
}
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <nrf24_CE>:

/*CE pin maniplation to high or low*/
void nrf24_CE(uint8_t input)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	89 83       	std	Y+1, r24	; 0x01
	if (input == CE_ON)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <nrf24_CE+0x1e>
		DIO_U8SetPinValue(NRF_PORT, CE_PIN, DIO_u8PIN_HIGH);
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	66 e0       	ldi	r22, 0x06	; 6
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_U8SetPinValue>
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <nrf24_CE+0x28>
	else
		DIO_U8SetPinValue(NRF_PORT, CE_PIN, DIO_u8PIN_LOW);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	66 e0       	ldi	r22, 0x06	; 6
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_U8SetPinValue>
}
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <nrf24_dynamic_ack>:

/*function to enable or disable dynamic acknowledge. if enabled, you can disable acknowledge
   on a specific payload with W_TX_PAYLOAD_NOACK or enable acknowledge using W_TX_PAYLOAD commands.
   if disabled, you cannot disable acknowledging a payload. manipulates EN_DYN_ACK inside FEATURE*/
void nrf24_dynamic_ack(uint8_t state)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	89 83       	std	Y+1, r24	; 0x01
	if (state == ENABLE)
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	b1 f4       	brne	.+44     	; 0x1412 <nrf24_dynamic_ack+0x3e>
	{
		nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
    13e6:	2b e8       	ldi	r18, 0x8B	; 139
    13e8:	31 e0       	ldi	r19, 0x01	; 1
    13ea:	8d e1       	ldi	r24, 0x1D	; 29
    13ec:	b9 01       	movw	r22, r18
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
		register_new_value = register_current_value | (1 << EN_DYN_ACK);
    13f6:	80 91 8b 01 	lds	r24, 0x018B
    13fa:	81 60       	ori	r24, 0x01	; 1
    13fc:	80 93 8c 01 	sts	0x018C, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    1400:	2c e8       	ldi	r18, 0x8C	; 140
    1402:	31 e0       	ldi	r19, 0x01	; 1
    1404:	8d e1       	ldi	r24, 0x1D	; 29
    1406:	b9 01       	movw	r22, r18
    1408:	41 e0       	ldi	r20, 0x01	; 1
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
    1410:	15 c0       	rjmp	.+42     	; 0x143c <nrf24_dynamic_ack+0x68>
	}
	else
	{
		nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
    1412:	2b e8       	ldi	r18, 0x8B	; 139
    1414:	31 e0       	ldi	r19, 0x01	; 1
    1416:	8d e1       	ldi	r24, 0x1D	; 29
    1418:	b9 01       	movw	r22, r18
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
		register_new_value = register_current_value & (~(1 << EN_DYN_ACK));
    1422:	80 91 8b 01 	lds	r24, 0x018B
    1426:	8e 7f       	andi	r24, 0xFE	; 254
    1428:	80 93 8c 01 	sts	0x018C, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    142c:	2c e8       	ldi	r18, 0x8C	; 140
    142e:	31 e0       	ldi	r19, 0x01	; 1
    1430:	8d e1       	ldi	r24, 0x1D	; 29
    1432:	b9 01       	movw	r22, r18
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	}
}
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <nrf24_transmit>:

/*function for PTX device to transmit 1 to 32 bytes of data, used for both dynamic payload length
   and static payload length methods. acknowledgemet state could be NO_ACK_MODE or ACK_MODE*/
uint8_t nrf24_transmit(uint8_t *payload, uint8_t payload_width, uint8_t acknowledgement_state)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	00 d0       	rcall	.+0      	; 0x144a <nrf24_transmit+0x6>
    144a:	00 d0       	rcall	.+0      	; 0x144c <nrf24_transmit+0x8>
    144c:	0f 92       	push	r0
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	6b 83       	std	Y+3, r22	; 0x03
    1458:	4c 83       	std	Y+4, r20	; 0x04
	nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);         /*in order to check TX_FIFO status*/
    145a:	2b e8       	ldi	r18, 0x8B	; 139
    145c:	31 e0       	ldi	r19, 0x01	; 1
    145e:	87 e0       	ldi	r24, 0x07	; 7
    1460:	b9 01       	movw	r22, r18
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
	if ((!(register_current_value & (1 << TX_FULL))) && (current_mode == PTX))
    146a:	80 91 8b 01 	lds	r24, 0x018B
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	80 72       	andi	r24, 0x20	; 32
    1474:	90 70       	andi	r25, 0x00	; 0
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	b1 f4       	brne	.+44     	; 0x14a6 <nrf24_transmit+0x62>
    147a:	80 91 68 01 	lds	r24, 0x0168
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	91 f4       	brne	.+36     	; 0x14a6 <nrf24_transmit+0x62>
	{
		current_acknowledgement_state = acknowledgement_state;      /*setting the acknowledgement state to either NO_ACK or ACK, based on input*/
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	80 93 69 01 	sts	0x0169, r24
		if (dynamic_payload == ENABLE)
    1488:	80 91 89 01 	lds	r24, 0x0189
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	19 f4       	brne	.+6      	; 0x1496 <nrf24_transmit+0x52>
			payload_width = current_payload_width;
    1490:	80 91 8f 01 	lds	r24, 0x018F
    1494:	8b 83       	std	Y+3, r24	; 0x03
		nrf24_send_payload(payload, payload_width);                 /*the actual function to send data*/
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	9a 81       	ldd	r25, Y+2	; 0x02
    149a:	6b 81       	ldd	r22, Y+3	; 0x03
    149c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <nrf24_send_payload>
		return (TRANSMIT_BEGIN);                                     /*TX FIFO is not full and nrf24l01+ mode is standby ii or ptx*/
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <nrf24_transmit+0x64>
	}
	else
	{
		return (TRANSMIT_FAIL);            /*TX FIFO full or wrong mode*/
    14a6:	1d 82       	std	Y+5, r1	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <nrf24_send_payload>:

/*used by nrf24_transmit function to send the actual data*/
void nrf24_send_payload(uint8_t *payload, uint8_t payload_width)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <nrf24_send_payload+0x6>
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	6b 83       	std	Y+3, r22	; 0x03
	nrf24_SPI(SPI_ON);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
	if (current_acknowledgement_state == NO_ACK_MODE)
    14d2:	80 91 69 01 	lds	r24, 0x0169
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	21 f4       	brne	.+8      	; 0x14e2 <nrf24_send_payload+0x28>
		SPI_command = W_TX_PAYLOAD_NOACK;
    14da:	80 eb       	ldi	r24, 0xB0	; 176
    14dc:	80 93 8a 01 	sts	0x018A, r24
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <nrf24_send_payload+0x2e>
	else
		SPI_command = W_TX_PAYLOAD;
    14e2:	80 ea       	ldi	r24, 0xA0	; 160
    14e4:	80 93 8a 01 	sts	0x018A, r24
	SPI_send_command(SPI_command);
    14e8:	80 91 8a 01 	lds	r24, 0x018A
    14ec:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
    14f0:	11 c0       	rjmp	.+34     	; 0x1514 <nrf24_send_payload+0x5a>
	for (; payload_width; payload_width--)
	{
		SPI_command = *payload;
    14f2:	e9 81       	ldd	r30, Y+1	; 0x01
    14f4:	fa 81       	ldd	r31, Y+2	; 0x02
    14f6:	80 81       	ld	r24, Z
    14f8:	80 93 8a 01 	sts	0x018A, r24
		SPI_send_command(SPI_command);
    14fc:	80 91 8a 01 	lds	r24, 0x018A
    1500:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
		payload++;
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
	if (current_acknowledgement_state == NO_ACK_MODE)
		SPI_command = W_TX_PAYLOAD_NOACK;
	else
		SPI_command = W_TX_PAYLOAD;
	SPI_send_command(SPI_command);
	for (; payload_width; payload_width--)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	81 50       	subi	r24, 0x01	; 1
    1512:	8b 83       	std	Y+3, r24	; 0x03
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 23       	and	r24, r24
    1518:	61 f7       	brne	.-40     	; 0x14f2 <nrf24_send_payload+0x38>
	{
		SPI_command = *payload;
		SPI_send_command(SPI_command);
		payload++;
	}
	nrf24_SPI(SPI_OFF);
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <nrf24_transmit_status>:

/*reports back transmit status: TRANSMIT_DONE, TRANSMIT_FAILED (in case of reaching maximum number of retransmits in auto acknowledgement mode)
  and TRANSMIT_IN_PROGRESS, if neither flags are set. automatically resets the '1' flags.*/
uint8_t nrf24_transmit_status()
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);      /*status register is read to check TX_DS flag*/
    1536:	2b e8       	ldi	r18, 0x8B	; 139
    1538:	31 e0       	ldi	r19, 0x01	; 1
    153a:	87 e0       	ldi	r24, 0x07	; 7
    153c:	b9 01       	movw	r22, r18
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
	if (register_current_value & (1 << TX_DS))                          /*if the TX_DS == 1, */
    1546:	80 91 8b 01 	lds	r24, 0x018B
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	80 72       	andi	r24, 0x20	; 32
    1550:	90 70       	andi	r25, 0x00	; 0
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	59 f0       	breq	.+22     	; 0x156c <nrf24_transmit_status+0x40>
	{
		nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the TX_DS flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
    1556:	2b e8       	ldi	r18, 0x8B	; 139
    1558:	31 e0       	ldi	r19, 0x01	; 1
    155a:	87 e0       	ldi	r24, 0x07	; 7
    155c:	b9 01       	movw	r22, r18
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
		return TRANSMIT_DONE;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <nrf24_transmit_status+0x68>
	}
	else if (register_current_value & (1 << MAX_RT))
    156c:	80 91 8b 01 	lds	r24, 0x018B
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	80 71       	andi	r24, 0x10	; 16
    1576:	90 70       	andi	r25, 0x00	; 0
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	59 f0       	breq	.+22     	; 0x1592 <nrf24_transmit_status+0x66>
	{
		nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the MAX_RT flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
    157c:	2b e8       	ldi	r18, 0x8B	; 139
    157e:	31 e0       	ldi	r19, 0x01	; 1
    1580:	87 e0       	ldi	r24, 0x07	; 7
    1582:	b9 01       	movw	r22, r18
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
		return TRANSMIT_FAILED;
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <nrf24_transmit_status+0x68>
	}
	else
		return TRANSMIT_IN_PROGRESS;
    1592:	19 82       	std	Y+1, r1	; 0x01
    1594:	89 81       	ldd	r24, Y+1	; 0x01
}
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <nrf24_receive>:

/*the receive function output is used as a polling method to check the received data inside RX FIFOs.
If there is any data available, it will be loaded inside payload array*/
uint8_t nrf24_receive(uint8_t *payload, uint8_t payload_width)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <nrf24_receive+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <nrf24_receive+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	6b 83       	std	Y+3, r22	; 0x03
	if (current_mode == PRX)
    15b0:	80 91 68 01 	lds	r24, 0x0168
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	09 f0       	breq	.+2      	; 0x15ba <nrf24_receive+0x1c>
    15b8:	66 c0       	rjmp	.+204    	; 0x1686 <nrf24_receive+0xe8>
	{
		nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
    15ba:	2b e8       	ldi	r18, 0x8B	; 139
    15bc:	31 e0       	ldi	r19, 0x01	; 1
    15be:	87 e0       	ldi	r24, 0x07	; 7
    15c0:	b9 01       	movw	r22, r18
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
		if (register_current_value & (1 << RX_DR))                         /*if received data is ready inside RX FIFO*/
    15ca:	80 91 8b 01 	lds	r24, 0x018B
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	80 74       	andi	r24, 0x40	; 64
    15d4:	90 70       	andi	r25, 0x00	; 0
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	09 f4       	brne	.+2      	; 0x15dc <nrf24_receive+0x3e>
    15da:	52 c0       	rjmp	.+164    	; 0x1680 <nrf24_receive+0xe2>
		{
			if(dynamic_payload == DISABLE)                                    /*if dynamic payload width is disabled, use the static payload width and ignore the input*/
    15dc:	80 91 89 01 	lds	r24, 0x0189
    15e0:	88 23       	and	r24, r24
    15e2:	19 f4       	brne	.+6      	; 0x15ea <nrf24_receive+0x4c>
				payload_width = current_payload_width;
    15e4:	80 91 8f 01 	lds	r24, 0x018F
    15e8:	8b 83       	std	Y+3, r24	; 0x03

			nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
			SPI_command = R_RX_PAYLOAD;
    15f0:	81 e6       	ldi	r24, 0x61	; 97
    15f2:	80 93 8a 01 	sts	0x018A, r24
			SPI_send_command(SPI_command);
    15f6:	80 91 8a 01 	lds	r24, 0x018A
    15fa:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
    15fe:	12 c0       	rjmp	.+36     	; 0x1624 <nrf24_receive+0x86>

			for (; payload_width; payload_width--)
			{
				SPI_command = NOP_CMD;
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	80 93 8a 01 	sts	0x018A, r24
				*payload = SPI_send_command(SPI_command);
    1606:	80 91 8a 01 	lds	r24, 0x018A
    160a:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
    160e:	e9 81       	ldd	r30, Y+1	; 0x01
    1610:	fa 81       	ldd	r31, Y+2	; 0x02
    1612:	80 83       	st	Z, r24
				payload++;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	9a 83       	std	Y+2, r25	; 0x02
    161c:	89 83       	std	Y+1, r24	; 0x01

			nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/
			SPI_command = R_RX_PAYLOAD;
			SPI_send_command(SPI_command);

			for (; payload_width; payload_width--)
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	81 50       	subi	r24, 0x01	; 1
    1622:	8b 83       	std	Y+3, r24	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	88 23       	and	r24, r24
    1628:	59 f7       	brne	.-42     	; 0x1600 <nrf24_receive+0x62>
			{
				SPI_command = NOP_CMD;
				*payload = SPI_send_command(SPI_command);
				payload++;
			}
			nrf24_SPI(SPI_OFF);
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
			nrf24_read(FIFO_STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*in order to check the RX_EMPTY flag*/
    1630:	2b e8       	ldi	r18, 0x8B	; 139
    1632:	31 e0       	ldi	r19, 0x01	; 1
    1634:	87 e1       	ldi	r24, 0x17	; 23
    1636:	b9 01       	movw	r22, r18
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
			if(register_current_value & (1 << RX_EMPTY))                        /*if the RX FIFO is empty, reset the RX_DR flag inside STATUS register*/
    1640:	80 91 8b 01 	lds	r24, 0x018B
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	90 70       	andi	r25, 0x00	; 0
    164c:	88 23       	and	r24, r24
    164e:	a9 f0       	breq	.+42     	; 0x167a <nrf24_receive+0xdc>
			{
				nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
    1650:	2b e8       	ldi	r18, 0x8B	; 139
    1652:	31 e0       	ldi	r19, 0x01	; 1
    1654:	87 e0       	ldi	r24, 0x07	; 7
    1656:	b9 01       	movw	r22, r18
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
				register_new_value = register_current_value | (1 << RX_DR);
    1660:	80 91 8b 01 	lds	r24, 0x018B
    1664:	80 64       	ori	r24, 0x40	; 64
    1666:	80 93 8c 01 	sts	0x018C, r24
				nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
    166a:	2c e8       	ldi	r18, 0x8C	; 140
    166c:	31 e0       	ldi	r19, 0x01	; 1
    166e:	87 e0       	ldi	r24, 0x07	; 7
    1670:	b9 01       	movw	r22, r18
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
			}
			return OPERATION_DONE;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	8c 83       	std	Y+4, r24	; 0x04
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <nrf24_receive+0xea>
		}
		else
		{
			return RECEIVE_FIFO_EMPTY;
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	8c 83       	std	Y+4, r24	; 0x04
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <nrf24_receive+0xea>
		}
	}
	else
		return OPERATION_ERROR;
    1686:	1c 82       	std	Y+4, r1	; 0x04
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <nrf24_flush>:

/*function which uses TX_FLUSH or RX_FLUSH command to flush the fifo buffers. if successful, output is OPERATION_DONE.
   if not successful (wrong input or wrong mode of operation) output will be OPERATION_ERROR*/
uint8_t nrf24_flush(uint8_t fifo_select)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <nrf24_flush+0x6>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <nrf24_flush+0x8>
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
	switch (fifo_select)
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3c 83       	std	Y+4, r19	; 0x04
    16ae:	2b 83       	std	Y+3, r18	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	d9 f0       	breq	.+54     	; 0x16ee <nrf24_flush+0x56>
    16b8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ba:	3c 81       	ldd	r19, Y+4	; 0x04
    16bc:	21 30       	cpi	r18, 0x01	; 1
    16be:	31 05       	cpc	r19, r1
    16c0:	61 f5       	brne	.+88     	; 0x171a <nrf24_flush+0x82>
	{
	case TX_BUFFER:
		if (current_mode == PTX)
    16c2:	80 91 68 01 	lds	r24, 0x0168
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	81 f4       	brne	.+32     	; 0x16ea <nrf24_flush+0x52>
		{
			nrf24_SPI(SPI_ON);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
			SPI_command = FLUSH_TX;
    16d0:	81 ee       	ldi	r24, 0xE1	; 225
    16d2:	80 93 8a 01 	sts	0x018A, r24
			SPI_send_command(SPI_command);
    16d6:	80 91 8a 01 	lds	r24, 0x018A
    16da:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
			nrf24_SPI(SPI_OFF);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
			return OPERATION_DONE;
    16e4:	31 e0       	ldi	r19, 0x01	; 1
    16e6:	3a 83       	std	Y+2, r19	; 0x02
    16e8:	19 c0       	rjmp	.+50     	; 0x171c <nrf24_flush+0x84>
		}
		else
			return OPERATION_ERROR;
    16ea:	1a 82       	std	Y+2, r1	; 0x02
    16ec:	17 c0       	rjmp	.+46     	; 0x171c <nrf24_flush+0x84>
	case RX_BUFFER:
		if (current_mode == PRX)
    16ee:	80 91 68 01 	lds	r24, 0x0168
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	81 f4       	brne	.+32     	; 0x1716 <nrf24_flush+0x7e>
		{
			nrf24_SPI(SPI_ON);
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
			SPI_command = FLUSH_RX;
    16fc:	82 ee       	ldi	r24, 0xE2	; 226
    16fe:	80 93 8a 01 	sts	0x018A, r24
			SPI_send_command(SPI_command);
    1702:	80 91 8a 01 	lds	r24, 0x018A
    1706:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
			nrf24_SPI(SPI_OFF);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
			return OPERATION_DONE;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	8a 83       	std	Y+2, r24	; 0x02
    1714:	03 c0       	rjmp	.+6      	; 0x171c <nrf24_flush+0x84>
		}
		else
			return OPERATION_ERROR;
    1716:	1a 82       	std	Y+2, r1	; 0x02
    1718:	01 c0       	rjmp	.+2      	; 0x171c <nrf24_flush+0x84>
	default:
		return OPERATION_ERROR;
    171a:	1a 82       	std	Y+2, r1	; 0x02
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <nrf24_reset>:

/*must be called atleast once, which happens with calling nrf24_device function*/
void nrf24_reset()
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	reset_flag = 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	80 93 88 01 	sts	0x0188, r24
	nrf24_CE(CE_OFF);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <nrf24_CE>
	register_new_value = CONFIG_REGISTER_DEFAULT;
    1740:	88 e0       	ldi	r24, 0x08	; 8
    1742:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    1746:	2c e8       	ldi	r18, 0x8C	; 140
    1748:	31 e0       	ldi	r19, 0x01	; 1
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	b9 01       	movw	r22, r18
    174e:	41 e0       	ldi	r20, 0x01	; 1
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	register_new_value = EN_AA_REGISTER_DEFAULT;
    1756:	8f e3       	ldi	r24, 0x3F	; 63
    1758:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
    175c:	2c e8       	ldi	r18, 0x8C	; 140
    175e:	31 e0       	ldi	r19, 0x01	; 1
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	b9 01       	movw	r22, r18
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	register_new_value = EN_RXADDR_REGISTER_DEFAULT;
    176c:	10 92 8c 01 	sts	0x018C, r1
	nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
    1770:	2c e8       	ldi	r18, 0x8C	; 140
    1772:	31 e0       	ldi	r19, 0x01	; 1
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	b9 01       	movw	r22, r18
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	register_new_value = SETUP_AW_REGISTER_DEFAULT;
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(SETUP_AW_ADDRESS, &register_new_value, 1, CLOSE);
    1786:	2c e8       	ldi	r18, 0x8C	; 140
    1788:	31 e0       	ldi	r19, 0x01	; 1
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	b9 01       	movw	r22, r18
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	register_new_value = RF_CH_REGISTER_DEFAULT;
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(RF_CH_ADDRESS, &register_new_value, 1, CLOSE);
    179c:	2c e8       	ldi	r18, 0x8C	; 140
    179e:	31 e0       	ldi	r19, 0x01	; 1
    17a0:	85 e0       	ldi	r24, 0x05	; 5
    17a2:	b9 01       	movw	r22, r18
    17a4:	41 e0       	ldi	r20, 0x01	; 1
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	register_new_value = RF_SETUP_REGISTER_DEFAULT;
    17ac:	8e e0       	ldi	r24, 0x0E	; 14
    17ae:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
    17b2:	2c e8       	ldi	r18, 0x8C	; 140
    17b4:	31 e0       	ldi	r19, 0x01	; 1
    17b6:	86 e0       	ldi	r24, 0x06	; 6
    17b8:	b9 01       	movw	r22, r18
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	register_new_value = STATUS_REGISTER_DEFAULT;
    17c2:	8e e0       	ldi	r24, 0x0E	; 14
    17c4:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
    17c8:	2c e8       	ldi	r18, 0x8C	; 140
    17ca:	31 e0       	ldi	r19, 0x01	; 1
    17cc:	87 e0       	ldi	r24, 0x07	; 7
    17ce:	b9 01       	movw	r22, r18
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>

	nrf24_mode(PTX);
    17d8:	83 e0       	ldi	r24, 0x03	; 3
    17da:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
	nrf24_flush(TX_BUFFER);
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <nrf24_flush>
	nrf24_mode(PRX);
    17e4:	84 e0       	ldi	r24, 0x04	; 4
    17e6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
	nrf24_flush(RX_BUFFER);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	0e 94 4c 0b 	call	0x1698	; 0x1698 <nrf24_flush>

	nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
    17f0:	2b e8       	ldi	r18, 0x8B	; 139
    17f2:	31 e0       	ldi	r19, 0x01	; 1
    17f4:	87 e0       	ldi	r24, 0x07	; 7
    17f6:	b9 01       	movw	r22, r18
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
	register_new_value = register_current_value | (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
    1800:	80 91 8b 01 	lds	r24, 0x018B
    1804:	80 67       	ori	r24, 0x70	; 112
    1806:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
    180a:	2c e8       	ldi	r18, 0x8C	; 140
    180c:	31 e0       	ldi	r19, 0x01	; 1
    180e:	87 e0       	ldi	r24, 0x07	; 7
    1810:	b9 01       	movw	r22, r18
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>

	nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	41 e0       	ldi	r20, 0x01	; 1
    1820:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <nrf24_interrupt_mask>
	nrf24_crc_configuration(ENABLE, 1);
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <nrf24_crc_configuration>
	nrf24_address_width(ADDRESS_WIDTH_DEFAULT);
    182c:	85 e0       	ldi	r24, 0x05	; 5
    182e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <nrf24_address_width>
	nrf24_rf_datarate(RF_DATARATE_DEFAULT);
    1832:	88 ee       	ldi	r24, 0xE8	; 232
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <nrf24_rf_datarate>
	nrf24_rf_power(RF_PWR_DEFAULT);
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <nrf24_rf_power>
	nrf24_rf_channel(RF_CHANNEL_DEFAULT);
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <nrf24_rf_channel>
	nrf24_datapipe_enable(NUMBER_OF_DP_DEFAULT);
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <nrf24_datapipe_enable>
	nrf24_datapipe_address_configuration();
    184c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <nrf24_datapipe_address_configuration>
	nrf24_datapipe_ptx(1);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	0e 94 76 0d 	call	0x1aec	; 0x1aec <nrf24_datapipe_ptx>
	nrf24_prx_static_payload_width(STATIC_PAYLOAD_WIDTH_DEFAULT, NUMBER_OF_DP_DEFAULT);
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <nrf24_prx_static_payload_width>
	nrf24_automatic_retransmit_setup(RETRANSMIT_DELAY_DEFAULT, RETRANSMIT_COUNT_DEFAULT);
    185e:	84 ef       	ldi	r24, 0xF4	; 244
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	62 e0       	ldi	r22, 0x02	; 2
    1864:	0e 94 bd 0c 	call	0x197a	; 0x197a <nrf24_automatic_retransmit_setup>
	nrf24_auto_acknowledgment_setup(NUMBER_OF_DP_DEFAULT);
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <nrf24_auto_acknowledgment_setup>
	nrf24_dynamic_payload(DISABLE, NUMBER_OF_DP_DEFAULT);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <nrf24_dynamic_payload>
	nrf24_dynamic_ack(ENABLE);
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <nrf24_dynamic_ack>
}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <nrf24_device>:

/*used by firmware to set the nrf24 mode in TRANSMITTER, RECEIVER, POWER_SAVING or TURN_OFF states, and reseting the device
  if it has not been done yet. This is the initializer, and everything starts by calling nrf24_device first.It has a higher
  level of abstraction than nrf24_mode and must be used by user*/
void nrf24_device(uint8_t device_mode, uint8_t reset_state)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <nrf24_device+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <nrf24_device+0x8>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	6a 83       	std	Y+2, r22	; 0x02
	SPI_Initializer();
    1892:	0e 94 80 09 	call	0x1300	; 0x1300 <SPI_Initializer>
	pinout_Initializer();
    1896:	0e 94 8b 09 	call	0x1316	; 0x1316 <pinout_Initializer>
	delay_function(STARTUP_DELAY);
    189a:	66 e9       	ldi	r22, 0x96	; 150
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <delay_function>

	if ((reset_state == RESET) || (reset_flag == 0))
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	21 f0       	breq	.+8      	; 0x18b4 <nrf24_device+0x32>
    18ac:	80 91 88 01 	lds	r24, 0x0188
    18b0:	88 23       	and	r24, r24
    18b2:	11 f4       	brne	.+4      	; 0x18b8 <nrf24_device+0x36>
	{
		nrf24_reset();
    18b4:	0e 94 96 0b 	call	0x172c	; 0x172c <nrf24_reset>
	}

	switch (device_mode)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3c 83       	std	Y+4, r19	; 0x04
    18c0:	2b 83       	std	Y+3, r18	; 0x03
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f1       	breq	.+66     	; 0x190e <nrf24_device+0x8c>
    18cc:	2b 81       	ldd	r18, Y+3	; 0x03
    18ce:	3c 81       	ldd	r19, Y+4	; 0x04
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <nrf24_device+0x5e>
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	61 f0       	breq	.+24     	; 0x18f6 <nrf24_device+0x74>
    18de:	3e c0       	rjmp	.+124    	; 0x195c <nrf24_device+0xda>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	21 f1       	breq	.+72     	; 0x1932 <nrf24_device+0xb0>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	83 30       	cpi	r24, 0x03	; 3
    18f0:	91 05       	cpc	r25, r1
    18f2:	59 f1       	breq	.+86     	; 0x194a <nrf24_device+0xc8>
    18f4:	33 c0       	rjmp	.+102    	; 0x195c <nrf24_device+0xda>
	{
	case TRANSMITTER:
		nrf24_mode(POWER_DOWN);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, DISABLE, DISABLE);                /*disabling tx interrupt mask*/
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <nrf24_interrupt_mask>
		nrf24_mode(PTX);
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
    190c:	2f c0       	rjmp	.+94     	; 0x196c <nrf24_device+0xea>
		break;
	case RECEIVER:
		nrf24_mode(POWER_DOWN);
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
		nrf24_interrupt_mask(DISABLE, ENABLE, ENABLE);                /*disabling rx interrupt mask*/
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <nrf24_interrupt_mask>
		nrf24_mode(PRX);
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
		delay_function(PRX_MODE_DELAY);                              /*100ms for PRX mode*/
    1924:	64 e6       	ldi	r22, 0x64	; 100
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <delay_function>
    1930:	1d c0       	rjmp	.+58     	; 0x196c <nrf24_device+0xea>
		break;
	case POWER_SAVING:
		nrf24_mode(POWER_DOWN);
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <nrf24_interrupt_mask>
		nrf24_mode(STANDBYI);
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
    1948:	11 c0       	rjmp	.+34     	; 0x196c <nrf24_device+0xea>
		break;
	case TURN_OFF:
		nrf24_mode(POWER_DOWN);
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <nrf24_interrupt_mask>
    195a:	08 c0       	rjmp	.+16     	; 0x196c <nrf24_device+0xea>
		break;
	default:
		nrf24_mode(POWER_DOWN);
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <nrf24_interrupt_mask>
		break;
	}
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <nrf24_automatic_retransmit_setup>:

/*setting automatic retransmit delay time and maximum number of retransmits*/
void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <nrf24_automatic_retransmit_setup+0x6>
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	6b 83       	std	Y+3, r22	; 0x03
	register_new_value = 0x00;
    198c:	10 92 8c 01 	sts	0x018C, r1
    1990:	0b c0       	rjmp	.+22     	; 0x19a8 <nrf24_automatic_retransmit_setup+0x2e>
	for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
		register_new_value++;
    1992:	80 91 8c 01 	lds	r24, 0x018C
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	80 93 8c 01 	sts	0x018C, r24

/*setting automatic retransmit delay time and maximum number of retransmits*/
void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
{
	register_new_value = 0x00;
	for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	8a 5f       	subi	r24, 0xFA	; 250
    19a2:	90 40       	sbci	r25, 0x00	; 0
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	8b 3f       	cpi	r24, 0xFB	; 251
    19ae:	91 05       	cpc	r25, r1
    19b0:	20 f0       	brcs	.+8      	; 0x19ba <nrf24_automatic_retransmit_setup+0x40>
    19b2:	80 91 8c 01 	lds	r24, 0x018C
    19b6:	8f 30       	cpi	r24, 0x0F	; 15
    19b8:	60 f3       	brcs	.-40     	; 0x1992 <nrf24_automatic_retransmit_setup+0x18>
		register_new_value++;
	register_new_value <<= ARD_0;
    19ba:	80 91 8c 01 	lds	r24, 0x018C
    19be:	82 95       	swap	r24
    19c0:	80 7f       	andi	r24, 0xF0	; 240
    19c2:	80 93 8c 01 	sts	0x018C, r24
	if ((retransmit_count > 0) && (retransmit_count < 16))
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 23       	and	r24, r24
    19ca:	51 f0       	breq	.+20     	; 0x19e0 <nrf24_automatic_retransmit_setup+0x66>
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	80 31       	cpi	r24, 0x10	; 16
    19d0:	38 f4       	brcc	.+14     	; 0x19e0 <nrf24_automatic_retransmit_setup+0x66>
		register_new_value |= retransmit_count;
    19d2:	80 91 8c 01 	lds	r24, 0x018C
    19d6:	9b 81       	ldd	r25, Y+3	; 0x03
    19d8:	89 2b       	or	r24, r25
    19da:	80 93 8c 01 	sts	0x018C, r24
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <nrf24_automatic_retransmit_setup+0x6e>
	else
		register_new_value |= 0;
    19e0:	80 91 8c 01 	lds	r24, 0x018C
    19e4:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(SETUP_RETR_ADDRESS, &register_new_value, 1, CLOSE);
    19e8:	2c e8       	ldi	r18, 0x8C	; 140
    19ea:	31 e0       	ldi	r19, 0x01	; 1
    19ec:	84 e0       	ldi	r24, 0x04	; 4
    19ee:	b9 01       	movw	r22, r18
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <nrf24_auto_acknowledgment_setup>:

/*setting auto acknoledgement on datapipes*/
void nrf24_auto_acknowledgment_setup(uint8_t datapipe)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	0f 92       	push	r0
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	89 83       	std	Y+1, r24	; 0x01
	if (datapipe < 7)
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	87 30       	cpi	r24, 0x07	; 7
    1a14:	68 f4       	brcc	.+26     	; 0x1a30 <nrf24_auto_acknowledgment_setup+0x2c>
		register_new_value = (1 << datapipe) - 1;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <nrf24_auto_acknowledgment_setup+0x22>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	2a 95       	dec	r18
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <nrf24_auto_acknowledgment_setup+0x1e>
    1a2a:	81 50       	subi	r24, 0x01	; 1
    1a2c:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
    1a30:	2c e8       	ldi	r18, 0x8C	; 140
    1a32:	31 e0       	ldi	r19, 0x01	; 1
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	b9 01       	movw	r22, r18
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
}
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <nrf24_dynamic_payload>:

/*turns on or off the dynamic payload width capability*/
void nrf24_dynamic_payload(uint8_t state, uint8_t datapipe)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <nrf24_dynamic_payload+0x6>
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	6a 83       	std	Y+2, r22	; 0x02
	nrf24_auto_acknowledgment_setup(datapipe);                        /*setting auto acknowledgment before setting dynamic payload*/
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <nrf24_auto_acknowledgment_setup>
	nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
    1a5c:	2b e8       	ldi	r18, 0x8B	; 139
    1a5e:	31 e0       	ldi	r19, 0x01	; 1
    1a60:	8d e1       	ldi	r24, 0x1D	; 29
    1a62:	b9 01       	movw	r22, r18
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
	if (state == ENABLE)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	49 f5       	brne	.+82     	; 0x1ac4 <nrf24_dynamic_payload+0x7c>
	{
		register_new_value = register_current_value | (1 << EN_DPL);    /*EN_DPL bit turns dynamic payload width on or off on all datapipes*/
    1a72:	80 91 8b 01 	lds	r24, 0x018B
    1a76:	84 60       	ori	r24, 0x04	; 4
    1a78:	80 93 8c 01 	sts	0x018C, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    1a7c:	2c e8       	ldi	r18, 0x8C	; 140
    1a7e:	31 e0       	ldi	r19, 0x01	; 1
    1a80:	8d e1       	ldi	r24, 0x1D	; 29
    1a82:	b9 01       	movw	r22, r18
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
		if (datapipe < 7)
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	87 30       	cpi	r24, 0x07	; 7
    1a90:	68 f4       	brcc	.+26     	; 0x1aac <nrf24_dynamic_payload+0x64>
			register_new_value = (1 << datapipe) - 1;                       /*turning on dynamic payload width on chosen datapipes, using DYNPD register*/
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <nrf24_dynamic_payload+0x5a>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	2a 95       	dec	r18
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <nrf24_dynamic_payload+0x56>
    1aa6:	81 50       	subi	r24, 0x01	; 1
    1aa8:	80 93 8c 01 	sts	0x018C, r24
		nrf24_write(DYNPD_ADDRESS, &register_new_value, 1, CLOSE);
    1aac:	2c e8       	ldi	r18, 0x8C	; 140
    1aae:	31 e0       	ldi	r19, 0x01	; 1
    1ab0:	8c e1       	ldi	r24, 0x1C	; 28
    1ab2:	b9 01       	movw	r22, r18
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
		dynamic_payload = ENABLE;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	80 93 89 01 	sts	0x0189, r24
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <nrf24_dynamic_payload+0x9a>
	}
	else
	{
		register_new_value = register_current_value & (~(1 << EN_DPL));
    1ac4:	80 91 8b 01 	lds	r24, 0x018B
    1ac8:	8b 7f       	andi	r24, 0xFB	; 251
    1aca:	80 93 8c 01 	sts	0x018C, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    1ace:	2c e8       	ldi	r18, 0x8C	; 140
    1ad0:	31 e0       	ldi	r19, 0x01	; 1
    1ad2:	8d e1       	ldi	r24, 0x1D	; 29
    1ad4:	b9 01       	movw	r22, r18
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
		dynamic_payload = DISABLE;
    1ade:	10 92 89 01 	sts	0x0189, r1
	}
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <nrf24_datapipe_ptx>:

/*on nrf24l01+ there is only one address for PTX device which must be the same as PRX data pipe address 0*/
void nrf24_datapipe_ptx(uint8_t datapipe_number)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(TX_ADDR_ADDRESS, &datapipe_address[datapipe_number - 1][0], current_address_width, CLOSE);
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	c9 01       	movw	r24, r18
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	82 0f       	add	r24, r18
    1b0a:	93 1f       	adc	r25, r19
    1b0c:	05 97       	sbiw	r24, 0x05	; 5
    1b0e:	86 59       	subi	r24, 0x96	; 150
    1b10:	9e 4f       	sbci	r25, 0xFE	; 254
    1b12:	9c 01       	movw	r18, r24
    1b14:	90 91 8e 01 	lds	r25, 0x018E
    1b18:	80 e1       	ldi	r24, 0x10	; 16
    1b1a:	b9 01       	movw	r22, r18
    1b1c:	49 2f       	mov	r20, r25
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
}
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <nrf24_datapipe_address_configuration>:

/*setting the 6 datapipe addresses using the datapipe_address[][]*/
void nrf24_datapipe_address_configuration()
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <nrf24_datapipe_address_configuration+0x6>
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	uint8_t address = RX_ADDR_P0_ADDRESS;
    1b36:	8a e0       	ldi	r24, 0x0A	; 10
    1b38:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t counter = 0; counter < 6; counter++)
    1b3a:	19 82       	std	Y+1, r1	; 0x01
    1b3c:	1d c0       	rjmp	.+58     	; 0x1b78 <nrf24_datapipe_address_configuration+0x4c>
	{
		nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
    1b3e:	4a e6       	ldi	r20, 0x6A	; 106
    1b40:	51 e0       	ldi	r21, 0x01	; 1
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	c9 01       	movw	r24, r18
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	82 0f       	add	r24, r18
    1b54:	93 1f       	adc	r25, r19
    1b56:	9a 01       	movw	r18, r20
    1b58:	28 0f       	add	r18, r24
    1b5a:	39 1f       	adc	r19, r25
    1b5c:	90 91 8e 01 	lds	r25, 0x018E
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	b9 01       	movw	r22, r18
    1b64:	49 2f       	mov	r20, r25
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
		address++;
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	8f 5f       	subi	r24, 0xFF	; 255
    1b70:	8a 83       	std	Y+2, r24	; 0x02

/*setting the 6 datapipe addresses using the datapipe_address[][]*/
void nrf24_datapipe_address_configuration()
{
	uint8_t address = RX_ADDR_P0_ADDRESS;
	for (uint8_t counter = 0; counter < 6; counter++)
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	8f 5f       	subi	r24, 0xFF	; 255
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	86 30       	cpi	r24, 0x06	; 6
    1b7c:	00 f3       	brcs	.-64     	; 0x1b3e <nrf24_datapipe_address_configuration+0x12>
	{
		nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
		address++;
	}
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <nrf24_prx_static_payload_width>:

/*function to change static payload width, from 1 to 32 bytes in each payload*/
void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <nrf24_prx_static_payload_width+0x6>
    1b8e:	0f 92       	push	r0
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	8a 83       	std	Y+2, r24	; 0x02
    1b96:	6b 83       	std	Y+3, r22	; 0x03
	for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
    1b98:	81 e1       	ldi	r24, 0x11	; 17
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <nrf24_prx_static_payload_width+0x34>
	{
		nrf24_write(address, &static_payload_width, 1, CLOSE);
    1b9e:	9e 01       	movw	r18, r28
    1ba0:	2e 5f       	subi	r18, 0xFE	; 254
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	41 e0       	ldi	r20, 0x01	; 1
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
		address++;
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	89 83       	std	Y+1, r24	; 0x01
}

/*function to change static payload width, from 1 to 32 bytes in each payload*/
void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
{
	for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	81 50       	subi	r24, 0x01	; 1
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	88 23       	and	r24, r24
    1bc0:	71 f7       	brne	.-36     	; 0x1b9e <nrf24_prx_static_payload_width+0x16>
	{
		nrf24_write(address, &static_payload_width, 1, CLOSE);
		address++;
	}
	current_payload_width = static_payload_width;
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	80 93 8f 01 	sts	0x018F, r24
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <nrf24_datapipe_enable>:

/*datapipes are turned on and off using EN_RXADDR register, PRX datapipe addresses are located in RX_ADDR_Pn, TX address is located inside TX_ADDR*/
void nrf24_datapipe_enable(uint8_t number_of_datapipes)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	0f 92       	push	r0
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	89 83       	std	Y+1, r24	; 0x01
	register_new_value = (1 << number_of_datapipes) - 1;
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <nrf24_datapipe_enable+0x1c>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	2a 95       	dec	r18
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <nrf24_datapipe_enable+0x18>
    1bf4:	81 50       	subi	r24, 0x01	; 1
    1bf6:	80 93 8c 01 	sts	0x018C, r24
	nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
    1bfa:	2c e8       	ldi	r18, 0x8C	; 140
    1bfc:	31 e0       	ldi	r19, 0x01	; 1
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	b9 01       	movw	r22, r18
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
}
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <nrf24_address_width>:

/*function to set the nrf24l01+ address width, from 3 to 5 bytes*/
void nrf24_address_width(uint8_t address_width)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	0f 92       	push	r0
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	89 83       	std	Y+1, r24	; 0x01
	if ((address_width <= 5) && (address_width >= 3))
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	86 30       	cpi	r24, 0x06	; 6
    1c22:	40 f4       	brcc	.+16     	; 0x1c34 <nrf24_address_width+0x22>
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	83 30       	cpi	r24, 0x03	; 3
    1c28:	28 f0       	brcs	.+10     	; 0x1c34 <nrf24_address_width+0x22>
	{
		write_pointer = address_width - 2;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	82 50       	subi	r24, 0x02	; 2
    1c2e:	80 93 8d 01 	sts	0x018D, r24
    1c32:	03 c0       	rjmp	.+6      	; 0x1c3a <nrf24_address_width+0x28>
	}
	else
	{
		write_pointer = 3;
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	80 93 8d 01 	sts	0x018D, r24
	}
	nrf24_write(SETUP_AW_ADDRESS, &write_pointer, 1, CLOSE);                    /*5 bytes is the maximum address width available*/
    1c3a:	2d e8       	ldi	r18, 0x8D	; 141
    1c3c:	31 e0       	ldi	r19, 0x01	; 1
    1c3e:	83 e0       	ldi	r24, 0x03	; 3
    1c40:	b9 01       	movw	r22, r18
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	current_address_width = address_width;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	80 93 8e 01 	sts	0x018E, r24
}
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <nrf24_rf_datarate>:

/*datarate settings, you can choose between 2mbps, 1mbps, 250kbps*/
void nrf24_rf_datarate(uint16_t rf_datarate)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <nrf24_rf_datarate+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <nrf24_rf_datarate+0x8>
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
	nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
    1c68:	2b e8       	ldi	r18, 0x8B	; 139
    1c6a:	31 e0       	ldi	r19, 0x01	; 1
    1c6c:	86 e0       	ldi	r24, 0x06	; 6
    1c6e:	b9 01       	movw	r22, r18
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
	register_current_value &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
    1c78:	80 91 8b 01 	lds	r24, 0x018B
    1c7c:	87 7d       	andi	r24, 0xD7	; 215
    1c7e:	80 93 8b 01 	sts	0x018B, r24
	switch (rf_datarate)
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	23 e0       	ldi	r18, 0x03	; 3
    1c90:	88 3e       	cpi	r24, 0xE8	; 232
    1c92:	92 07       	cpc	r25, r18
    1c94:	91 f0       	breq	.+36     	; 0x1cba <nrf24_rf_datarate+0x62>
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	27 e0       	ldi	r18, 0x07	; 7
    1c9c:	80 3d       	cpi	r24, 0xD0	; 208
    1c9e:	92 07       	cpc	r25, r18
    1ca0:	31 f0       	breq	.+12     	; 0x1cae <nrf24_rf_datarate+0x56>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	8a 3f       	cpi	r24, 0xFA	; 250
    1ca8:	91 05       	cpc	r25, r1
    1caa:	61 f0       	breq	.+24     	; 0x1cc4 <nrf24_rf_datarate+0x6c>
    1cac:	11 c0       	rjmp	.+34     	; 0x1cd0 <nrf24_rf_datarate+0x78>
	{
	case 2000:
		register_new_value = register_current_value | (1 << RF_DR_HIGH);
    1cae:	80 91 8b 01 	lds	r24, 0x018B
    1cb2:	88 60       	ori	r24, 0x08	; 8
    1cb4:	80 93 8c 01 	sts	0x018C, r24
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <nrf24_rf_datarate+0x80>
		break;
	case 1000:
		register_new_value = register_current_value;
    1cba:	80 91 8b 01 	lds	r24, 0x018B
    1cbe:	80 93 8c 01 	sts	0x018C, r24
    1cc2:	0a c0       	rjmp	.+20     	; 0x1cd8 <nrf24_rf_datarate+0x80>
		break;
	case 250:
		register_new_value = register_current_value | (1 << RF_DR_LOW);
    1cc4:	80 91 8b 01 	lds	r24, 0x018B
    1cc8:	80 62       	ori	r24, 0x20	; 32
    1cca:	80 93 8c 01 	sts	0x018C, r24
    1cce:	04 c0       	rjmp	.+8      	; 0x1cd8 <nrf24_rf_datarate+0x80>
		break;
	default:
		register_new_value = register_current_value;
    1cd0:	80 91 8b 01 	lds	r24, 0x018B
    1cd4:	80 93 8c 01 	sts	0x018C, r24
		break;
	}
	nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
    1cd8:	2c e8       	ldi	r18, 0x8C	; 140
    1cda:	31 e0       	ldi	r19, 0x01	; 1
    1cdc:	86 e0       	ldi	r24, 0x06	; 6
    1cde:	b9 01       	movw	r22, r18
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <nrf24_rf_power>:

/*nrf24l01+ RF power settings. 0dbm, -6dbm, -12dbm, -18dbm*/
void nrf24_rf_power(uint8_t rf_power)
{
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <nrf24_rf_power+0x6>
    1cfc:	0f 92       	push	r0
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	89 83       	std	Y+1, r24	; 0x01
	nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
    1d04:	2b e8       	ldi	r18, 0x8B	; 139
    1d06:	31 e0       	ldi	r19, 0x01	; 1
    1d08:	86 e0       	ldi	r24, 0x06	; 6
    1d0a:	b9 01       	movw	r22, r18
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
	register_current_value &= ~((1 << RF_PWR_1) | (1 << RF_PWR_0));
    1d14:	80 91 8b 01 	lds	r24, 0x018B
    1d18:	89 7f       	andi	r24, 0xF9	; 249
    1d1a:	80 93 8b 01 	sts	0x018B, r24
	switch (rf_power)
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	3b 83       	std	Y+3, r19	; 0x03
    1d26:	2a 83       	std	Y+2, r18	; 0x02
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2c:	86 30       	cpi	r24, 0x06	; 6
    1d2e:	91 05       	cpc	r25, r1
    1d30:	d9 f0       	breq	.+54     	; 0x1d68 <nrf24_rf_power+0x72>
    1d32:	2a 81       	ldd	r18, Y+2	; 0x02
    1d34:	3b 81       	ldd	r19, Y+3	; 0x03
    1d36:	27 30       	cpi	r18, 0x07	; 7
    1d38:	31 05       	cpc	r19, r1
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <nrf24_rf_power+0x50>
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	61 f0       	breq	.+24     	; 0x1d5c <nrf24_rf_power+0x66>
    1d44:	22 c0       	rjmp	.+68     	; 0x1d8a <nrf24_rf_power+0x94>
    1d46:	2a 81       	ldd	r18, Y+2	; 0x02
    1d48:	3b 81       	ldd	r19, Y+3	; 0x03
    1d4a:	2c 30       	cpi	r18, 0x0C	; 12
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	91 f0       	breq	.+36     	; 0x1d74 <nrf24_rf_power+0x7e>
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	9b 81       	ldd	r25, Y+3	; 0x03
    1d54:	82 31       	cpi	r24, 0x12	; 18
    1d56:	91 05       	cpc	r25, r1
    1d58:	99 f0       	breq	.+38     	; 0x1d80 <nrf24_rf_power+0x8a>
    1d5a:	17 c0       	rjmp	.+46     	; 0x1d8a <nrf24_rf_power+0x94>
	{
	case 0:
		register_new_value = register_current_value | ((1 << RF_PWR_1) | (1 << RF_PWR_0));
    1d5c:	80 91 8b 01 	lds	r24, 0x018B
    1d60:	86 60       	ori	r24, 0x06	; 6
    1d62:	80 93 8c 01 	sts	0x018C, r24
    1d66:	16 c0       	rjmp	.+44     	; 0x1d94 <nrf24_rf_power+0x9e>
		break;
	case 6:
		register_new_value = register_current_value | (1 << RF_PWR_1);
    1d68:	80 91 8b 01 	lds	r24, 0x018B
    1d6c:	84 60       	ori	r24, 0x04	; 4
    1d6e:	80 93 8c 01 	sts	0x018C, r24
    1d72:	10 c0       	rjmp	.+32     	; 0x1d94 <nrf24_rf_power+0x9e>
		break;
	case 12:
		register_new_value = register_current_value | (1 << RF_PWR_0);
    1d74:	80 91 8b 01 	lds	r24, 0x018B
    1d78:	82 60       	ori	r24, 0x02	; 2
    1d7a:	80 93 8c 01 	sts	0x018C, r24
    1d7e:	0a c0       	rjmp	.+20     	; 0x1d94 <nrf24_rf_power+0x9e>
		break;
	case 18:
		register_new_value = register_current_value;
    1d80:	80 91 8b 01 	lds	r24, 0x018B
    1d84:	80 93 8c 01 	sts	0x018C, r24
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <nrf24_rf_power+0x9e>
		break;
	default:
		register_new_value = register_current_value | (1 << RF_PWR_1);
    1d8a:	80 91 8b 01 	lds	r24, 0x018B
    1d8e:	84 60       	ori	r24, 0x04	; 4
    1d90:	80 93 8c 01 	sts	0x018C, r24
		break;
	}
	nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
    1d94:	2c e8       	ldi	r18, 0x8C	; 140
    1d96:	31 e0       	ldi	r19, 0x01	; 1
    1d98:	86 e0       	ldi	r24, 0x06	; 6
    1d9a:	b9 01       	movw	r22, r18
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <nrf24_rf_channel>:

/*nrf24l01+ RF channel selection, from 1 to 125*/
void nrf24_rf_channel(uint8_t rf_channel)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <nrf24_rf_channel+0x6>
    1db6:	0f 92       	push	r0
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
	if ((rf_channel <= 125) && (rf_channel >= 1))
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	8e 37       	cpi	r24, 0x7E	; 126
    1dc2:	78 f4       	brcc	.+30     	; 0x1de2 <nrf24_rf_channel+0x32>
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	88 23       	and	r24, r24
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <nrf24_rf_channel+0x32>
	{
		uint8_t write_pointer = rf_channel;
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
    1dce:	85 e0       	ldi	r24, 0x05	; 5
    1dd0:	9e 01       	movw	r18, r28
    1dd2:	2f 5f       	subi	r18, 0xFF	; 255
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	b9 01       	movw	r22, r18
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
    1de0:	0b c0       	rjmp	.+22     	; 0x1df8 <nrf24_rf_channel+0x48>
	}
	else
	{
		uint8_t write_pointer = 1;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	8a 83       	std	Y+2, r24	; 0x02
		nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
    1de6:	9e 01       	movw	r18, r28
    1de8:	2e 5f       	subi	r18, 0xFE	; 254
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	85 e0       	ldi	r24, 0x05	; 5
    1dee:	b9 01       	movw	r22, r18
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	}
}
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <nrf24_interrupt_mask>:

/*interrupt mask settings. 3 seperate masks for RX, TX, and RT (maximum numbers of retransmission reached*/
void nrf24_interrupt_mask(uint8_t rx_mask, uint8_t tx_mask, uint8_t max_rt_mask)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <nrf24_interrupt_mask+0x6>
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	6a 83       	std	Y+2, r22	; 0x02
    1e14:	4b 83       	std	Y+3, r20	; 0x03
	nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
    1e16:	2b e8       	ldi	r18, 0x8B	; 139
    1e18:	31 e0       	ldi	r19, 0x01	; 1
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	b9 01       	movw	r22, r18
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
	if (rx_mask)
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	88 23       	and	r24, r24
    1e2a:	31 f0       	breq	.+12     	; 0x1e38 <nrf24_interrupt_mask+0x34>
		register_new_value = (register_current_value) | (1 << MASK_RX_DR);
    1e2c:	80 91 8b 01 	lds	r24, 0x018B
    1e30:	80 64       	ori	r24, 0x40	; 64
    1e32:	80 93 8c 01 	sts	0x018C, r24
    1e36:	05 c0       	rjmp	.+10     	; 0x1e42 <nrf24_interrupt_mask+0x3e>
	else
		register_new_value &= (~(1 << MASK_RX_DR));
    1e38:	80 91 8c 01 	lds	r24, 0x018C
    1e3c:	8f 7b       	andi	r24, 0xBF	; 191
    1e3e:	80 93 8c 01 	sts	0x018C, r24
	if (tx_mask)
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	88 23       	and	r24, r24
    1e46:	31 f0       	breq	.+12     	; 0x1e54 <nrf24_interrupt_mask+0x50>
		register_new_value |= (1 << MASK_TX_DS);
    1e48:	80 91 8c 01 	lds	r24, 0x018C
    1e4c:	80 62       	ori	r24, 0x20	; 32
    1e4e:	80 93 8c 01 	sts	0x018C, r24
    1e52:	05 c0       	rjmp	.+10     	; 0x1e5e <nrf24_interrupt_mask+0x5a>
	else
		register_new_value &= (~(1 << MASK_TX_DS));
    1e54:	80 91 8c 01 	lds	r24, 0x018C
    1e58:	8f 7d       	andi	r24, 0xDF	; 223
    1e5a:	80 93 8c 01 	sts	0x018C, r24
	if (max_rt_mask)
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	88 23       	and	r24, r24
    1e62:	31 f0       	breq	.+12     	; 0x1e70 <nrf24_interrupt_mask+0x6c>
		register_new_value |= (1 << MASK_MAX_RT);
    1e64:	80 91 8c 01 	lds	r24, 0x018C
    1e68:	80 61       	ori	r24, 0x10	; 16
    1e6a:	80 93 8c 01 	sts	0x018C, r24
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <nrf24_interrupt_mask+0x76>
	else
		register_new_value &= (~(1 << MASK_MAX_RT));
    1e70:	80 91 8c 01 	lds	r24, 0x018C
    1e74:	8f 7e       	andi	r24, 0xEF	; 239
    1e76:	80 93 8c 01 	sts	0x018C, r24

	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    1e7a:	2c e8       	ldi	r18, 0x8C	; 140
    1e7c:	31 e0       	ldi	r19, 0x01	; 1
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	b9 01       	movw	r22, r18
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <nrf24_crc_configuration>:

/*enabling or disabling crc in payload; setting crc encoding scheme between 1 or 2 bytes*/
void nrf24_crc_configuration(uint8_t crc_enable, uint8_t crc_encoding_scheme)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <nrf24_crc_configuration+0x6>
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	6a 83       	std	Y+2, r22	; 0x02
	nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
    1ea4:	2b e8       	ldi	r18, 0x8B	; 139
    1ea6:	31 e0       	ldi	r19, 0x01	; 1
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	b9 01       	movw	r22, r18
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
	if (crc_enable)
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	88 23       	and	r24, r24
    1eb8:	31 f0       	breq	.+12     	; 0x1ec6 <nrf24_crc_configuration+0x30>
		register_new_value = (register_current_value) | (1 << EN_CRC);
    1eba:	80 91 8b 01 	lds	r24, 0x018B
    1ebe:	88 60       	ori	r24, 0x08	; 8
    1ec0:	80 93 8c 01 	sts	0x018C, r24
    1ec4:	05 c0       	rjmp	.+10     	; 0x1ed0 <nrf24_crc_configuration+0x3a>
	else
		register_new_value &= (~(1 << EN_CRC));
    1ec6:	80 91 8c 01 	lds	r24, 0x018C
    1eca:	87 7f       	andi	r24, 0xF7	; 247
    1ecc:	80 93 8c 01 	sts	0x018C, r24
	if (crc_encoding_scheme == 2)
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	82 30       	cpi	r24, 0x02	; 2
    1ed4:	31 f4       	brne	.+12     	; 0x1ee2 <nrf24_crc_configuration+0x4c>
		register_new_value |= (1 << CRCO);
    1ed6:	80 91 8c 01 	lds	r24, 0x018C
    1eda:	84 60       	ori	r24, 0x04	; 4
    1edc:	80 93 8c 01 	sts	0x018C, r24
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <nrf24_crc_configuration+0x56>
	else
		register_new_value &= (~(1 << CRCO));
    1ee2:	80 91 8c 01 	lds	r24, 0x018C
    1ee6:	8b 7f       	andi	r24, 0xFB	; 251
    1ee8:	80 93 8c 01 	sts	0x018C, r24

	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    1eec:	2c e8       	ldi	r18, 0x8C	; 140
    1eee:	31 e0       	ldi	r19, 0x01	; 1
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	b9 01       	movw	r22, r18
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <nrf24_mode>:

/*mode selector: power down, standby i, standby ii, ptx, prx. used by nrf24_device function*/
void nrf24_mode(uint8_t mode)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <nrf24_mode+0x6>
    1f0c:	0f 92       	push	r0
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	89 83       	std	Y+1, r24	; 0x01
	nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
    1f14:	2b e8       	ldi	r18, 0x8B	; 139
    1f16:	31 e0       	ldi	r19, 0x01	; 1
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	0e 94 23 10 	call	0x2046	; 0x2046 <nrf24_read>
	switch (mode)
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	3b 83       	std	Y+3, r19	; 0x03
    1f2c:	2a 83       	std	Y+2, r18	; 0x02
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	9b 81       	ldd	r25, Y+3	; 0x03
    1f32:	82 30       	cpi	r24, 0x02	; 2
    1f34:	91 05       	cpc	r25, r1
    1f36:	c9 f1       	breq	.+114    	; 0x1faa <nrf24_mode+0xa4>
    1f38:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3c:	23 30       	cpi	r18, 0x03	; 3
    1f3e:	31 05       	cpc	r19, r1
    1f40:	54 f4       	brge	.+20     	; 0x1f56 <nrf24_mode+0x50>
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	9b 81       	ldd	r25, Y+3	; 0x03
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	91 f0       	breq	.+36     	; 0x1f6e <nrf24_mode+0x68>
    1f4a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f4c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f4e:	21 30       	cpi	r18, 0x01	; 1
    1f50:	31 05       	cpc	r19, r1
    1f52:	e1 f0       	breq	.+56     	; 0x1f8c <nrf24_mode+0x86>
    1f54:	59 c0       	rjmp	.+178    	; 0x2008 <nrf24_mode+0x102>
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	83 30       	cpi	r24, 0x03	; 3
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	a9 f1       	breq	.+106    	; 0x1fca <nrf24_mode+0xc4>
    1f60:	2a 81       	ldd	r18, Y+2	; 0x02
    1f62:	3b 81       	ldd	r19, Y+3	; 0x03
    1f64:	24 30       	cpi	r18, 0x04	; 4
    1f66:	31 05       	cpc	r19, r1
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <nrf24_mode+0x66>
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <nrf24_mode+0xe4>
    1f6c:	4d c0       	rjmp	.+154    	; 0x2008 <nrf24_mode+0x102>
	{
	case POWER_DOWN:
		nrf24_CE(CE_OFF);
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <nrf24_CE>
		register_new_value = (register_current_value) & (~(1 << PWR_UP));
    1f74:	80 91 8b 01 	lds	r24, 0x018B
    1f78:	8d 7f       	andi	r24, 0xFD	; 253
    1f7a:	80 93 8c 01 	sts	0x018C, r24
		delay_function(POWER_DOWN_DELAY);
    1f7e:	62 e0       	ldi	r22, 0x02	; 2
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <delay_function>
    1f8a:	4c c0       	rjmp	.+152    	; 0x2024 <nrf24_mode+0x11e>
		break;
	case STANDBYI:                                 /*standby I is defined by 'PWR_UP = 1' and 'CE pin LOW'*/
		nrf24_CE(CE_OFF);
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <nrf24_CE>
		register_new_value = (register_current_value) | (1 << PWR_UP);
    1f92:	80 91 8b 01 	lds	r24, 0x018B
    1f96:	82 60       	ori	r24, 0x02	; 2
    1f98:	80 93 8c 01 	sts	0x018C, r24
		delay_function(STANDBYI_DELAY);
    1f9c:	62 e0       	ldi	r22, 0x02	; 2
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <delay_function>
    1fa8:	3d c0       	rjmp	.+122    	; 0x2024 <nrf24_mode+0x11e>
		break;
	case STANDBYII:                                 /*standby ii is related to a ptx device*/
		nrf24_CE(CE_ON);
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <nrf24_CE>
		register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
    1fb0:	80 91 8b 01 	lds	r24, 0x018B
    1fb4:	8c 7f       	andi	r24, 0xFC	; 252
    1fb6:	82 60       	ori	r24, 0x02	; 2
    1fb8:	80 93 8c 01 	sts	0x018C, r24
		delay_function(STANDBYI_DELAY);
    1fbc:	62 e0       	ldi	r22, 0x02	; 2
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <delay_function>
    1fc8:	2d c0       	rjmp	.+90     	; 0x2024 <nrf24_mode+0x11e>
		break;
	case PTX:
		nrf24_CE(CE_ON);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <nrf24_CE>
		register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
    1fd0:	80 91 8b 01 	lds	r24, 0x018B
    1fd4:	8c 7f       	andi	r24, 0xFC	; 252
    1fd6:	82 60       	ori	r24, 0x02	; 2
    1fd8:	80 93 8c 01 	sts	0x018C, r24
		delay_function(STANDBYI_DELAY);
    1fdc:	62 e0       	ldi	r22, 0x02	; 2
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <delay_function>
    1fe8:	1d c0       	rjmp	.+58     	; 0x2024 <nrf24_mode+0x11e>
		break;
	case PRX:
		nrf24_CE(CE_ON);
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <nrf24_CE>
		register_new_value = (register_current_value) | (1 << PWR_UP) | (1 << PRIM_RX);
    1ff0:	80 91 8b 01 	lds	r24, 0x018B
    1ff4:	83 60       	ori	r24, 0x03	; 3
    1ff6:	80 93 8c 01 	sts	0x018C, r24
		delay_function(STANDBYI_DELAY);
    1ffa:	62 e0       	ldi	r22, 0x02	; 2
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <delay_function>
    2006:	0e c0       	rjmp	.+28     	; 0x2024 <nrf24_mode+0x11e>
		break;
	default:
		nrf24_CE(CE_OFF);
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <nrf24_CE>
		register_new_value = (register_current_value) & (~(1 << PWR_UP));
    200e:	80 91 8b 01 	lds	r24, 0x018B
    2012:	8d 7f       	andi	r24, 0xFD	; 253
    2014:	80 93 8c 01 	sts	0x018C, r24
		delay_function(POWER_DOWN_DELAY);
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <delay_function>
		break;
	}
	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    2024:	2c e8       	ldi	r18, 0x8C	; 140
    2026:	31 e0       	ldi	r19, 0x01	; 1
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	b9 01       	movw	r22, r18
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	0e 94 5d 10 	call	0x20ba	; 0x20ba <nrf24_write>
	current_mode = mode;
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	80 93 68 01 	sts	0x0168, r24
}
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <nrf24_read>:

/*reads the number of bytes (data_length) from the register in nrf24l01+ (address) and stores them inside an array (value),
  then closes the spi connection (spi_state = CLOSE) or leaves it open (spi_state = OPEN)*/
void nrf24_read(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <nrf24_read+0x6>
    204c:	00 d0       	rcall	.+0      	; 0x204e <nrf24_read+0x8>
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	7b 83       	std	Y+3, r23	; 0x03
    2058:	6a 83       	std	Y+2, r22	; 0x02
    205a:	4c 83       	std	Y+4, r20	; 0x04
    205c:	2d 83       	std	Y+5, r18	; 0x05
	nrf24_SPI(SPI_ON);
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
	SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	80 93 8a 01 	sts	0x018A, r24
	SPI_send_command(SPI_command);
    206a:	80 91 8a 01 	lds	r24, 0x018A
    206e:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
	SPI_command = NOP_CMD;
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	80 93 8a 01 	sts	0x018A, r24
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <nrf24_read+0x52>
	for (; data_length ; data_length--)
	{
		*value = SPI_send_command(SPI_command);
    207a:	80 91 8a 01 	lds	r24, 0x018A
    207e:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
    2082:	ea 81       	ldd	r30, Y+2	; 0x02
    2084:	fb 81       	ldd	r31, Y+3	; 0x03
    2086:	80 83       	st	Z, r24
		value++;
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	9b 81       	ldd	r25, Y+3	; 0x03
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	9b 83       	std	Y+3, r25	; 0x03
    2090:	8a 83       	std	Y+2, r24	; 0x02
{
	nrf24_SPI(SPI_ON);
	SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
	SPI_send_command(SPI_command);
	SPI_command = NOP_CMD;
	for (; data_length ; data_length--)
    2092:	8c 81       	ldd	r24, Y+4	; 0x04
    2094:	81 50       	subi	r24, 0x01	; 1
    2096:	8c 83       	std	Y+4, r24	; 0x04
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	88 23       	and	r24, r24
    209c:	71 f7       	brne	.-36     	; 0x207a <nrf24_read+0x34>
	{
		*value = SPI_send_command(SPI_command);
		value++;
	}
	if (spi_state == CLOSE)
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	88 23       	and	r24, r24
    20a2:	19 f4       	brne	.+6      	; 0x20aa <nrf24_read+0x64>
		nrf24_SPI(SPI_OFF);
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <nrf24_write>:

/*writes the number of bytes (data_length) from an array (value) inside registers in nrf24l01+ (address),
  then closes the spi connection (spi_state = CLOSE) or leaves it open (spi_state = OPEN)*/
void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <nrf24_write+0x6>
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <nrf24_write+0x8>
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	7b 83       	std	Y+3, r23	; 0x03
    20cc:	6a 83       	std	Y+2, r22	; 0x02
    20ce:	4c 83       	std	Y+4, r20	; 0x04
    20d0:	2d 83       	std	Y+5, r18	; 0x05
	nrf24_SPI(SPI_ON);
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
	SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	80 62       	ori	r24, 0x20	; 32
    20dc:	80 93 8a 01 	sts	0x018A, r24
	SPI_send_command(SPI_command);
    20e0:	80 91 8a 01 	lds	r24, 0x018A
    20e4:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
    20e8:	11 c0       	rjmp	.+34     	; 0x210c <nrf24_write+0x52>
	for (; data_length ; data_length--)
	{
		SPI_command = *value;
    20ea:	ea 81       	ldd	r30, Y+2	; 0x02
    20ec:	fb 81       	ldd	r31, Y+3	; 0x03
    20ee:	80 81       	ld	r24, Z
    20f0:	80 93 8a 01 	sts	0x018A, r24
		value++;
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	01 96       	adiw	r24, 0x01	; 1
    20fa:	9b 83       	std	Y+3, r25	; 0x03
    20fc:	8a 83       	std	Y+2, r24	; 0x02
		SPI_send_command(SPI_command);
    20fe:	80 91 8a 01 	lds	r24, 0x018A
    2102:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_send_command>
void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
{
	nrf24_SPI(SPI_ON);
	SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
	SPI_send_command(SPI_command);
	for (; data_length ; data_length--)
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	81 50       	subi	r24, 0x01	; 1
    210a:	8c 83       	std	Y+4, r24	; 0x04
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	88 23       	and	r24, r24
    2110:	61 f7       	brne	.-40     	; 0x20ea <nrf24_write+0x30>
	{
		SPI_command = *value;
		value++;
		SPI_send_command(SPI_command);
	}
	if (spi_state == CLOSE)
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	88 23       	and	r24, r24
    2116:	19 f4       	brne	.+6      	; 0x211e <nrf24_write+0x64>
		nrf24_SPI(SPI_OFF);
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	0e 94 a4 09 	call	0x1348	; 0x1348 <nrf24_SPI>
}
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <PORT_voidInit>:
#include"STD_TYPES.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
#include"PORT_interface.h"
  void PORT_voidInit(void){
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    DDRD=PORTD_DIR;
    2136:	ea e2       	ldi	r30, 0x2A	; 42
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	8e ed       	ldi	r24, 0xDE	; 222
    213c:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    213e:	e7 e2       	ldi	r30, 0x27	; 39
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	8f ef       	ldi	r24, 0xFF	; 255
    2144:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    2146:	e4 e2       	ldi	r30, 0x24	; 36
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	8b e2       	ldi	r24, 0x2B	; 43
    214c:	80 83       	st	Z, r24
    PORTD=PORTD_INIT_VALUE;
    214e:	eb e2       	ldi	r30, 0x2B	; 43
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	88 ea       	ldi	r24, 0xA8	; 168
    2154:	80 83       	st	Z, r24
    PORTC=PORTC_INIT_VALUE;
    2156:	e8 e2       	ldi	r30, 0x28	; 40
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VALUE;
    215c:	e5 e2       	ldi	r30, 0x25	; 37
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	80 83       	st	Z, r24
  }
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <SPI_VoidMasterInit>:
#include"SPI_config.h"
#include"SPI_private.h"
#include"SPI_register.h"


void SPI_VoidMasterInit(void){
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
	//select master
	SET_BIT(SPCR,SPCR_MSTR);
    2172:	ac e4       	ldi	r26, 0x4C	; 76
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ec e4       	ldi	r30, 0x4C	; 76
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	80 61       	ori	r24, 0x10	; 16
    217e:	8c 93       	st	X, r24
	//set the clock divide by 16
	SET_BIT(SPCR,SPCR_SPR0);
    2180:	ac e4       	ldi	r26, 0x4C	; 76
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	ec e4       	ldi	r30, 0x4C	; 76
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,SPCR_SPR1);
    218e:	ac e4       	ldi	r26, 0x4C	; 76
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	ec e4       	ldi	r30, 0x4C	; 76
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8d 7f       	andi	r24, 0xFD	; 253
    219a:	8c 93       	st	X, r24
	CLEAR_BIT(SPSR,SPSR_SPI2X);
    219c:	ad e4       	ldi	r26, 0x4D	; 77
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	ed e4       	ldi	r30, 0x4D	; 77
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	8e 7f       	andi	r24, 0xFE	; 254
    21a8:	8c 93       	st	X, r24
	//SPI enable
	SET_BIT(SPCR,SPCR_SPE);
    21aa:	ac e4       	ldi	r26, 0x4C	; 76
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	ec e4       	ldi	r30, 0x4C	; 76
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	80 64       	ori	r24, 0x40	; 64
    21b6:	8c 93       	st	X, r24
}
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <SPI_VoidSlaveInit>:
void SPI_VoidSlaveInit(void){
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
	//select slave
	CLEAR_BIT(SPCR,SPCR_MSTR);
    21c6:	ac e4       	ldi	r26, 0x4C	; 76
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	ec e4       	ldi	r30, 0x4C	; 76
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	8f 7e       	andi	r24, 0xEF	; 239
    21d2:	8c 93       	st	X, r24
	//SPI enable
	SET_BIT(SPCR,SPCR_SPE);
    21d4:	ac e4       	ldi	r26, 0x4C	; 76
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	ec e4       	ldi	r30, 0x4C	; 76
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	80 64       	ori	r24, 0x40	; 64
    21e0:	8c 93       	st	X, r24
}
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <SPI_u8Transceive>:
u8 SPI_u8Transceive(u8 Copy_u8SentData,u8* Copy_Pu8ReceviedData ){
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <SPI_u8Transceive+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <SPI_u8Transceive+0x8>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	8a 83       	std	Y+2, r24	; 0x02
    21f6:	7c 83       	std	Y+4, r23	; 0x04
    21f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorState=OK;
    21fa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8ReceviedData==NULL){
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	19 f4       	brne	.+6      	; 0x220a <SPI_u8Transceive+0x22>
		Local_u8ErorState=NULL_POINTER;
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	0f c0       	rjmp	.+30     	; 0x2228 <SPI_u8Transceive+0x40>
	}
	else {
		//send data
		SPDR=Copy_u8SentData;
    220a:	ee e4       	ldi	r30, 0x4E	; 78
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	80 83       	st	Z, r24
		//busy wating until the end of transmission flag is set
		while(GET_BIT(SPSR,SPSR_SPIF)==0);
    2212:	ed e4       	ldi	r30, 0x4D	; 77
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	88 23       	and	r24, r24
    221a:	dc f7       	brge	.-10     	; 0x2212 <SPI_u8Transceive+0x2a>
		//get the received data
		*Copy_Pu8ReceviedData=SPDR;
    221c:	ee e4       	ldi	r30, 0x4E	; 78
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	eb 81       	ldd	r30, Y+3	; 0x03
    2224:	fc 81       	ldd	r31, Y+4	; 0x04
    2226:	80 83       	st	Z, r24
	}
	return Local_u8ErorState;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
}
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <USART_voidinit>:
#include"USART_interface.h"
#include"USART_private.h"
#include"USART_config.h"
#include"USART_register.h"

void USART_voidinit(void){
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	0f 92       	push	r0
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
 u8 Local_u8UCSR0C=0;
    2242:	19 82       	std	Y+1, r1	; 0x01
	/*1 stop bit*/
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_USBS0);
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	87 7f       	andi	r24, 0xF7	; 247
    2248:	89 83       	std	Y+1, r24	; 0x01
    /*no parity*/
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_UPM00);
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	8f 7e       	andi	r24, 0xEF	; 239
    224e:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_UPM01);
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	8f 7d       	andi	r24, 0xDF	; 223
    2254:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_UMSEL00);
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	8f 7b       	andi	r24, 0xBF	; 191
    225a:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_UMSEL01);
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	8f 77       	andi	r24, 0x7F	; 127
    2260:	89 83       	std	Y+1, r24	; 0x01

    /*8 data bits*/
    SET_BIT(Local_u8UCSR0C,UCSR0C_UCSZ00);
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	82 60       	ori	r24, 0x02	; 2
    2266:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8UCSR0C,UCSR0C_UCSZ01);
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	84 60       	ori	r24, 0x04	; 4
    226c:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(UCSR0B,UCSR0B_UCSZ02);
    226e:	a1 ec       	ldi	r26, 0xC1	; 193
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e1 ec       	ldi	r30, 0xC1	; 193
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8b 7f       	andi	r24, 0xFB	; 251
    227a:	8c 93       	st	X, r24
    UCSR0C=Local_u8UCSR0C;
    227c:	e2 ec       	ldi	r30, 0xC2	; 194
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	80 83       	st	Z, r24
    CLEAR_BIT(UCSR0A,UCSR0A_U2X0);
    2284:	a0 ec       	ldi	r26, 0xC0	; 192
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e0 ec       	ldi	r30, 0xC0	; 192
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	8d 7f       	andi	r24, 0xFD	; 253
    2290:	8c 93       	st	X, r24
    /*4900BPS*/
    UBRR0=103;
    2292:	e4 ec       	ldi	r30, 0xC4	; 196
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	87 e6       	ldi	r24, 0x67	; 103
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    /*receive  enable*/
    SET_BIT(UCSR0B,UCSR0B_RXEN0);
    229e:	a1 ec       	ldi	r26, 0xC1	; 193
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e1 ec       	ldi	r30, 0xC1	; 193
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	80 61       	ori	r24, 0x10	; 16
    22aa:	8c 93       	st	X, r24
    /*transmit  enable*/
       SET_BIT(UCSR0B,UCSR0B_TXEN0);
    22ac:	a1 ec       	ldi	r26, 0xC1	; 193
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e1 ec       	ldi	r30, 0xC1	; 193
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	88 60       	ori	r24, 0x08	; 8
    22b8:	8c 93       	st	X, r24
}
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <USART_voidsenddata>:


void USART_voidsenddata(u8 copy_u8data){
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	0f 92       	push	r0
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSR0A,UCSR0A_UDRE0)==0);
    22ce:	e0 ec       	ldi	r30, 0xC0	; 192
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	82 95       	swap	r24
    22d6:	86 95       	lsr	r24
    22d8:	87 70       	andi	r24, 0x07	; 7
    22da:	88 2f       	mov	r24, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	81 70       	andi	r24, 0x01	; 1
    22e0:	90 70       	andi	r25, 0x00	; 0
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	a1 f3       	breq	.-24     	; 0x22ce <USART_voidsenddata+0xc>
	UDR0=copy_u8data;
    22e6:	e6 ec       	ldi	r30, 0xC6	; 198
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	80 83       	st	Z, r24
}
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <USART_voidreceivedata>:
u8 USART_voidreceivedata(void){
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSR0A,UCSR0A_RXC0)==0);
    22fe:	e0 ec       	ldi	r30, 0xC0	; 192
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	88 23       	and	r24, r24
    2306:	dc f7       	brge	.-10     	; 0x22fe <USART_voidreceivedata+0x8>
	return UDR0;
    2308:	e6 ec       	ldi	r30, 0xC6	; 198
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <main>:
#define TIME_GAP    500
#include "PORT_interface.h"
#include "DIO_interface.h"
uint8_t ascending_number = 0X00;

void main(void){
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	cf 57       	subi	r28, 0x7F	; 127
    2322:	d0 40       	sbci	r29, 0x00	; 0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    PORT_voidInit();
    232e:	0e 94 97 10 	call	0x212e	; 0x212e <PORT_voidInit>
	USART_voidinit();
    2332:	0e 94 1c 11 	call	0x2238	; 0x2238 <USART_voidinit>
	nrf24_device(TRANSMITTER, RESET);     //initializing nrf24l01+ as a transmitter using one simple function
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	0e 94 41 0c 	call	0x1882	; 0x1882 <nrf24_device>
	u8 DATA=3;
    233e:	fe 01       	movw	r30, r28
    2340:	e1 58       	subi	r30, 0x81	; 129
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	83 e0       	ldi	r24, 0x03	; 3
    2346:	80 83       	st	Z, r24
	while(1){
		 DATA=USART_voidreceivedata();
    2348:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <USART_voidreceivedata>
    234c:	fe 01       	movw	r30, r28
    234e:	e1 58       	subi	r30, 0x81	; 129
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 83       	st	Z, r24
		 USART_voidsenddata(DATA);
    2354:	fe 01       	movw	r30, r28
    2356:	e1 58       	subi	r30, 0x81	; 129
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 81       	ld	r24, Z
    235c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <USART_voidsenddata>
    2360:	fe 01       	movw	r30, r28
    2362:	e5 58       	subi	r30, 0x85	; 133
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	aa ef       	ldi	r26, 0xFA	; 250
    236c:	b3 e4       	ldi	r27, 0x43	; 67
    236e:	80 83       	st	Z, r24
    2370:	91 83       	std	Z+1, r25	; 0x01
    2372:	a2 83       	std	Z+2, r26	; 0x02
    2374:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2376:	8e 01       	movw	r16, r28
    2378:	09 58       	subi	r16, 0x89	; 137
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	fe 01       	movw	r30, r28
    237e:	e5 58       	subi	r30, 0x85	; 133
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a e7       	ldi	r20, 0x7A	; 122
    2390:	53 e4       	ldi	r21, 0x43	; 67
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	f8 01       	movw	r30, r16
    239c:	80 83       	st	Z, r24
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	a2 83       	std	Z+2, r26	; 0x02
    23a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23a4:	fe 01       	movw	r30, r28
    23a6:	e9 58       	subi	r30, 0x89	; 137
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	60 81       	ld	r22, Z
    23ac:	71 81       	ldd	r23, Z+1	; 0x01
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	44 f4       	brge	.+16     	; 0x23d2 <main+0xbe>
		__ticks = 1;
    23c2:	fe 01       	movw	r30, r28
    23c4:	eb 58       	subi	r30, 0x8B	; 139
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
    23d0:	64 c0       	rjmp	.+200    	; 0x249a <main+0x186>
	else if (__tmp > 65535)
    23d2:	fe 01       	movw	r30, r28
    23d4:	e9 58       	subi	r30, 0x89	; 137
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	60 81       	ld	r22, Z
    23da:	71 81       	ldd	r23, Z+1	; 0x01
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	57 e4       	ldi	r21, 0x47	; 71
    23e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	0c f0       	brlt	.+2      	; 0x23f2 <main+0xde>
    23f0:	43 c0       	rjmp	.+134    	; 0x2478 <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	fe 01       	movw	r30, r28
    23f4:	e5 58       	subi	r30, 0x85	; 133
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8e 01       	movw	r16, r28
    2412:	0b 58       	subi	r16, 0x8B	; 139
    2414:	1f 4f       	sbci	r17, 0xFF	; 255
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	f8 01       	movw	r30, r16
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
    2428:	1f c0       	rjmp	.+62     	; 0x2468 <main+0x154>
    242a:	fe 01       	movw	r30, r28
    242c:	ed 58       	subi	r30, 0x8D	; 141
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	89 e1       	ldi	r24, 0x19	; 25
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
    2438:	fe 01       	movw	r30, r28
    243a:	ed 58       	subi	r30, 0x8D	; 141
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <main+0x12e>
    2446:	fe 01       	movw	r30, r28
    2448:	ed 58       	subi	r30, 0x8D	; 141
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	de 01       	movw	r26, r28
    2452:	ab 58       	subi	r26, 0x8B	; 139
    2454:	bf 4f       	sbci	r27, 0xFF	; 255
    2456:	fe 01       	movw	r30, r28
    2458:	eb 58       	subi	r30, 0x8B	; 139
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	91 81       	ldd	r25, Z+1	; 0x01
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	11 96       	adiw	r26, 0x01	; 1
    2464:	9c 93       	st	X, r25
    2466:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2468:	fe 01       	movw	r30, r28
    246a:	eb 58       	subi	r30, 0x8B	; 139
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 81       	ld	r24, Z
    2470:	91 81       	ldd	r25, Z+1	; 0x01
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	d1 f6       	brne	.-76     	; 0x242a <main+0x116>
    2476:	d3 c2       	rjmp	.+1446   	; 0x2a1e <main+0x70a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	8e 01       	movw	r16, r28
    247a:	0b 58       	subi	r16, 0x8B	; 139
    247c:	1f 4f       	sbci	r17, 0xFF	; 255
    247e:	fe 01       	movw	r30, r28
    2480:	e9 58       	subi	r30, 0x89	; 137
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	f8 01       	movw	r30, r16
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	80 83       	st	Z, r24
    249a:	de 01       	movw	r26, r28
    249c:	af 58       	subi	r26, 0x8F	; 143
    249e:	bf 4f       	sbci	r27, 0xFF	; 255
    24a0:	fe 01       	movw	r30, r28
    24a2:	eb 58       	subi	r30, 0x8B	; 139
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 81       	ld	r24, Z
    24a8:	91 81       	ldd	r25, Z+1	; 0x01
    24aa:	11 96       	adiw	r26, 0x01	; 1
    24ac:	9c 93       	st	X, r25
    24ae:	8e 93       	st	-X, r24
    24b0:	fe 01       	movw	r30, r28
    24b2:	ef 58       	subi	r30, 0x8F	; 143
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	80 81       	ld	r24, Z
    24b8:	91 81       	ldd	r25, Z+1	; 0x01
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <main+0x1a6>
    24be:	fe 01       	movw	r30, r28
    24c0:	ef 58       	subi	r30, 0x8F	; 143
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
    24c8:	aa c2       	rjmp	.+1364   	; 0x2a1e <main+0x70a>

		_delay_ms(TIME_GAP);
		while(nrf24_transmit(&DATA, 1, NO_ACK_MODE) == TRANSMIT_FAIL){
			USART_voidsenddata('F');
    24ca:	86 e4       	ldi	r24, 0x46	; 70
    24cc:	0e 94 61 11 	call	0x22c2	; 0x22c2 <USART_voidsenddata>
    24d0:	fe 01       	movw	r30, r28
    24d2:	e3 59       	subi	r30, 0x93	; 147
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a0 e2       	ldi	r26, 0x20	; 32
    24dc:	b1 e4       	ldi	r27, 0x41	; 65
    24de:	80 83       	st	Z, r24
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	a2 83       	std	Z+2, r26	; 0x02
    24e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	8e 01       	movw	r16, r28
    24e8:	07 59       	subi	r16, 0x97	; 151
    24ea:	1f 4f       	sbci	r17, 0xFF	; 255
    24ec:	fe 01       	movw	r30, r28
    24ee:	e3 59       	subi	r30, 0x93	; 147
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4a e7       	ldi	r20, 0x7A	; 122
    2500:	53 e4       	ldi	r21, 0x43	; 67
    2502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	f8 01       	movw	r30, r16
    250c:	80 83       	st	Z, r24
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	a2 83       	std	Z+2, r26	; 0x02
    2512:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2514:	fe 01       	movw	r30, r28
    2516:	e7 59       	subi	r30, 0x97	; 151
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	44 f4       	brge	.+16     	; 0x2542 <main+0x22e>
		__ticks = 1;
    2532:	fe 01       	movw	r30, r28
    2534:	e9 59       	subi	r30, 0x99	; 153
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	80 83       	st	Z, r24
    2540:	64 c0       	rjmp	.+200    	; 0x260a <main+0x2f6>
	else if (__tmp > 65535)
    2542:	fe 01       	movw	r30, r28
    2544:	e7 59       	subi	r30, 0x97	; 151
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	0c f0       	brlt	.+2      	; 0x2562 <main+0x24e>
    2560:	43 c0       	rjmp	.+134    	; 0x25e8 <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2562:	fe 01       	movw	r30, r28
    2564:	e3 59       	subi	r30, 0x93	; 147
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e2       	ldi	r20, 0x20	; 32
    2576:	51 e4       	ldi	r21, 0x41	; 65
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8e 01       	movw	r16, r28
    2582:	09 59       	subi	r16, 0x99	; 153
    2584:	1f 4f       	sbci	r17, 0xFF	; 255
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	f8 01       	movw	r30, r16
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	80 83       	st	Z, r24
    2598:	1f c0       	rjmp	.+62     	; 0x25d8 <main+0x2c4>
    259a:	fe 01       	movw	r30, r28
    259c:	eb 59       	subi	r30, 0x9B	; 155
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	89 e1       	ldi	r24, 0x19	; 25
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	91 83       	std	Z+1, r25	; 0x01
    25a6:	80 83       	st	Z, r24
    25a8:	fe 01       	movw	r30, r28
    25aa:	eb 59       	subi	r30, 0x9B	; 155
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <main+0x29e>
    25b6:	fe 01       	movw	r30, r28
    25b8:	eb 59       	subi	r30, 0x9B	; 155
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	de 01       	movw	r26, r28
    25c2:	a9 59       	subi	r26, 0x99	; 153
    25c4:	bf 4f       	sbci	r27, 0xFF	; 255
    25c6:	fe 01       	movw	r30, r28
    25c8:	e9 59       	subi	r30, 0x99	; 153
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	11 96       	adiw	r26, 0x01	; 1
    25d4:	9c 93       	st	X, r25
    25d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	fe 01       	movw	r30, r28
    25da:	e9 59       	subi	r30, 0x99	; 153
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	d1 f6       	brne	.-76     	; 0x259a <main+0x286>
    25e6:	27 c0       	rjmp	.+78     	; 0x2636 <main+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	8e 01       	movw	r16, r28
    25ea:	09 59       	subi	r16, 0x99	; 153
    25ec:	1f 4f       	sbci	r17, 0xFF	; 255
    25ee:	fe 01       	movw	r30, r28
    25f0:	e7 59       	subi	r30, 0x97	; 151
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	f8 01       	movw	r30, r16
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	80 83       	st	Z, r24
    260a:	de 01       	movw	r26, r28
    260c:	ad 59       	subi	r26, 0x9D	; 157
    260e:	bf 4f       	sbci	r27, 0xFF	; 255
    2610:	fe 01       	movw	r30, r28
    2612:	e9 59       	subi	r30, 0x99	; 153
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 81       	ld	r24, Z
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	8d 93       	st	X+, r24
    261c:	9c 93       	st	X, r25
    261e:	fe 01       	movw	r30, r28
    2620:	ed 59       	subi	r30, 0x9D	; 157
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <main+0x314>
    262c:	fe 01       	movw	r30, r28
    262e:	ed 59       	subi	r30, 0x9D	; 157
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
			_delay_ms(10);
			USART_voidsenddata('a');
    2636:	81 e6       	ldi	r24, 0x61	; 97
    2638:	0e 94 61 11 	call	0x22c2	; 0x22c2 <USART_voidsenddata>
    263c:	fe 01       	movw	r30, r28
    263e:	e1 5a       	subi	r30, 0xA1	; 161
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a0 e2       	ldi	r26, 0x20	; 32
    2648:	b1 e4       	ldi	r27, 0x41	; 65
    264a:	80 83       	st	Z, r24
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	a2 83       	std	Z+2, r26	; 0x02
    2650:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2652:	8e 01       	movw	r16, r28
    2654:	05 5a       	subi	r16, 0xA5	; 165
    2656:	1f 4f       	sbci	r17, 0xFF	; 255
    2658:	fe 01       	movw	r30, r28
    265a:	e1 5a       	subi	r30, 0xA1	; 161
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	60 81       	ld	r22, Z
    2660:	71 81       	ldd	r23, Z+1	; 0x01
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	53 e4       	ldi	r21, 0x43	; 67
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	f8 01       	movw	r30, r16
    2678:	80 83       	st	Z, r24
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	a2 83       	std	Z+2, r26	; 0x02
    267e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2680:	fe 01       	movw	r30, r28
    2682:	e5 5a       	subi	r30, 0xA5	; 165
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    269a:	88 23       	and	r24, r24
    269c:	44 f4       	brge	.+16     	; 0x26ae <main+0x39a>
		__ticks = 1;
    269e:	fe 01       	movw	r30, r28
    26a0:	e7 5a       	subi	r30, 0xA7	; 167
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
    26ac:	64 c0       	rjmp	.+200    	; 0x2776 <main+0x462>
	else if (__tmp > 65535)
    26ae:	fe 01       	movw	r30, r28
    26b0:	e5 5a       	subi	r30, 0xA5	; 165
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	3f ef       	ldi	r19, 0xFF	; 255
    26c0:	4f e7       	ldi	r20, 0x7F	; 127
    26c2:	57 e4       	ldi	r21, 0x47	; 71
    26c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c8:	18 16       	cp	r1, r24
    26ca:	0c f0       	brlt	.+2      	; 0x26ce <main+0x3ba>
    26cc:	43 c0       	rjmp	.+134    	; 0x2754 <main+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ce:	fe 01       	movw	r30, r28
    26d0:	e1 5a       	subi	r30, 0xA1	; 161
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8e 01       	movw	r16, r28
    26ee:	07 5a       	subi	r16, 0xA7	; 167
    26f0:	1f 4f       	sbci	r17, 0xFF	; 255
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	f8 01       	movw	r30, r16
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	80 83       	st	Z, r24
    2704:	1f c0       	rjmp	.+62     	; 0x2744 <main+0x430>
    2706:	fe 01       	movw	r30, r28
    2708:	e9 5a       	subi	r30, 0xA9	; 169
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	89 e1       	ldi	r24, 0x19	; 25
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	80 83       	st	Z, r24
    2714:	fe 01       	movw	r30, r28
    2716:	e9 5a       	subi	r30, 0xA9	; 169
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 81       	ld	r24, Z
    271c:	91 81       	ldd	r25, Z+1	; 0x01
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <main+0x40a>
    2722:	fe 01       	movw	r30, r28
    2724:	e9 5a       	subi	r30, 0xA9	; 169
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272c:	de 01       	movw	r26, r28
    272e:	a7 5a       	subi	r26, 0xA7	; 167
    2730:	bf 4f       	sbci	r27, 0xFF	; 255
    2732:	fe 01       	movw	r30, r28
    2734:	e7 5a       	subi	r30, 0xA7	; 167
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	11 96       	adiw	r26, 0x01	; 1
    2740:	9c 93       	st	X, r25
    2742:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2744:	fe 01       	movw	r30, r28
    2746:	e7 5a       	subi	r30, 0xA7	; 167
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	d1 f6       	brne	.-76     	; 0x2706 <main+0x3f2>
    2752:	27 c0       	rjmp	.+78     	; 0x27a2 <main+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2754:	8e 01       	movw	r16, r28
    2756:	07 5a       	subi	r16, 0xA7	; 167
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	fe 01       	movw	r30, r28
    275c:	e5 5a       	subi	r30, 0xA5	; 165
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	f8 01       	movw	r30, r16
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
    2776:	de 01       	movw	r26, r28
    2778:	ab 5a       	subi	r26, 0xAB	; 171
    277a:	bf 4f       	sbci	r27, 0xFF	; 255
    277c:	fe 01       	movw	r30, r28
    277e:	e7 5a       	subi	r30, 0xA7	; 167
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	8d 93       	st	X+, r24
    2788:	9c 93       	st	X, r25
    278a:	fe 01       	movw	r30, r28
    278c:	eb 5a       	subi	r30, 0xAB	; 171
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <main+0x480>
    2798:	fe 01       	movw	r30, r28
    279a:	eb 5a       	subi	r30, 0xAB	; 171
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	80 83       	st	Z, r24
			_delay_ms(10);
			USART_voidsenddata('i');
    27a2:	89 e6       	ldi	r24, 0x69	; 105
    27a4:	0e 94 61 11 	call	0x22c2	; 0x22c2 <USART_voidsenddata>
    27a8:	fe 01       	movw	r30, r28
    27aa:	ef 5a       	subi	r30, 0xAF	; 175
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	a0 e2       	ldi	r26, 0x20	; 32
    27b4:	b1 e4       	ldi	r27, 0x41	; 65
    27b6:	80 83       	st	Z, r24
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	a2 83       	std	Z+2, r26	; 0x02
    27bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27be:	8e 01       	movw	r16, r28
    27c0:	03 5b       	subi	r16, 0xB3	; 179
    27c2:	1f 4f       	sbci	r17, 0xFF	; 255
    27c4:	fe 01       	movw	r30, r28
    27c6:	ef 5a       	subi	r30, 0xAF	; 175
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4a e7       	ldi	r20, 0x7A	; 122
    27d8:	53 e4       	ldi	r21, 0x43	; 67
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	f8 01       	movw	r30, r16
    27e4:	80 83       	st	Z, r24
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	a2 83       	std	Z+2, r26	; 0x02
    27ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e3 5b       	subi	r30, 0xB3	; 179
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	44 f4       	brge	.+16     	; 0x281a <main+0x506>
		__ticks = 1;
    280a:	fe 01       	movw	r30, r28
    280c:	e5 5b       	subi	r30, 0xB5	; 181
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	80 83       	st	Z, r24
    2818:	64 c0       	rjmp	.+200    	; 0x28e2 <main+0x5ce>
	else if (__tmp > 65535)
    281a:	fe 01       	movw	r30, r28
    281c:	e3 5b       	subi	r30, 0xB3	; 179
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	3f ef       	ldi	r19, 0xFF	; 255
    282c:	4f e7       	ldi	r20, 0x7F	; 127
    282e:	57 e4       	ldi	r21, 0x47	; 71
    2830:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2834:	18 16       	cp	r1, r24
    2836:	0c f0       	brlt	.+2      	; 0x283a <main+0x526>
    2838:	43 c0       	rjmp	.+134    	; 0x28c0 <main+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283a:	fe 01       	movw	r30, r28
    283c:	ef 5a       	subi	r30, 0xAF	; 175
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	60 81       	ld	r22, Z
    2842:	71 81       	ldd	r23, Z+1	; 0x01
    2844:	82 81       	ldd	r24, Z+2	; 0x02
    2846:	93 81       	ldd	r25, Z+3	; 0x03
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e2       	ldi	r20, 0x20	; 32
    284e:	51 e4       	ldi	r21, 0x41	; 65
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8e 01       	movw	r16, r28
    285a:	05 5b       	subi	r16, 0xB5	; 181
    285c:	1f 4f       	sbci	r17, 0xFF	; 255
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	f8 01       	movw	r30, r16
    286c:	91 83       	std	Z+1, r25	; 0x01
    286e:	80 83       	st	Z, r24
    2870:	1f c0       	rjmp	.+62     	; 0x28b0 <main+0x59c>
    2872:	fe 01       	movw	r30, r28
    2874:	e7 5b       	subi	r30, 0xB7	; 183
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	89 e1       	ldi	r24, 0x19	; 25
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	fe 01       	movw	r30, r28
    2882:	e7 5b       	subi	r30, 0xB7	; 183
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <main+0x576>
    288e:	fe 01       	movw	r30, r28
    2890:	e7 5b       	subi	r30, 0xB7	; 183
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2898:	de 01       	movw	r26, r28
    289a:	a5 5b       	subi	r26, 0xB5	; 181
    289c:	bf 4f       	sbci	r27, 0xFF	; 255
    289e:	fe 01       	movw	r30, r28
    28a0:	e5 5b       	subi	r30, 0xB5	; 181
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	11 96       	adiw	r26, 0x01	; 1
    28ac:	9c 93       	st	X, r25
    28ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b0:	fe 01       	movw	r30, r28
    28b2:	e5 5b       	subi	r30, 0xB5	; 181
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	d1 f6       	brne	.-76     	; 0x2872 <main+0x55e>
    28be:	27 c0       	rjmp	.+78     	; 0x290e <main+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	8e 01       	movw	r16, r28
    28c2:	05 5b       	subi	r16, 0xB5	; 181
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	fe 01       	movw	r30, r28
    28c8:	e3 5b       	subi	r30, 0xB3	; 179
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	f8 01       	movw	r30, r16
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	de 01       	movw	r26, r28
    28e4:	a9 5b       	subi	r26, 0xB9	; 185
    28e6:	bf 4f       	sbci	r27, 0xFF	; 255
    28e8:	fe 01       	movw	r30, r28
    28ea:	e5 5b       	subi	r30, 0xB5	; 181
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	8d 93       	st	X+, r24
    28f4:	9c 93       	st	X, r25
    28f6:	fe 01       	movw	r30, r28
    28f8:	e9 5b       	subi	r30, 0xB9	; 185
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <main+0x5ec>
    2904:	fe 01       	movw	r30, r28
    2906:	e9 5b       	subi	r30, 0xB9	; 185
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
			_delay_ms(10);
			USART_voidsenddata('l');
    290e:	8c e6       	ldi	r24, 0x6C	; 108
    2910:	0e 94 61 11 	call	0x22c2	; 0x22c2 <USART_voidsenddata>
    2914:	fe 01       	movw	r30, r28
    2916:	ed 5b       	subi	r30, 0xBD	; 189
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 e2       	ldi	r26, 0x20	; 32
    2920:	b1 e4       	ldi	r27, 0x41	; 65
    2922:	80 83       	st	Z, r24
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	a2 83       	std	Z+2, r26	; 0x02
    2928:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292a:	8e 01       	movw	r16, r28
    292c:	01 5c       	subi	r16, 0xC1	; 193
    292e:	1f 4f       	sbci	r17, 0xFF	; 255
    2930:	fe 01       	movw	r30, r28
    2932:	ed 5b       	subi	r30, 0xBD	; 189
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	4a e7       	ldi	r20, 0x7A	; 122
    2944:	53 e4       	ldi	r21, 0x43	; 67
    2946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	f8 01       	movw	r30, r16
    2950:	80 83       	st	Z, r24
    2952:	91 83       	std	Z+1, r25	; 0x01
    2954:	a2 83       	std	Z+2, r26	; 0x02
    2956:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2958:	fe 01       	movw	r30, r28
    295a:	ff 96       	adiw	r30, 0x3f	; 63
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	2c f4       	brge	.+10     	; 0x297e <main+0x66a>
		__ticks = 1;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9e af       	std	Y+62, r25	; 0x3e
    297a:	8d af       	std	Y+61, r24	; 0x3d
    297c:	46 c0       	rjmp	.+140    	; 0x2a0a <main+0x6f6>
	else if (__tmp > 65535)
    297e:	fe 01       	movw	r30, r28
    2980:	ff 96       	adiw	r30, 0x3f	; 63
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	3f ef       	ldi	r19, 0xFF	; 255
    298e:	4f e7       	ldi	r20, 0x7F	; 127
    2990:	57 e4       	ldi	r21, 0x47	; 71
    2992:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2996:	18 16       	cp	r1, r24
    2998:	64 f5       	brge	.+88     	; 0x29f2 <main+0x6de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299a:	fe 01       	movw	r30, r28
    299c:	ed 5b       	subi	r30, 0xBD	; 189
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	60 81       	ld	r22, Z
    29a2:	71 81       	ldd	r23, Z+1	; 0x01
    29a4:	82 81       	ldd	r24, Z+2	; 0x02
    29a6:	93 81       	ldd	r25, Z+3	; 0x03
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e2       	ldi	r20, 0x20	; 32
    29ae:	51 e4       	ldi	r21, 0x41	; 65
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9e af       	std	Y+62, r25	; 0x3e
    29c6:	8d af       	std	Y+61, r24	; 0x3d
    29c8:	0f c0       	rjmp	.+30     	; 0x29e8 <main+0x6d4>
    29ca:	89 e1       	ldi	r24, 0x19	; 25
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	9c af       	std	Y+60, r25	; 0x3c
    29d0:	8b af       	std	Y+59, r24	; 0x3b
    29d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    29d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <main+0x6c2>
    29da:	9c af       	std	Y+60, r25	; 0x3c
    29dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29de:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	9e af       	std	Y+62, r25	; 0x3e
    29e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    29ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	69 f7       	brne	.-38     	; 0x29ca <main+0x6b6>
    29f0:	16 c0       	rjmp	.+44     	; 0x2a1e <main+0x70a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f2:	fe 01       	movw	r30, r28
    29f4:	ff 96       	adiw	r30, 0x3f	; 63
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9e af       	std	Y+62, r25	; 0x3e
    2a08:	8d af       	std	Y+61, r24	; 0x3d
    2a0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a0e:	9a af       	std	Y+58, r25	; 0x3a
    2a10:	89 af       	std	Y+57, r24	; 0x39
    2a12:	89 ad       	ldd	r24, Y+57	; 0x39
    2a14:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <main+0x702>
    2a1a:	9a af       	std	Y+58, r25	; 0x3a
    2a1c:	89 af       	std	Y+57, r24	; 0x39
	while(1){
		 DATA=USART_voidreceivedata();
		 USART_voidsenddata(DATA);

		_delay_ms(TIME_GAP);
		while(nrf24_transmit(&DATA, 1, NO_ACK_MODE) == TRANSMIT_FAIL){
    2a1e:	ce 01       	movw	r24, r28
    2a20:	81 58       	subi	r24, 0x81	; 129
    2a22:	9f 4f       	sbci	r25, 0xFF	; 255
    2a24:	61 e0       	ldi	r22, 0x01	; 1
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 22 0a 	call	0x1444	; 0x1444 <nrf24_transmit>
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <main+0x71e>
    2a30:	4c cd       	rjmp	.-1384   	; 0x24ca <main+0x1b6>
			USART_voidsenddata('i');
			_delay_ms(10);
			USART_voidsenddata('l');
			_delay_ms(10);
		}//wait until payload is loaded into TX buffer
		while(nrf24_transmit_status() == TRANSMIT_IN_PROGRESS);
    2a32:	0e 94 96 0a 	call	0x152c	; 0x152c <nrf24_transmit_status>
    2a36:	88 23       	and	r24, r24
    2a38:	e1 f3       	breq	.-8      	; 0x2a32 <main+0x71e>
		USART_voidsenddata('S');
    2a3a:	83 e5       	ldi	r24, 0x53	; 83
    2a3c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <USART_voidsenddata>
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a0 e2       	ldi	r26, 0x20	; 32
    2a46:	b1 e4       	ldi	r27, 0x41	; 65
    2a48:	8d ab       	std	Y+53, r24	; 0x35
    2a4a:	9e ab       	std	Y+54, r25	; 0x36
    2a4c:	af ab       	std	Y+55, r26	; 0x37
    2a4e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	6d a9       	ldd	r22, Y+53	; 0x35
    2a52:	7e a9       	ldd	r23, Y+54	; 0x36
    2a54:	8f a9       	ldd	r24, Y+55	; 0x37
    2a56:	98 ad       	ldd	r25, Y+56	; 0x38
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4a e7       	ldi	r20, 0x7A	; 122
    2a5e:	53 e4       	ldi	r21, 0x43	; 67
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	89 ab       	std	Y+49, r24	; 0x31
    2a6a:	9a ab       	std	Y+50, r25	; 0x32
    2a6c:	ab ab       	std	Y+51, r26	; 0x33
    2a6e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a70:	69 a9       	ldd	r22, Y+49	; 0x31
    2a72:	7a a9       	ldd	r23, Y+50	; 0x32
    2a74:	8b a9       	ldd	r24, Y+51	; 0x33
    2a76:	9c a9       	ldd	r25, Y+52	; 0x34
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e8       	ldi	r20, 0x80	; 128
    2a7e:	5f e3       	ldi	r21, 0x3F	; 63
    2a80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a84:	88 23       	and	r24, r24
    2a86:	2c f4       	brge	.+10     	; 0x2a92 <main+0x77e>
		__ticks = 1;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	98 ab       	std	Y+48, r25	; 0x30
    2a8e:	8f a7       	std	Y+47, r24	; 0x2f
    2a90:	3f c0       	rjmp	.+126    	; 0x2b10 <main+0x7fc>
	else if (__tmp > 65535)
    2a92:	69 a9       	ldd	r22, Y+49	; 0x31
    2a94:	7a a9       	ldd	r23, Y+50	; 0x32
    2a96:	8b a9       	ldd	r24, Y+51	; 0x33
    2a98:	9c a9       	ldd	r25, Y+52	; 0x34
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	3f ef       	ldi	r19, 0xFF	; 255
    2a9e:	4f e7       	ldi	r20, 0x7F	; 127
    2aa0:	57 e4       	ldi	r21, 0x47	; 71
    2aa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa6:	18 16       	cp	r1, r24
    2aa8:	4c f5       	brge	.+82     	; 0x2afc <main+0x7e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aaa:	6d a9       	ldd	r22, Y+53	; 0x35
    2aac:	7e a9       	ldd	r23, Y+54	; 0x36
    2aae:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e2       	ldi	r20, 0x20	; 32
    2ab8:	51 e4       	ldi	r21, 0x41	; 65
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	98 ab       	std	Y+48, r25	; 0x30
    2ad0:	8f a7       	std	Y+47, r24	; 0x2f
    2ad2:	0f c0       	rjmp	.+30     	; 0x2af2 <main+0x7de>
    2ad4:	89 e1       	ldi	r24, 0x19	; 25
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e a7       	std	Y+46, r25	; 0x2e
    2ada:	8d a7       	std	Y+45, r24	; 0x2d
    2adc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ade:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <main+0x7cc>
    2ae4:	9e a7       	std	Y+46, r25	; 0x2e
    2ae6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aea:	98 a9       	ldd	r25, Y+48	; 0x30
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	98 ab       	std	Y+48, r25	; 0x30
    2af0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af4:	98 a9       	ldd	r25, Y+48	; 0x30
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	69 f7       	brne	.-38     	; 0x2ad4 <main+0x7c0>
    2afa:	14 c0       	rjmp	.+40     	; 0x2b24 <main+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afc:	69 a9       	ldd	r22, Y+49	; 0x31
    2afe:	7a a9       	ldd	r23, Y+50	; 0x32
    2b00:	8b a9       	ldd	r24, Y+51	; 0x33
    2b02:	9c a9       	ldd	r25, Y+52	; 0x34
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	98 ab       	std	Y+48, r25	; 0x30
    2b0e:	8f a7       	std	Y+47, r24	; 0x2f
    2b10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b12:	98 a9       	ldd	r25, Y+48	; 0x30
    2b14:	9c a7       	std	Y+44, r25	; 0x2c
    2b16:	8b a7       	std	Y+43, r24	; 0x2b
    2b18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <main+0x808>
    2b20:	9c a7       	std	Y+44, r25	; 0x2c
    2b22:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		USART_voidsenddata('E');
    2b24:	85 e4       	ldi	r24, 0x45	; 69
    2b26:	0e 94 61 11 	call	0x22c2	; 0x22c2 <USART_voidsenddata>
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	a0 e2       	ldi	r26, 0x20	; 32
    2b30:	b1 e4       	ldi	r27, 0x41	; 65
    2b32:	8f a3       	std	Y+39, r24	; 0x27
    2b34:	98 a7       	std	Y+40, r25	; 0x28
    2b36:	a9 a7       	std	Y+41, r26	; 0x29
    2b38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b3c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b3e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b40:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	4a e7       	ldi	r20, 0x7A	; 122
    2b48:	53 e4       	ldi	r21, 0x43	; 67
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	8b a3       	std	Y+35, r24	; 0x23
    2b54:	9c a3       	std	Y+36, r25	; 0x24
    2b56:	ad a3       	std	Y+37, r26	; 0x25
    2b58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b60:	9e a1       	ldd	r25, Y+38	; 0x26
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e8       	ldi	r20, 0x80	; 128
    2b68:	5f e3       	ldi	r21, 0x3F	; 63
    2b6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b6e:	88 23       	and	r24, r24
    2b70:	2c f4       	brge	.+10     	; 0x2b7c <main+0x868>
		__ticks = 1;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	9a a3       	std	Y+34, r25	; 0x22
    2b78:	89 a3       	std	Y+33, r24	; 0x21
    2b7a:	3f c0       	rjmp	.+126    	; 0x2bfa <main+0x8e6>
	else if (__tmp > 65535)
    2b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b80:	8d a1       	ldd	r24, Y+37	; 0x25
    2b82:	9e a1       	ldd	r25, Y+38	; 0x26
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	3f ef       	ldi	r19, 0xFF	; 255
    2b88:	4f e7       	ldi	r20, 0x7F	; 127
    2b8a:	57 e4       	ldi	r21, 0x47	; 71
    2b8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b90:	18 16       	cp	r1, r24
    2b92:	4c f5       	brge	.+82     	; 0x2be6 <main+0x8d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b94:	6f a1       	ldd	r22, Y+39	; 0x27
    2b96:	78 a5       	ldd	r23, Y+40	; 0x28
    2b98:	89 a5       	ldd	r24, Y+41	; 0x29
    2b9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e2       	ldi	r20, 0x20	; 32
    2ba2:	51 e4       	ldi	r21, 0x41	; 65
    2ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	bc 01       	movw	r22, r24
    2bae:	cd 01       	movw	r24, r26
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9a a3       	std	Y+34, r25	; 0x22
    2bba:	89 a3       	std	Y+33, r24	; 0x21
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <main+0x8c8>
    2bbe:	89 e1       	ldi	r24, 0x19	; 25
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	98 a3       	std	Y+32, r25	; 0x20
    2bc4:	8f 8f       	std	Y+31, r24	; 0x1f
    2bc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bc8:	98 a1       	ldd	r25, Y+32	; 0x20
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <main+0x8b6>
    2bce:	98 a3       	std	Y+32, r25	; 0x20
    2bd0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd4:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	9a a3       	std	Y+34, r25	; 0x22
    2bda:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bdc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bde:	9a a1       	ldd	r25, Y+34	; 0x22
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	69 f7       	brne	.-38     	; 0x2bbe <main+0x8aa>
    2be4:	14 c0       	rjmp	.+40     	; 0x2c0e <main+0x8fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be6:	6b a1       	ldd	r22, Y+35	; 0x23
    2be8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bea:	8d a1       	ldd	r24, Y+37	; 0x25
    2bec:	9e a1       	ldd	r25, Y+38	; 0x26
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9a a3       	std	Y+34, r25	; 0x22
    2bf8:	89 a3       	std	Y+33, r24	; 0x21
    2bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfe:	9e 8f       	std	Y+30, r25	; 0x1e
    2c00:	8d 8f       	std	Y+29, r24	; 0x1d
    2c02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <main+0x8f2>
    2c0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		USART_voidsenddata('N');
    2c0e:	8e e4       	ldi	r24, 0x4E	; 78
    2c10:	0e 94 61 11 	call	0x22c2	; 0x22c2 <USART_voidsenddata>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	a0 e2       	ldi	r26, 0x20	; 32
    2c1a:	b1 e4       	ldi	r27, 0x41	; 65
    2c1c:	89 8f       	std	Y+25, r24	; 0x19
    2c1e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c20:	ab 8f       	std	Y+27, r26	; 0x1b
    2c22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c24:	69 8d       	ldd	r22, Y+25	; 0x19
    2c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	4a e7       	ldi	r20, 0x7A	; 122
    2c32:	53 e4       	ldi	r21, 0x43	; 67
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	8d 8b       	std	Y+21, r24	; 0x15
    2c3e:	9e 8b       	std	Y+22, r25	; 0x16
    2c40:	af 8b       	std	Y+23, r26	; 0x17
    2c42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c44:	6d 89       	ldd	r22, Y+21	; 0x15
    2c46:	7e 89       	ldd	r23, Y+22	; 0x16
    2c48:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e8       	ldi	r20, 0x80	; 128
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c58:	88 23       	and	r24, r24
    2c5a:	2c f4       	brge	.+10     	; 0x2c66 <main+0x952>
		__ticks = 1;
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9c 8b       	std	Y+20, r25	; 0x14
    2c62:	8b 8b       	std	Y+19, r24	; 0x13
    2c64:	3f c0       	rjmp	.+126    	; 0x2ce4 <main+0x9d0>
	else if (__tmp > 65535)
    2c66:	6d 89       	ldd	r22, Y+21	; 0x15
    2c68:	7e 89       	ldd	r23, Y+22	; 0x16
    2c6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	3f ef       	ldi	r19, 0xFF	; 255
    2c72:	4f e7       	ldi	r20, 0x7F	; 127
    2c74:	57 e4       	ldi	r21, 0x47	; 71
    2c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c7a:	18 16       	cp	r1, r24
    2c7c:	4c f5       	brge	.+82     	; 0x2cd0 <main+0x9bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e2       	ldi	r20, 0x20	; 32
    2c8c:	51 e4       	ldi	r21, 0x41	; 65
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9c 8b       	std	Y+20, r25	; 0x14
    2ca4:	8b 8b       	std	Y+19, r24	; 0x13
    2ca6:	0f c0       	rjmp	.+30     	; 0x2cc6 <main+0x9b2>
    2ca8:	89 e1       	ldi	r24, 0x19	; 25
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	9a 8b       	std	Y+18, r25	; 0x12
    2cae:	89 8b       	std	Y+17, r24	; 0x11
    2cb0:	89 89       	ldd	r24, Y+17	; 0x11
    2cb2:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <main+0x9a0>
    2cb8:	9a 8b       	std	Y+18, r25	; 0x12
    2cba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	9c 8b       	std	Y+20, r25	; 0x14
    2cc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	69 f7       	brne	.-38     	; 0x2ca8 <main+0x994>
    2cce:	14 c0       	rjmp	.+40     	; 0x2cf8 <main+0x9e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	9c 8b       	std	Y+20, r25	; 0x14
    2ce2:	8b 8b       	std	Y+19, r24	; 0x13
    2ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce8:	98 8b       	std	Y+16, r25	; 0x10
    2cea:	8f 87       	std	Y+15, r24	; 0x0f
    2cec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cee:	98 89       	ldd	r25, Y+16	; 0x10
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <main+0x9dc>
    2cf4:	98 8b       	std	Y+16, r25	; 0x10
    2cf6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		USART_voidsenddata('T');
    2cf8:	84 e5       	ldi	r24, 0x54	; 84
    2cfa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <USART_voidsenddata>
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	a0 e2       	ldi	r26, 0x20	; 32
    2d04:	b1 e4       	ldi	r27, 0x41	; 65
    2d06:	8b 87       	std	Y+11, r24	; 0x0b
    2d08:	9c 87       	std	Y+12, r25	; 0x0c
    2d0a:	ad 87       	std	Y+13, r26	; 0x0d
    2d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	4a e7       	ldi	r20, 0x7A	; 122
    2d1c:	53 e4       	ldi	r21, 0x43	; 67
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	8f 83       	std	Y+7, r24	; 0x07
    2d28:	98 87       	std	Y+8, r25	; 0x08
    2d2a:	a9 87       	std	Y+9, r26	; 0x09
    2d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d30:	78 85       	ldd	r23, Y+8	; 0x08
    2d32:	89 85       	ldd	r24, Y+9	; 0x09
    2d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e8       	ldi	r20, 0x80	; 128
    2d3c:	5f e3       	ldi	r21, 0x3F	; 63
    2d3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d42:	88 23       	and	r24, r24
    2d44:	2c f4       	brge	.+10     	; 0x2d50 <main+0xa3c>
		__ticks = 1;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	9e 83       	std	Y+6, r25	; 0x06
    2d4c:	8d 83       	std	Y+5, r24	; 0x05
    2d4e:	3f c0       	rjmp	.+126    	; 0x2dce <main+0xaba>
	else if (__tmp > 65535)
    2d50:	6f 81       	ldd	r22, Y+7	; 0x07
    2d52:	78 85       	ldd	r23, Y+8	; 0x08
    2d54:	89 85       	ldd	r24, Y+9	; 0x09
    2d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	3f ef       	ldi	r19, 0xFF	; 255
    2d5c:	4f e7       	ldi	r20, 0x7F	; 127
    2d5e:	57 e4       	ldi	r21, 0x47	; 71
    2d60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d64:	18 16       	cp	r1, r24
    2d66:	4c f5       	brge	.+82     	; 0x2dba <main+0xaa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e2       	ldi	r20, 0x20	; 32
    2d76:	51 e4       	ldi	r21, 0x41	; 65
    2d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	0f c0       	rjmp	.+30     	; 0x2db0 <main+0xa9c>
    2d92:	89 e1       	ldi	r24, 0x19	; 25
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9c 83       	std	Y+4, r25	; 0x04
    2d98:	8b 83       	std	Y+3, r24	; 0x03
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <main+0xa8a>
    2da2:	9c 83       	std	Y+4, r25	; 0x04
    2da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	69 f7       	brne	.-38     	; 0x2d92 <main+0xa7e>
    2db8:	c7 ca       	rjmp	.-2674   	; 0x2348 <main+0x34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dba:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbc:	78 85       	ldd	r23, Y+8	; 0x08
    2dbe:	89 85       	ldd	r24, Y+9	; 0x09
    2dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	9a 83       	std	Y+2, r25	; 0x02
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <main+0xac6>
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	b2 ca       	rjmp	.-2716   	; 0x2348 <main+0x34>

00002de4 <__prologue_saves__>:
    2de4:	2f 92       	push	r2
    2de6:	3f 92       	push	r3
    2de8:	4f 92       	push	r4
    2dea:	5f 92       	push	r5
    2dec:	6f 92       	push	r6
    2dee:	7f 92       	push	r7
    2df0:	8f 92       	push	r8
    2df2:	9f 92       	push	r9
    2df4:	af 92       	push	r10
    2df6:	bf 92       	push	r11
    2df8:	cf 92       	push	r12
    2dfa:	df 92       	push	r13
    2dfc:	ef 92       	push	r14
    2dfe:	ff 92       	push	r15
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	ca 1b       	sub	r28, r26
    2e0e:	db 0b       	sbc	r29, r27
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	09 94       	ijmp

00002e1c <__epilogue_restores__>:
    2e1c:	2a 88       	ldd	r2, Y+18	; 0x12
    2e1e:	39 88       	ldd	r3, Y+17	; 0x11
    2e20:	48 88       	ldd	r4, Y+16	; 0x10
    2e22:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e24:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e26:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e28:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e2e:	b9 84       	ldd	r11, Y+9	; 0x09
    2e30:	c8 84       	ldd	r12, Y+8	; 0x08
    2e32:	df 80       	ldd	r13, Y+7	; 0x07
    2e34:	ee 80       	ldd	r14, Y+6	; 0x06
    2e36:	fd 80       	ldd	r15, Y+5	; 0x05
    2e38:	0c 81       	ldd	r16, Y+4	; 0x04
    2e3a:	1b 81       	ldd	r17, Y+3	; 0x03
    2e3c:	aa 81       	ldd	r26, Y+2	; 0x02
    2e3e:	b9 81       	ldd	r27, Y+1	; 0x01
    2e40:	ce 0f       	add	r28, r30
    2e42:	d1 1d       	adc	r29, r1
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	ed 01       	movw	r28, r26
    2e50:	08 95       	ret

00002e52 <_exit>:
    2e52:	f8 94       	cli

00002e54 <__stop_program>:
    2e54:	ff cf       	rjmp	.-2      	; 0x2e54 <__stop_program>
