
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000a5a  2**0
                  ALLOC
  2 .stab         00000ff0  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005fc  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_1>
   8:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <main>
  88:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <DIO_u8SetPinDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include"DIO_interface.h"
#include"DIO_register.h"
u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction )
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	28 97       	sbiw	r28, 0x08	; 8
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	8a 83       	std	Y+2, r24	; 0x02
  a6:	6b 83       	std	Y+3, r22	; 0x03
  a8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
  aa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	08 f0       	brcs	.+2      	; 0xb4 <DIO_u8SetPinDirection+0x24>
  b2:	b3 c0       	rjmp	.+358    	; 0x21a <DIO_u8SetPinDirection+0x18a>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
  b4:	8c 81       	ldd	r24, Y+4	; 0x04
  b6:	88 23       	and	r24, r24
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_u8SetPinDirection+0x2c>
  ba:	56 c0       	rjmp	.+172    	; 0x168 <DIO_u8SetPinDirection+0xd8>
		{
			switch(Copy_u8Port)
  bc:	8a 81       	ldd	r24, Y+2	; 0x02
  be:	28 2f       	mov	r18, r24
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	38 87       	std	Y+8, r19	; 0x08
  c4:	2f 83       	std	Y+7, r18	; 0x07
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	91 05       	cpc	r25, r1
  ce:	f9 f0       	breq	.+62     	; 0x10e <DIO_u8SetPinDirection+0x7e>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	79 f1       	breq	.+94     	; 0x138 <DIO_u8SetPinDirection+0xa8>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	09 f0       	breq	.+2      	; 0xe4 <DIO_u8SetPinDirection+0x54>
  e2:	3f c0       	rjmp	.+126    	; 0x162 <DIO_u8SetPinDirection+0xd2>
			{
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
  e4:	aa e2       	ldi	r26, 0x2A	; 42
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ea e2       	ldi	r30, 0x2A	; 42
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	48 2f       	mov	r20, r24
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 2e       	mov	r0, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_u8SetPinDirection+0x72>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_u8SetPinDirection+0x6e>
 106:	80 95       	com	r24
 108:	84 23       	and	r24, r20
 10a:	8c 93       	st	X, r24
 10c:	88 c0       	rjmp	.+272    	; 0x21e <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
 10e:	a7 e2       	ldi	r26, 0x27	; 39
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e7 e2       	ldi	r30, 0x27	; 39
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	48 2f       	mov	r20, r24
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_u8SetPinDirection+0x9c>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_u8SetPinDirection+0x98>
 130:	80 95       	com	r24
 132:	84 23       	and	r24, r20
 134:	8c 93       	st	X, r24
 136:	73 c0       	rjmp	.+230    	; 0x21e <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
 138:	a4 e2       	ldi	r26, 0x24	; 36
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e4 e2       	ldi	r30, 0x24	; 36
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	48 2f       	mov	r20, r24
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	28 2f       	mov	r18, r24
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 2e       	mov	r0, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_u8SetPinDirection+0xc6>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_u8SetPinDirection+0xc2>
 15a:	80 95       	com	r24
 15c:	84 23       	and	r24, r20
 15e:	8c 93       	st	X, r24
 160:	5e c0       	rjmp	.+188    	; 0x21e <DIO_u8SetPinDirection+0x18e>
			default : Local_u8ErrorState=1;break;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	5b c0       	rjmp	.+182    	; 0x21e <DIO_u8SetPinDirection+0x18e>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
 168:	8c 81       	ldd	r24, Y+4	; 0x04
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	09 f0       	breq	.+2      	; 0x170 <DIO_u8SetPinDirection+0xe0>
 16e:	52 c0       	rjmp	.+164    	; 0x214 <DIO_u8SetPinDirection+0x184>
		{
			switch(Copy_u8Port)
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	3e 83       	std	Y+6, r19	; 0x06
 178:	2d 83       	std	Y+5, r18	; 0x05
 17a:	8d 81       	ldd	r24, Y+5	; 0x05
 17c:	9e 81       	ldd	r25, Y+6	; 0x06
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 05       	cpc	r25, r1
 182:	e9 f0       	breq	.+58     	; 0x1be <DIO_u8SetPinDirection+0x12e>
 184:	2d 81       	ldd	r18, Y+5	; 0x05
 186:	3e 81       	ldd	r19, Y+6	; 0x06
 188:	22 30       	cpi	r18, 0x02	; 2
 18a:	31 05       	cpc	r19, r1
 18c:	61 f1       	breq	.+88     	; 0x1e6 <DIO_u8SetPinDirection+0x156>
 18e:	8d 81       	ldd	r24, Y+5	; 0x05
 190:	9e 81       	ldd	r25, Y+6	; 0x06
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	e1 f5       	brne	.+120    	; 0x20e <DIO_u8SetPinDirection+0x17e>
			{
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
 196:	aa e2       	ldi	r26, 0x2A	; 42
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	ea e2       	ldi	r30, 0x2A	; 42
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	48 2f       	mov	r20, r24
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 2e       	mov	r0, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_u8SetPinDirection+0x124>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_u8SetPinDirection+0x120>
 1b8:	84 2b       	or	r24, r20
 1ba:	8c 93       	st	X, r24
 1bc:	30 c0       	rjmp	.+96     	; 0x21e <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
 1be:	a7 e2       	ldi	r26, 0x27	; 39
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e7 e2       	ldi	r30, 0x27	; 39
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	48 2f       	mov	r20, r24
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 2e       	mov	r0, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_u8SetPinDirection+0x14c>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_u8SetPinDirection+0x148>
 1e0:	84 2b       	or	r24, r20
 1e2:	8c 93       	st	X, r24
 1e4:	1c c0       	rjmp	.+56     	; 0x21e <DIO_u8SetPinDirection+0x18e>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
 1e6:	a4 e2       	ldi	r26, 0x24	; 36
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e4 e2       	ldi	r30, 0x24	; 36
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 2e       	mov	r0, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_u8SetPinDirection+0x174>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_u8SetPinDirection+0x170>
 208:	84 2b       	or	r24, r20
 20a:	8c 93       	st	X, r24
 20c:	08 c0       	rjmp	.+16     	; 0x21e <DIO_u8SetPinDirection+0x18e>
			default : Local_u8ErrorState=1;break;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	89 83       	std	Y+1, r24	; 0x01
 212:	05 c0       	rjmp	.+10     	; 0x21e <DIO_u8SetPinDirection+0x18e>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_u8SetPinDirection+0x18e>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 21e:	89 81       	ldd	r24, Y+1	; 0x01

}
 220:	28 96       	adiw	r28, 0x08	; 8
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	08 95       	ret

00000232 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction )
{
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	00 d0       	rcall	.+0      	; 0x238 <DIO_u8SetPortDirection+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <DIO_u8SetPortDirection+0x8>
 23a:	0f 92       	push	r0
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	8a 83       	std	Y+2, r24	; 0x02
 242:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorState=0;
 244:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	3d 83       	std	Y+5, r19	; 0x05
 24e:	2c 83       	std	Y+4, r18	; 0x04
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	9d 81       	ldd	r25, Y+5	; 0x05
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	91 05       	cpc	r25, r1
 258:	71 f0       	breq	.+28     	; 0x276 <DIO_u8SetPortDirection+0x44>
 25a:	2c 81       	ldd	r18, Y+4	; 0x04
 25c:	3d 81       	ldd	r19, Y+5	; 0x05
 25e:	22 30       	cpi	r18, 0x02	; 2
 260:	31 05       	cpc	r19, r1
 262:	71 f0       	breq	.+28     	; 0x280 <DIO_u8SetPortDirection+0x4e>
 264:	8c 81       	ldd	r24, Y+4	; 0x04
 266:	9d 81       	ldd	r25, Y+5	; 0x05
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	79 f4       	brne	.+30     	; 0x28a <DIO_u8SetPortDirection+0x58>
	{
	case DIO_u8PORTD :DDRD=Copy_u8Direction ;break;
 26c:	ea e2       	ldi	r30, 0x2A	; 42
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	80 83       	st	Z, r24
 274:	0c c0       	rjmp	.+24     	; 0x28e <DIO_u8SetPortDirection+0x5c>
	case DIO_u8PORTC :DDRC=Copy_u8Direction ;break;
 276:	e7 e2       	ldi	r30, 0x27	; 39
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	8b 81       	ldd	r24, Y+3	; 0x03
 27c:	80 83       	st	Z, r24
 27e:	07 c0       	rjmp	.+14     	; 0x28e <DIO_u8SetPortDirection+0x5c>
	case DIO_u8PORTB :DDRB=Copy_u8Direction ;break;
 280:	e4 e2       	ldi	r30, 0x24	; 36
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	80 83       	st	Z, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_u8SetPortDirection+0x5c>
	default : Local_u8ErrorState=1;break;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 28e:	89 81       	ldd	r24, Y+1	; 0x01
}
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	28 97       	sbiw	r28, 0x08	; 8
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	8a 83       	std	Y+2, r24	; 0x02
 2b6:	6b 83       	std	Y+3, r22	; 0x03
 2b8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 2ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	88 30       	cpi	r24, 0x08	; 8
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <DIO_u8SetPinValue+0x24>
 2c2:	b3 c0       	rjmp	.+358    	; 0x42a <DIO_u8SetPinValue+0x18a>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	88 23       	and	r24, r24
 2c8:	09 f0       	breq	.+2      	; 0x2cc <DIO_u8SetPinValue+0x2c>
 2ca:	56 c0       	rjmp	.+172    	; 0x378 <DIO_u8SetPinValue+0xd8>
		{
			switch(Copy_u8Port)
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	38 87       	std	Y+8, r19	; 0x08
 2d4:	2f 83       	std	Y+7, r18	; 0x07
 2d6:	8f 81       	ldd	r24, Y+7	; 0x07
 2d8:	98 85       	ldd	r25, Y+8	; 0x08
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	91 05       	cpc	r25, r1
 2de:	f9 f0       	breq	.+62     	; 0x31e <DIO_u8SetPinValue+0x7e>
 2e0:	2f 81       	ldd	r18, Y+7	; 0x07
 2e2:	38 85       	ldd	r19, Y+8	; 0x08
 2e4:	22 30       	cpi	r18, 0x02	; 2
 2e6:	31 05       	cpc	r19, r1
 2e8:	79 f1       	breq	.+94     	; 0x348 <DIO_u8SetPinValue+0xa8>
 2ea:	8f 81       	ldd	r24, Y+7	; 0x07
 2ec:	98 85       	ldd	r25, Y+8	; 0x08
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <DIO_u8SetPinValue+0x54>
 2f2:	3f c0       	rjmp	.+126    	; 0x372 <DIO_u8SetPinValue+0xd2>
			{
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
 2f4:	ab e2       	ldi	r26, 0x2B	; 43
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	eb e2       	ldi	r30, 0x2B	; 43
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	48 2f       	mov	r20, r24
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	28 2f       	mov	r18, r24
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 2e       	mov	r0, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_u8SetPinValue+0x72>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_u8SetPinValue+0x6e>
 316:	80 95       	com	r24
 318:	84 23       	and	r24, r20
 31a:	8c 93       	st	X, r24
 31c:	88 c0       	rjmp	.+272    	; 0x42e <DIO_u8SetPinValue+0x18e>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
 31e:	a8 e2       	ldi	r26, 0x28	; 40
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e8 e2       	ldi	r30, 0x28	; 40
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8SetPinValue+0x9c>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8SetPinValue+0x98>
 340:	80 95       	com	r24
 342:	84 23       	and	r24, r20
 344:	8c 93       	st	X, r24
 346:	73 c0       	rjmp	.+230    	; 0x42e <DIO_u8SetPinValue+0x18e>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
 348:	a5 e2       	ldi	r26, 0x25	; 37
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e5 e2       	ldi	r30, 0x25	; 37
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	48 2f       	mov	r20, r24
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	28 2f       	mov	r18, r24
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 2e       	mov	r0, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_u8SetPinValue+0xc6>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	0a 94       	dec	r0
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_u8SetPinValue+0xc2>
 36a:	80 95       	com	r24
 36c:	84 23       	and	r24, r20
 36e:	8c 93       	st	X, r24
 370:	5e c0       	rjmp	.+188    	; 0x42e <DIO_u8SetPinValue+0x18e>
			default : Local_u8ErrorState=1;break;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	89 83       	std	Y+1, r24	; 0x01
 376:	5b c0       	rjmp	.+182    	; 0x42e <DIO_u8SetPinValue+0x18e>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
 378:	8c 81       	ldd	r24, Y+4	; 0x04
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	09 f0       	breq	.+2      	; 0x380 <DIO_u8SetPinValue+0xe0>
 37e:	52 c0       	rjmp	.+164    	; 0x424 <DIO_u8SetPinValue+0x184>
		{
			switch(Copy_u8Port)
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	3e 83       	std	Y+6, r19	; 0x06
 388:	2d 83       	std	Y+5, r18	; 0x05
 38a:	8d 81       	ldd	r24, Y+5	; 0x05
 38c:	9e 81       	ldd	r25, Y+6	; 0x06
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	91 05       	cpc	r25, r1
 392:	e9 f0       	breq	.+58     	; 0x3ce <DIO_u8SetPinValue+0x12e>
 394:	2d 81       	ldd	r18, Y+5	; 0x05
 396:	3e 81       	ldd	r19, Y+6	; 0x06
 398:	22 30       	cpi	r18, 0x02	; 2
 39a:	31 05       	cpc	r19, r1
 39c:	61 f1       	breq	.+88     	; 0x3f6 <DIO_u8SetPinValue+0x156>
 39e:	8d 81       	ldd	r24, Y+5	; 0x05
 3a0:	9e 81       	ldd	r25, Y+6	; 0x06
 3a2:	00 97       	sbiw	r24, 0x00	; 0
 3a4:	e1 f5       	brne	.+120    	; 0x41e <DIO_u8SetPinValue+0x17e>
			{
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
 3a6:	ab e2       	ldi	r26, 0x2B	; 43
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	eb e2       	ldi	r30, 0x2B	; 43
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8SetPinValue+0x124>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8SetPinValue+0x120>
 3c8:	84 2b       	or	r24, r20
 3ca:	8c 93       	st	X, r24
 3cc:	30 c0       	rjmp	.+96     	; 0x42e <DIO_u8SetPinValue+0x18e>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
 3ce:	a8 e2       	ldi	r26, 0x28	; 40
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e8 e2       	ldi	r30, 0x28	; 40
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8SetPinValue+0x14c>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8SetPinValue+0x148>
 3f0:	84 2b       	or	r24, r20
 3f2:	8c 93       	st	X, r24
 3f4:	1c c0       	rjmp	.+56     	; 0x42e <DIO_u8SetPinValue+0x18e>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
 3f6:	a5 e2       	ldi	r26, 0x25	; 37
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	e5 e2       	ldi	r30, 0x25	; 37
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	48 2f       	mov	r20, r24
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 2e       	mov	r0, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_u8SetPinValue+0x174>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_u8SetPinValue+0x170>
 418:	84 2b       	or	r24, r20
 41a:	8c 93       	st	X, r24
 41c:	08 c0       	rjmp	.+16     	; 0x42e <DIO_u8SetPinValue+0x18e>
			default : Local_u8ErrorState=1;break;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	89 83       	std	Y+1, r24	; 0x01
 422:	05 c0       	rjmp	.+10     	; 0x42e <DIO_u8SetPinValue+0x18e>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	89 83       	std	Y+1, r24	; 0x01
 428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_u8SetPinValue+0x18e>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 42e:	89 81       	ldd	r24, Y+1	; 0x01

}
 430:	28 96       	adiw	r28, 0x08	; 8
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	cf 91       	pop	r28
 43e:	df 91       	pop	r29
 440:	08 95       	ret

00000442 <DIO_u8SetPortValue>:



u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 442:	df 93       	push	r29
 444:	cf 93       	push	r28
 446:	00 d0       	rcall	.+0      	; 0x448 <DIO_u8SetPortValue+0x6>
 448:	00 d0       	rcall	.+0      	; 0x44a <DIO_u8SetPortValue+0x8>
 44a:	0f 92       	push	r0
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	8a 83       	std	Y+2, r24	; 0x02
 452:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorState=0;
 454:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	3d 83       	std	Y+5, r19	; 0x05
 45e:	2c 83       	std	Y+4, r18	; 0x04
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	9d 81       	ldd	r25, Y+5	; 0x05
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	91 05       	cpc	r25, r1
 468:	71 f0       	breq	.+28     	; 0x486 <DIO_u8SetPortValue+0x44>
 46a:	2c 81       	ldd	r18, Y+4	; 0x04
 46c:	3d 81       	ldd	r19, Y+5	; 0x05
 46e:	22 30       	cpi	r18, 0x02	; 2
 470:	31 05       	cpc	r19, r1
 472:	71 f0       	breq	.+28     	; 0x490 <DIO_u8SetPortValue+0x4e>
 474:	8c 81       	ldd	r24, Y+4	; 0x04
 476:	9d 81       	ldd	r25, Y+5	; 0x05
 478:	00 97       	sbiw	r24, 0x00	; 0
 47a:	79 f4       	brne	.+30     	; 0x49a <DIO_u8SetPortValue+0x58>
	{
	case DIO_u8PORTD :PORTD=Copy_u8Value ;break;
 47c:	eb e2       	ldi	r30, 0x2B	; 43
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	80 83       	st	Z, r24
 484:	0c c0       	rjmp	.+24     	; 0x49e <DIO_u8SetPortValue+0x5c>
	case DIO_u8PORTC :PORTC=Copy_u8Value ;break;
 486:	e8 e2       	ldi	r30, 0x28	; 40
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	8b 81       	ldd	r24, Y+3	; 0x03
 48c:	80 83       	st	Z, r24
 48e:	07 c0       	rjmp	.+14     	; 0x49e <DIO_u8SetPortValue+0x5c>
	case DIO_u8PORTB :PORTB=Copy_u8Value ;break;
 490:	e5 e2       	ldi	r30, 0x25	; 37
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	80 83       	st	Z, r24
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_u8SetPortValue+0x5c>
	default : Local_u8ErrorState=1;break;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 49e:	89 81       	ldd	r24, Y+1	; 0x01

}
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	cf 91       	pop	r28
 4ac:	df 91       	pop	r29
 4ae:	08 95       	ret

000004b0 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 4b0:	df 93       	push	r29
 4b2:	cf 93       	push	r28
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
 4b8:	27 97       	sbiw	r28, 0x07	; 7
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
 4c4:	8a 83       	std	Y+2, r24	; 0x02
 4c6:	6b 83       	std	Y+3, r22	; 0x03
 4c8:	5d 83       	std	Y+5, r21	; 0x05
 4ca:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 4cc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL&&Copy_u8Pin<=DIO_u8PIN7)
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	9d 81       	ldd	r25, Y+5	; 0x05
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	09 f4       	brne	.+2      	; 0x4d8 <DIO_u8GetPinValue+0x28>
 4d6:	58 c0       	rjmp	.+176    	; 0x588 <DIO_u8GetPinValue+0xd8>
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	88 30       	cpi	r24, 0x08	; 8
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <DIO_u8GetPinValue+0x30>
 4de:	54 c0       	rjmp	.+168    	; 0x588 <DIO_u8GetPinValue+0xd8>
	{

		switch(Copy_u8Port)
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	3f 83       	std	Y+7, r19	; 0x07
 4e8:	2e 83       	std	Y+6, r18	; 0x06
 4ea:	4e 81       	ldd	r20, Y+6	; 0x06
 4ec:	5f 81       	ldd	r21, Y+7	; 0x07
 4ee:	41 30       	cpi	r20, 0x01	; 1
 4f0:	51 05       	cpc	r21, r1
 4f2:	f9 f0       	breq	.+62     	; 0x532 <DIO_u8GetPinValue+0x82>
 4f4:	8e 81       	ldd	r24, Y+6	; 0x06
 4f6:	9f 81       	ldd	r25, Y+7	; 0x07
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	91 05       	cpc	r25, r1
 4fc:	71 f1       	breq	.+92     	; 0x55a <DIO_u8GetPinValue+0xaa>
 4fe:	2e 81       	ldd	r18, Y+6	; 0x06
 500:	3f 81       	ldd	r19, Y+7	; 0x07
 502:	21 15       	cp	r18, r1
 504:	31 05       	cpc	r19, r1
 506:	09 f0       	breq	.+2      	; 0x50a <DIO_u8GetPinValue+0x5a>
 508:	3c c0       	rjmp	.+120    	; 0x582 <DIO_u8GetPinValue+0xd2>
		{
		case DIO_u8PORTD :*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
 50a:	e9 e2       	ldi	r30, 0x29	; 41
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	8b 81       	ldd	r24, Y+3	; 0x03
 516:	88 2f       	mov	r24, r24
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	a9 01       	movw	r20, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_u8GetPinValue+0x72>
 51e:	55 95       	asr	r21
 520:	47 95       	ror	r20
 522:	8a 95       	dec	r24
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_u8GetPinValue+0x6e>
 526:	ca 01       	movw	r24, r20
 528:	81 70       	andi	r24, 0x01	; 1
 52a:	ec 81       	ldd	r30, Y+4	; 0x04
 52c:	fd 81       	ldd	r31, Y+5	; 0x05
 52e:	80 83       	st	Z, r24
 530:	2d c0       	rjmp	.+90     	; 0x58c <DIO_u8GetPinValue+0xdc>
		case DIO_u8PORTC :*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
 532:	e6 e2       	ldi	r30, 0x26	; 38
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	88 2f       	mov	r24, r24
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	a9 01       	movw	r20, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_u8GetPinValue+0x9a>
 546:	55 95       	asr	r21
 548:	47 95       	ror	r20
 54a:	8a 95       	dec	r24
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_u8GetPinValue+0x96>
 54e:	ca 01       	movw	r24, r20
 550:	81 70       	andi	r24, 0x01	; 1
 552:	ec 81       	ldd	r30, Y+4	; 0x04
 554:	fd 81       	ldd	r31, Y+5	; 0x05
 556:	80 83       	st	Z, r24
 558:	19 c0       	rjmp	.+50     	; 0x58c <DIO_u8GetPinValue+0xdc>
		case DIO_u8PORTB :*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
 55a:	e3 e2       	ldi	r30, 0x23	; 35
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	8b 81       	ldd	r24, Y+3	; 0x03
 566:	88 2f       	mov	r24, r24
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	a9 01       	movw	r20, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_u8GetPinValue+0xc2>
 56e:	55 95       	asr	r21
 570:	47 95       	ror	r20
 572:	8a 95       	dec	r24
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_u8GetPinValue+0xbe>
 576:	ca 01       	movw	r24, r20
 578:	81 70       	andi	r24, 0x01	; 1
 57a:	ec 81       	ldd	r30, Y+4	; 0x04
 57c:	fd 81       	ldd	r31, Y+5	; 0x05
 57e:	80 83       	st	Z, r24
 580:	05 c0       	rjmp	.+10     	; 0x58c <DIO_u8GetPinValue+0xdc>
		default : Local_u8ErrorState=1;break;
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	89 83       	std	Y+1, r24	; 0x01
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_u8GetPinValue+0xdc>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 58c:	89 81       	ldd	r24, Y+1	; 0x01
}
 58e:	27 96       	adiw	r28, 0x07	; 7
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	de bf       	out	0x3e, r29	; 62
 596:	0f be       	out	0x3f, r0	; 63
 598:	cd bf       	out	0x3d, r28	; 61
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	08 95       	ret

000005a0 <EXTI_voidInt0Init>:
#include "EXTI_register.h"
/*Global Pointer To Function to hold INT0 ISR address*/
void (*EXTI_pvInt0Func)(void)=NULL;
void (*EXTI_pvInt1Func)(void)=NULL;
void EXTI_voidInt0Init(void)
{
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
 5a8:	a9 e6       	ldi	r26, 0x69	; 105
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	e9 e6       	ldi	r30, 0x69	; 105
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	8e 7f       	andi	r24, 0xFE	; 254
 5b4:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
 5b6:	a9 e6       	ldi	r26, 0x69	; 105
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e9 e6       	ldi	r30, 0x69	; 105
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	82 60       	ori	r24, 0x02	; 2
 5c2:	8c 93       	st	X, r24
#else
#error"WRONG INT0_SENSE Configuration Option"
#endif
	/*Check Peripheral interrupt enable initial state*/
#if INT0_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
 5c4:	ad e3       	ldi	r26, 0x3D	; 61
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	ed e3       	ldi	r30, 0x3D	; 61
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	81 60       	ori	r24, 0x01	; 1
 5d0:	8c 93       	st	X, r24
#elif INT0_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error"WRONG INT0_INIT_STATE Configuration Option"
#endif
}
 5d2:	cf 91       	pop	r28
 5d4:	df 91       	pop	r29
 5d6:	08 95       	ret

000005d8 <EXTI_voidInt1Init>:



void EXTI_voidInt1Init(void)
{
 5d8:	df 93       	push	r29
 5da:	cf 93       	push	r28
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC10);
#elif INT1_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
 5e0:	a9 e6       	ldi	r26, 0x69	; 105
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	e9 e6       	ldi	r30, 0x69	; 105
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	8b 7f       	andi	r24, 0xFB	; 251
 5ec:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
 5ee:	a9 e6       	ldi	r26, 0x69	; 105
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	e9 e6       	ldi	r30, 0x69	; 105
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	88 60       	ori	r24, 0x08	; 8
 5fa:	8c 93       	st	X, r24
#else
#error"WRONG INT1_SENSE Configuration Option"
#endif
	/*Check Peripheral interrupt enable initial state*/
#if INT1_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
 5fc:	ad e3       	ldi	r26, 0x3D	; 61
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	ed e3       	ldi	r30, 0x3D	; 61
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	82 60       	ori	r24, 0x02	; 2
 608:	8c 93       	st	X, r24
#elif INT1_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#else
#error"WRONG INT1_INIT_STATE Configuration Option"
#endif
}
 60a:	cf 91       	pop	r28
 60c:	df 91       	pop	r29
 60e:	08 95       	ret

00000610 <EXTI_u8Int0SetSenseControl>:



u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Sense)
{
 610:	df 93       	push	r29
 612:	cf 93       	push	r28
 614:	00 d0       	rcall	.+0      	; 0x616 <EXTI_u8Int0SetSenseControl+0x6>
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState=OK;
 61c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sense==LOW_LEVEL)
 61e:	8a 81       	ldd	r24, Y+2	; 0x02
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	79 f4       	brne	.+30     	; 0x642 <EXTI_u8Int0SetSenseControl+0x32>
	{
		CLR_BIT(MCUCR,MCUCR_ISC00);
 624:	a9 e6       	ldi	r26, 0x69	; 105
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e9 e6       	ldi	r30, 0x69	; 105
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	8e 7f       	andi	r24, 0xFE	; 254
 630:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
 632:	a9 e6       	ldi	r26, 0x69	; 105
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	e9 e6       	ldi	r30, 0x69	; 105
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	8d 7f       	andi	r24, 0xFD	; 253
 63e:	8c 93       	st	X, r24
 640:	38 c0       	rjmp	.+112    	; 0x6b2 <EXTI_u8Int0SetSenseControl+0xa2>
	}
	else if(Copy_u8Sense==ON_CHANGE)
 642:	8a 81       	ldd	r24, Y+2	; 0x02
 644:	82 30       	cpi	r24, 0x02	; 2
 646:	79 f4       	brne	.+30     	; 0x666 <EXTI_u8Int0SetSenseControl+0x56>
	{
		SET_BIT(MCUCR,MCUCR_ISC00);
 648:	a9 e6       	ldi	r26, 0x69	; 105
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	e9 e6       	ldi	r30, 0x69	; 105
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	81 60       	ori	r24, 0x01	; 1
 654:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
 656:	a9 e6       	ldi	r26, 0x69	; 105
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e9 e6       	ldi	r30, 0x69	; 105
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	8d 7f       	andi	r24, 0xFD	; 253
 662:	8c 93       	st	X, r24
 664:	26 c0       	rjmp	.+76     	; 0x6b2 <EXTI_u8Int0SetSenseControl+0xa2>
	}
	else if(Copy_u8Sense==FALLING_EDGE)
 666:	8a 81       	ldd	r24, Y+2	; 0x02
 668:	83 30       	cpi	r24, 0x03	; 3
 66a:	79 f4       	brne	.+30     	; 0x68a <EXTI_u8Int0SetSenseControl+0x7a>
	{
		CLR_BIT(MCUCR,MCUCR_ISC00);
 66c:	a9 e6       	ldi	r26, 0x69	; 105
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	e9 e6       	ldi	r30, 0x69	; 105
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	8e 7f       	andi	r24, 0xFE	; 254
 678:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
 67a:	a9 e6       	ldi	r26, 0x69	; 105
 67c:	b0 e0       	ldi	r27, 0x00	; 0
 67e:	e9 e6       	ldi	r30, 0x69	; 105
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	82 60       	ori	r24, 0x02	; 2
 686:	8c 93       	st	X, r24
 688:	14 c0       	rjmp	.+40     	; 0x6b2 <EXTI_u8Int0SetSenseControl+0xa2>
	}
	else if(Copy_u8Sense==RISING_EDGE )
 68a:	8a 81       	ldd	r24, Y+2	; 0x02
 68c:	84 30       	cpi	r24, 0x04	; 4
 68e:	79 f4       	brne	.+30     	; 0x6ae <EXTI_u8Int0SetSenseControl+0x9e>
	{
		SET_BIT(MCUCR,MCUCR_ISC00);
 690:	a9 e6       	ldi	r26, 0x69	; 105
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	e9 e6       	ldi	r30, 0x69	; 105
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	81 60       	ori	r24, 0x01	; 1
 69c:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
 69e:	a9 e6       	ldi	r26, 0x69	; 105
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	e9 e6       	ldi	r30, 0x69	; 105
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	82 60       	ori	r24, 0x02	; 2
 6aa:	8c 93       	st	X, r24
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <EXTI_u8Int0SetSenseControl+0xa2>
	}
	else Local_ErrorState=NOK;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	89 83       	std	Y+1, r24	; 0x01

	return Local_ErrorState;
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
}
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	cf 91       	pop	r28
 6ba:	df 91       	pop	r29
 6bc:	08 95       	ret

000006be <EXTI_u8Int1SetSenseControl>:



u8 EXTI_u8Int1SetSenseControl(u8 Copy_u8Sense)
{
 6be:	df 93       	push	r29
 6c0:	cf 93       	push	r28
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <EXTI_u8Int1SetSenseControl+0x6>
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
 6c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState=OK;
 6ca:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sense==LOW_LEVEL)
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	79 f4       	brne	.+30     	; 0x6f0 <EXTI_u8Int1SetSenseControl+0x32>
	{
		CLR_BIT(MCUCR,MCUCR_ISC10);
 6d2:	a9 e6       	ldi	r26, 0x69	; 105
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	e9 e6       	ldi	r30, 0x69	; 105
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	8b 7f       	andi	r24, 0xFB	; 251
 6de:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
 6e0:	a9 e6       	ldi	r26, 0x69	; 105
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	e9 e6       	ldi	r30, 0x69	; 105
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	87 7f       	andi	r24, 0xF7	; 247
 6ec:	8c 93       	st	X, r24
 6ee:	38 c0       	rjmp	.+112    	; 0x760 <EXTI_u8Int1SetSenseControl+0xa2>
	}
	else if(Copy_u8Sense==ON_CHANGE)
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	82 30       	cpi	r24, 0x02	; 2
 6f4:	79 f4       	brne	.+30     	; 0x714 <EXTI_u8Int1SetSenseControl+0x56>
	{
		SET_BIT(MCUCR,MCUCR_ISC10);
 6f6:	a9 e6       	ldi	r26, 0x69	; 105
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	e9 e6       	ldi	r30, 0x69	; 105
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	84 60       	ori	r24, 0x04	; 4
 702:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
 704:	a9 e6       	ldi	r26, 0x69	; 105
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	e9 e6       	ldi	r30, 0x69	; 105
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	87 7f       	andi	r24, 0xF7	; 247
 710:	8c 93       	st	X, r24
 712:	26 c0       	rjmp	.+76     	; 0x760 <EXTI_u8Int1SetSenseControl+0xa2>
	}
	else if(Copy_u8Sense==FALLING_EDGE)
 714:	8a 81       	ldd	r24, Y+2	; 0x02
 716:	83 30       	cpi	r24, 0x03	; 3
 718:	79 f4       	brne	.+30     	; 0x738 <EXTI_u8Int1SetSenseControl+0x7a>
	{
		CLR_BIT(MCUCR,MCUCR_ISC10);
 71a:	a9 e6       	ldi	r26, 0x69	; 105
 71c:	b0 e0       	ldi	r27, 0x00	; 0
 71e:	e9 e6       	ldi	r30, 0x69	; 105
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 81       	ld	r24, Z
 724:	8b 7f       	andi	r24, 0xFB	; 251
 726:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
 728:	a9 e6       	ldi	r26, 0x69	; 105
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	e9 e6       	ldi	r30, 0x69	; 105
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	88 60       	ori	r24, 0x08	; 8
 734:	8c 93       	st	X, r24
 736:	14 c0       	rjmp	.+40     	; 0x760 <EXTI_u8Int1SetSenseControl+0xa2>
	}
	else if(Copy_u8Sense==RISING_EDGE )
 738:	8a 81       	ldd	r24, Y+2	; 0x02
 73a:	84 30       	cpi	r24, 0x04	; 4
 73c:	79 f4       	brne	.+30     	; 0x75c <EXTI_u8Int1SetSenseControl+0x9e>
	{
		SET_BIT(MCUCR,MCUCR_ISC10);
 73e:	a9 e6       	ldi	r26, 0x69	; 105
 740:	b0 e0       	ldi	r27, 0x00	; 0
 742:	e9 e6       	ldi	r30, 0x69	; 105
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	84 60       	ori	r24, 0x04	; 4
 74a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
 74c:	a9 e6       	ldi	r26, 0x69	; 105
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	e9 e6       	ldi	r30, 0x69	; 105
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	88 60       	ori	r24, 0x08	; 8
 758:	8c 93       	st	X, r24
 75a:	02 c0       	rjmp	.+4      	; 0x760 <EXTI_u8Int1SetSenseControl+0xa2>
	}
	else Local_ErrorState=NOK;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	89 83       	std	Y+1, r24	; 0x01

	return Local_ErrorState;
 760:	89 81       	ldd	r24, Y+1	; 0x01
}
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	cf 91       	pop	r28
 768:	df 91       	pop	r29
 76a:	08 95       	ret

0000076c <EXTI_u8IntEnable>:



u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
 76c:	df 93       	push	r29
 76e:	cf 93       	push	r28
 770:	00 d0       	rcall	.+0      	; 0x772 <EXTI_u8IntEnable+0x6>
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState=OK;
 778:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Int==INT0) SET_BIT(GICR,GICR_INT0);
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	81 30       	cpi	r24, 0x01	; 1
 77e:	41 f4       	brne	.+16     	; 0x790 <EXTI_u8IntEnable+0x24>
 780:	ad e3       	ldi	r26, 0x3D	; 61
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	ed e3       	ldi	r30, 0x3D	; 61
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	81 60       	ori	r24, 0x01	; 1
 78c:	8c 93       	st	X, r24
 78e:	0d c0       	rjmp	.+26     	; 0x7aa <EXTI_u8IntEnable+0x3e>
	else if(Copy_u8Int==INT1) SET_BIT(GICR,GICR_INT1);
 790:	8a 81       	ldd	r24, Y+2	; 0x02
 792:	82 30       	cpi	r24, 0x02	; 2
 794:	41 f4       	brne	.+16     	; 0x7a6 <EXTI_u8IntEnable+0x3a>
 796:	ad e3       	ldi	r26, 0x3D	; 61
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	ed e3       	ldi	r30, 0x3D	; 61
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	82 60       	ori	r24, 0x02	; 2
 7a2:	8c 93       	st	X, r24
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <EXTI_u8IntEnable+0x3e>
	else Local_ErrorState=NOK;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorState;
 7aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	cf 91       	pop	r28
 7b2:	df 91       	pop	r29
 7b4:	08 95       	ret

000007b6 <EXTI_u8IntDisable>:



u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
 7b6:	df 93       	push	r29
 7b8:	cf 93       	push	r28
 7ba:	00 d0       	rcall	.+0      	; 0x7bc <EXTI_u8IntDisable+0x6>
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
 7c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState=OK;
 7c2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Int==INT0) CLR_BIT(GICR,GICR_INT0);
 7c4:	8a 81       	ldd	r24, Y+2	; 0x02
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	41 f4       	brne	.+16     	; 0x7da <EXTI_u8IntDisable+0x24>
 7ca:	ad e3       	ldi	r26, 0x3D	; 61
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	ed e3       	ldi	r30, 0x3D	; 61
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	8e 7f       	andi	r24, 0xFE	; 254
 7d6:	8c 93       	st	X, r24
 7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <EXTI_u8IntDisable+0x3e>
	else if(Copy_u8Int==INT1) CLR_BIT(GICR,GICR_INT1);
 7da:	8a 81       	ldd	r24, Y+2	; 0x02
 7dc:	82 30       	cpi	r24, 0x02	; 2
 7de:	41 f4       	brne	.+16     	; 0x7f0 <EXTI_u8IntDisable+0x3a>
 7e0:	ad e3       	ldi	r26, 0x3D	; 61
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	ed e3       	ldi	r30, 0x3D	; 61
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	8d 7f       	andi	r24, 0xFD	; 253
 7ec:	8c 93       	st	X, r24
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <EXTI_u8IntDisable+0x3e>
	else Local_ErrorState=NOK;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorState;
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	cf 91       	pop	r28
 7fc:	df 91       	pop	r29
 7fe:	08 95       	ret

00000800 <EXTI_u8IntSetCallBack>:


u8 EXTI_u8IntSetCallBack(u8 Copy_u8Int,void(*Copy_pvIntFunc)(void))
{
 800:	df 93       	push	r29
 802:	cf 93       	push	r28
 804:	00 d0       	rcall	.+0      	; 0x806 <EXTI_u8IntSetCallBack+0x6>
 806:	00 d0       	rcall	.+0      	; 0x808 <EXTI_u8IntSetCallBack+0x8>
 808:	cd b7       	in	r28, 0x3d	; 61
 80a:	de b7       	in	r29, 0x3e	; 62
 80c:	8a 83       	std	Y+2, r24	; 0x02
 80e:	7c 83       	std	Y+4, r23	; 0x04
 810:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ErrorState=OK;
 812:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Int==INT0&&Copy_pvIntFunc!=NULL)
 814:	8a 81       	ldd	r24, Y+2	; 0x02
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	59 f4       	brne	.+22     	; 0x830 <EXTI_u8IntSetCallBack+0x30>
 81a:	8b 81       	ldd	r24, Y+3	; 0x03
 81c:	9c 81       	ldd	r25, Y+4	; 0x04
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	39 f0       	breq	.+14     	; 0x830 <EXTI_u8IntSetCallBack+0x30>
	{
		EXTI_pvInt0Func=Copy_pvIntFunc;
 822:	8b 81       	ldd	r24, Y+3	; 0x03
 824:	9c 81       	ldd	r25, Y+4	; 0x04
 826:	90 93 01 01 	sts	0x0101, r25
 82a:	80 93 00 01 	sts	0x0100, r24
 82e:	10 c0       	rjmp	.+32     	; 0x850 <EXTI_u8IntSetCallBack+0x50>
	}
	else if(Copy_u8Int==INT1&&Copy_pvIntFunc!=NULL)
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	82 30       	cpi	r24, 0x02	; 2
 834:	59 f4       	brne	.+22     	; 0x84c <EXTI_u8IntSetCallBack+0x4c>
 836:	8b 81       	ldd	r24, Y+3	; 0x03
 838:	9c 81       	ldd	r25, Y+4	; 0x04
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	39 f0       	breq	.+14     	; 0x84c <EXTI_u8IntSetCallBack+0x4c>
	{
		EXTI_pvInt1Func=Copy_pvIntFunc;
 83e:	8b 81       	ldd	r24, Y+3	; 0x03
 840:	9c 81       	ldd	r25, Y+4	; 0x04
 842:	90 93 03 01 	sts	0x0103, r25
 846:	80 93 02 01 	sts	0x0102, r24
 84a:	02 c0       	rjmp	.+4      	; 0x850 <EXTI_u8IntSetCallBack+0x50>
	}
	else
	{
		Local_ErrorState=NOK;
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
 850:	89 81       	ldd	r24, Y+1	; 0x01
}
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	0f 90       	pop	r0
 85a:	cf 91       	pop	r28
 85c:	df 91       	pop	r29
 85e:	08 95       	ret

00000860 <__vector_1>:

/*ISR of INT0*/
void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
 860:	1f 92       	push	r1
 862:	0f 92       	push	r0
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	0f 92       	push	r0
 868:	11 24       	eor	r1, r1
 86a:	2f 93       	push	r18
 86c:	3f 93       	push	r19
 86e:	4f 93       	push	r20
 870:	5f 93       	push	r21
 872:	6f 93       	push	r22
 874:	7f 93       	push	r23
 876:	8f 93       	push	r24
 878:	9f 93       	push	r25
 87a:	af 93       	push	r26
 87c:	bf 93       	push	r27
 87e:	ef 93       	push	r30
 880:	ff 93       	push	r31
 882:	df 93       	push	r29
 884:	cf 93       	push	r28
 886:	cd b7       	in	r28, 0x3d	; 61
 888:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL)
 88a:	80 91 00 01 	lds	r24, 0x0100
 88e:	90 91 01 01 	lds	r25, 0x0101
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	29 f0       	breq	.+10     	; 0x8a0 <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
 896:	e0 91 00 01 	lds	r30, 0x0100
 89a:	f0 91 01 01 	lds	r31, 0x0101
 89e:	09 95       	icall
	else
	{
		/*DO nothing*/
	}

}
 8a0:	cf 91       	pop	r28
 8a2:	df 91       	pop	r29
 8a4:	ff 91       	pop	r31
 8a6:	ef 91       	pop	r30
 8a8:	bf 91       	pop	r27
 8aa:	af 91       	pop	r26
 8ac:	9f 91       	pop	r25
 8ae:	8f 91       	pop	r24
 8b0:	7f 91       	pop	r23
 8b2:	6f 91       	pop	r22
 8b4:	5f 91       	pop	r21
 8b6:	4f 91       	pop	r20
 8b8:	3f 91       	pop	r19
 8ba:	2f 91       	pop	r18
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <__vector_2>:
/*ISR of INT1*/
void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)
{
 8c6:	1f 92       	push	r1
 8c8:	0f 92       	push	r0
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	0f 92       	push	r0
 8ce:	11 24       	eor	r1, r1
 8d0:	2f 93       	push	r18
 8d2:	3f 93       	push	r19
 8d4:	4f 93       	push	r20
 8d6:	5f 93       	push	r21
 8d8:	6f 93       	push	r22
 8da:	7f 93       	push	r23
 8dc:	8f 93       	push	r24
 8de:	9f 93       	push	r25
 8e0:	af 93       	push	r26
 8e2:	bf 93       	push	r27
 8e4:	ef 93       	push	r30
 8e6:	ff 93       	push	r31
 8e8:	df 93       	push	r29
 8ea:	cf 93       	push	r28
 8ec:	cd b7       	in	r28, 0x3d	; 61
 8ee:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func!=NULL)
 8f0:	80 91 02 01 	lds	r24, 0x0102
 8f4:	90 91 03 01 	lds	r25, 0x0103
 8f8:	00 97       	sbiw	r24, 0x00	; 0
 8fa:	29 f0       	breq	.+10     	; 0x906 <__stack+0x7>
	{
		EXTI_pvInt1Func();
 8fc:	e0 91 02 01 	lds	r30, 0x0102
 900:	f0 91 03 01 	lds	r31, 0x0103
 904:	09 95       	icall
	else
	{
		/*DO nothing*/
	}

}
 906:	cf 91       	pop	r28
 908:	df 91       	pop	r29
 90a:	ff 91       	pop	r31
 90c:	ef 91       	pop	r30
 90e:	bf 91       	pop	r27
 910:	af 91       	pop	r26
 912:	9f 91       	pop	r25
 914:	8f 91       	pop	r24
 916:	7f 91       	pop	r23
 918:	6f 91       	pop	r22
 91a:	5f 91       	pop	r21
 91c:	4f 91       	pop	r20
 91e:	3f 91       	pop	r19
 920:	2f 91       	pop	r18
 922:	0f 90       	pop	r0
 924:	0f be       	out	0x3f, r0	; 63
 926:	0f 90       	pop	r0
 928:	1f 90       	pop	r1
 92a:	18 95       	reti

0000092c <GIE_voidEnable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"
 void GIE_voidEnable(void)
 {
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	cd b7       	in	r28, 0x3d	; 61
 932:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(SREG,SREG_I);
 934:	af e5       	ldi	r26, 0x5F	; 95
 936:	b0 e0       	ldi	r27, 0x00	; 0
 938:	ef e5       	ldi	r30, 0x5F	; 95
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	80 81       	ld	r24, Z
 93e:	80 68       	ori	r24, 0x80	; 128
 940:	8c 93       	st	X, r24
 }
 942:	cf 91       	pop	r28
 944:	df 91       	pop	r29
 946:	08 95       	ret

00000948 <GIE_voidDisable>:
 void GIE_voidDisable(void)
 {
 948:	df 93       	push	r29
 94a:	cf 93       	push	r28
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
	 CLR_BIT(SREG,SREG_I);
 950:	af e5       	ldi	r26, 0x5F	; 95
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	ef e5       	ldi	r30, 0x5F	; 95
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	8f 77       	andi	r24, 0x7F	; 127
 95c:	8c 93       	st	X, r24
 }
 95e:	cf 91       	pop	r28
 960:	df 91       	pop	r29
 962:	08 95       	ret

00000964 <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_interface.h"
#include"PORT_register.h"

void PORT_voidInit(void)
{
 964:	df 93       	push	r29
 966:	cf 93       	push	r28
 968:	cd b7       	in	r28, 0x3d	; 61
 96a:	de b7       	in	r29, 0x3e	; 62
   DDRD=PORTD_DIR;
 96c:	ea e2       	ldi	r30, 0x2A	; 42
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	83 e0       	ldi	r24, 0x03	; 3
 972:	80 83       	st	Z, r24
   DDRC=PORTC_DIR;
 974:	e7 e2       	ldi	r30, 0x27	; 39
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	8f e0       	ldi	r24, 0x0F	; 15
 97a:	80 83       	st	Z, r24
   DDRB=PORTB_DIR;
 97c:	e4 e2       	ldi	r30, 0x24	; 36
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	87 e0       	ldi	r24, 0x07	; 7
 982:	80 83       	st	Z, r24
   PORTD=PORTD_INIT;
 984:	eb e2       	ldi	r30, 0x2B	; 43
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	8c e0       	ldi	r24, 0x0C	; 12
 98a:	80 83       	st	Z, r24
   PORTC=PORTC_INIT;
 98c:	e8 e2       	ldi	r30, 0x28	; 40
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	86 e0       	ldi	r24, 0x06	; 6
 992:	80 83       	st	Z, r24
   PORTB=PORTB_INIT;
 994:	e5 e2       	ldi	r30, 0x25	; 37
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	10 82       	st	Z, r1
}
 99a:	cf 91       	pop	r28
 99c:	df 91       	pop	r29
 99e:	08 95       	ret

000009a0 <main>:
#include"GIE_interface.h"
#include"PORT_interface.h"

void INT1_ISR(void);
void main(void)
{
 9a0:	df 93       	push	r29
 9a2:	cf 93       	push	r28
 9a4:	cd b7       	in	r28, 0x3d	; 61
 9a6:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 9a8:	0e 94 b2 04 	call	0x964	; 0x964 <PORT_voidInit>
	EXTI_u8Int0SetSenseControl(FALLING_EDGE);
 9ac:	83 e0       	ldi	r24, 0x03	; 3
 9ae:	0e 94 08 03 	call	0x610	; 0x610 <EXTI_u8Int0SetSenseControl>
	EXTI_u8IntEnable(INT1);
 9b2:	82 e0       	ldi	r24, 0x02	; 2
 9b4:	0e 94 b6 03 	call	0x76c	; 0x76c <EXTI_u8IntEnable>
	GIE_voidEnable();
 9b8:	0e 94 96 04 	call	0x92c	; 0x92c <GIE_voidEnable>
	EXTI_u8IntSetCallBack(INT1,&INT1_ISR);
 9bc:	25 ee       	ldi	r18, 0xE5	; 229
 9be:	34 e0       	ldi	r19, 0x04	; 4
 9c0:	82 e0       	ldi	r24, 0x02	; 2
 9c2:	b9 01       	movw	r22, r18
 9c4:	0e 94 00 04 	call	0x800	; 0x800 <EXTI_u8IntSetCallBack>
 9c8:	ff cf       	rjmp	.-2      	; 0x9c8 <main+0x28>

000009ca <INT1_ISR>:
	{

	}
}
void INT1_ISR(void)
{
 9ca:	df 93       	push	r29
 9cc:	cf 93       	push	r28
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	41 e0       	ldi	r20, 0x01	; 1
 9d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_u8SetPinValue>
}
 9dc:	cf 91       	pop	r28
 9de:	df 91       	pop	r29
 9e0:	08 95       	ret

000009e2 <_exit>:
 9e2:	f8 94       	cli

000009e4 <__stop_program>:
 9e4:	ff cf       	rjmp	.-2      	; 0x9e4 <__stop_program>
