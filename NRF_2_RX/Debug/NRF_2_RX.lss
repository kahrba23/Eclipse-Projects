
NRF_2_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00002b92  00002c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080018a  0080018a  00002d50  2**0
                  ALLOC
  3 .stab         00002cdc  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001546  00000000  00000000  00005a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000070f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000072c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000092d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000a444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b448  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c157  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 15 	call	0x2aae	; 0x2aae <main>
      8a:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <CLCD_voidSendCommand>:
#include"CLCD_interfaces.h"
#include"CLCD_config.h"
#include"CLCD_privare.h"
#include<util/delay.h>

void CLCD_voidSendCommand(u8 CLCD_u8Command){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	6d 97       	sbiw	r28, 0x1d	; 29
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8d 8f       	std	Y+29, r24	; 0x1d
	/*set rs to low for command*/
	DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_RS_CONTROL_PIN, DIO_u8PIN_LOW);
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
	/*set rw to low for writing*/
	DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_RW_CONTROL_PIN, DIO_u8PIN_LOW);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
	/*set the port value for command*/
	DIO_U8SetPortValue(CLCD_DATA_PORT, CLCD_u8Command>>4);
     d00:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d02:	98 2f       	mov	r25, r24
     d04:	92 95       	swap	r25
     d06:	9f 70       	andi	r25, 0x0F	; 15
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	69 2f       	mov	r22, r25
     d0c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_U8SetPortValue>
	/*set enable pin to display*/
	DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_CONTROL_PIN, DIO_u8PIN_HIGH);
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	62 e0       	ldi	r22, 0x02	; 2
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a0 e0       	ldi	r26, 0x00	; 0
     d20:	b0 e4       	ldi	r27, 0x40	; 64
     d22:	89 8f       	std	Y+25, r24	; 0x19
     d24:	9a 8f       	std	Y+26, r25	; 0x1a
     d26:	ab 8f       	std	Y+27, r26	; 0x1b
     d28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	69 8d       	ldd	r22, Y+25	; 0x19
     d2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d30:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4a e7       	ldi	r20, 0x7A	; 122
     d38:	53 e4       	ldi	r21, 0x43	; 67
     d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8d 8b       	std	Y+21, r24	; 0x15
     d44:	9e 8b       	std	Y+22, r25	; 0x16
     d46:	af 8b       	std	Y+23, r26	; 0x17
     d48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d4a:	6d 89       	ldd	r22, Y+21	; 0x15
     d4c:	7e 89       	ldd	r23, Y+22	; 0x16
     d4e:	8f 89       	ldd	r24, Y+23	; 0x17
     d50:	98 8d       	ldd	r25, Y+24	; 0x18
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5f e3       	ldi	r21, 0x3F	; 63
     d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d5e:	88 23       	and	r24, r24
     d60:	2c f4       	brge	.+10     	; 0xd6c <CLCD_voidSendCommand+0x96>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <CLCD_voidSendCommand+0x114>
	else if (__tmp > 65535)
     d6c:	6d 89       	ldd	r22, Y+21	; 0x15
     d6e:	7e 89       	ldd	r23, Y+22	; 0x16
     d70:	8f 89       	ldd	r24, Y+23	; 0x17
     d72:	98 8d       	ldd	r25, Y+24	; 0x18
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	3f ef       	ldi	r19, 0xFF	; 255
     d78:	4f e7       	ldi	r20, 0x7F	; 127
     d7a:	57 e4       	ldi	r21, 0x47	; 71
     d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d80:	18 16       	cp	r1, r24
     d82:	4c f5       	brge	.+82     	; 0xdd6 <CLCD_voidSendCommand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d84:	69 8d       	ldd	r22, Y+25	; 0x19
     d86:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9c 8b       	std	Y+20, r25	; 0x14
     daa:	8b 8b       	std	Y+19, r24	; 0x13
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <CLCD_voidSendCommand+0xf6>
     dae:	89 e1       	ldi	r24, 0x19	; 25
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9a 8b       	std	Y+18, r25	; 0x12
     db4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db6:	89 89       	ldd	r24, Y+17	; 0x11
     db8:	9a 89       	ldd	r25, Y+18	; 0x12
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <CLCD_voidSendCommand+0xe4>
     dbe:	9a 8b       	std	Y+18, r25	; 0x12
     dc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	8b 89       	ldd	r24, Y+19	; 0x13
     dc4:	9c 89       	ldd	r25, Y+20	; 0x14
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9c 8b       	std	Y+20, r25	; 0x14
     dca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	8b 89       	ldd	r24, Y+19	; 0x13
     dce:	9c 89       	ldd	r25, Y+20	; 0x14
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	69 f7       	brne	.-38     	; 0xdae <CLCD_voidSendCommand+0xd8>
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <CLCD_voidSendCommand+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6d 89       	ldd	r22, Y+21	; 0x15
     dd8:	7e 89       	ldd	r23, Y+22	; 0x16
     dda:	8f 89       	ldd	r24, Y+23	; 0x17
     ddc:	98 8d       	ldd	r25, Y+24	; 0x18
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9c 8b       	std	Y+20, r25	; 0x14
     de8:	8b 8b       	std	Y+19, r24	; 0x13
     dea:	8b 89       	ldd	r24, Y+19	; 0x13
     dec:	9c 89       	ldd	r25, Y+20	; 0x14
     dee:	98 8b       	std	Y+16, r25	; 0x10
     df0:	8f 87       	std	Y+15, r24	; 0x0f
     df2:	8f 85       	ldd	r24, Y+15	; 0x0f
     df4:	98 89       	ldd	r25, Y+16	; 0x10
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <CLCD_voidSendCommand+0x120>
     dfa:	98 8b       	std	Y+16, r25	; 0x10
     dfc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_CONTROL_PIN, DIO_u8PIN_LOW);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>

	DIO_U8SetPortValue(CLCD_DATA_PORT, CLCD_u8Command);
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e0c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_U8SetPortValue>
	DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_CONTROL_PIN, DIO_u8PIN_HIGH);
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	62 e0       	ldi	r22, 0x02	; 2
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	b0 e4       	ldi	r27, 0x40	; 64
     e22:	8b 87       	std	Y+11, r24	; 0x0b
     e24:	9c 87       	std	Y+12, r25	; 0x0c
     e26:	ad 87       	std	Y+13, r26	; 0x0d
     e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e30:	9e 85       	ldd	r25, Y+14	; 0x0e
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	4a e7       	ldi	r20, 0x7A	; 122
     e38:	53 e4       	ldi	r21, 0x43	; 67
     e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	8f 83       	std	Y+7, r24	; 0x07
     e44:	98 87       	std	Y+8, r25	; 0x08
     e46:	a9 87       	std	Y+9, r26	; 0x09
     e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e4a:	6f 81       	ldd	r22, Y+7	; 0x07
     e4c:	78 85       	ldd	r23, Y+8	; 0x08
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	9a 85       	ldd	r25, Y+10	; 0x0a
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e8       	ldi	r20, 0x80	; 128
     e58:	5f e3       	ldi	r21, 0x3F	; 63
     e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e5e:	88 23       	and	r24, r24
     e60:	2c f4       	brge	.+10     	; 0xe6c <CLCD_voidSendCommand+0x196>
		__ticks = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9e 83       	std	Y+6, r25	; 0x06
     e68:	8d 83       	std	Y+5, r24	; 0x05
     e6a:	3f c0       	rjmp	.+126    	; 0xeea <CLCD_voidSendCommand+0x214>
	else if (__tmp > 65535)
     e6c:	6f 81       	ldd	r22, Y+7	; 0x07
     e6e:	78 85       	ldd	r23, Y+8	; 0x08
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	3f ef       	ldi	r19, 0xFF	; 255
     e78:	4f e7       	ldi	r20, 0x7F	; 127
     e7a:	57 e4       	ldi	r21, 0x47	; 71
     e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e80:	18 16       	cp	r1, r24
     e82:	4c f5       	brge	.+82     	; 0xed6 <CLCD_voidSendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e84:	6b 85       	ldd	r22, Y+11	; 0x0b
     e86:	7c 85       	ldd	r23, Y+12	; 0x0c
     e88:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e2       	ldi	r20, 0x20	; 32
     e92:	51 e4       	ldi	r21, 0x41	; 65
     e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	bc 01       	movw	r22, r24
     e9e:	cd 01       	movw	r24, r26
     ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
     eac:	0f c0       	rjmp	.+30     	; 0xecc <CLCD_voidSendCommand+0x1f6>
     eae:	89 e1       	ldi	r24, 0x19	; 25
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <CLCD_voidSendCommand+0x1e4>
     ebe:	9c 83       	std	Y+4, r25	; 0x04
     ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	69 f7       	brne	.-38     	; 0xeae <CLCD_voidSendCommand+0x1d8>
     ed4:	14 c0       	rjmp	.+40     	; 0xefe <CLCD_voidSendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed6:	6f 81       	ldd	r22, Y+7	; 0x07
     ed8:	78 85       	ldd	r23, Y+8	; 0x08
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <CLCD_voidSendCommand+0x220>
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_CONTROL_PIN, DIO_u8PIN_LOW);
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	62 e0       	ldi	r22, 0x02	; 2
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>



}
     f08:	6d 96       	adiw	r28, 0x1d	; 29
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <CLCD_voidSendData>:
void CLCD_voidSendData(u8 CLCD_u8Data){
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	6d 97       	sbiw	r28, 0x1d	; 29
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	8d 8f       	std	Y+29, r24	; 0x1d

	/*set rs to low for data*/

	DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_RS_CONTROL_PIN, DIO_u8PIN_HIGH);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	41 e0       	ldi	r20, 0x01	; 1
     f36:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
	/*set rw to low for writing*/
	DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_RW_CONTROL_PIN, DIO_u8PIN_LOW);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
	/*set the port value for data*/
	DIO_U8SetPortValue(CLCD_DATA_PORT, CLCD_u8Data>>4);
     f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f46:	98 2f       	mov	r25, r24
     f48:	92 95       	swap	r25
     f4a:	9f 70       	andi	r25, 0x0F	; 15
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	69 2f       	mov	r22, r25
     f50:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_U8SetPortValue>
	/*set enable pin to display*/
	DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_CONTROL_PIN, DIO_u8PIN_HIGH);
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	62 e0       	ldi	r22, 0x02	; 2
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e4       	ldi	r27, 0x40	; 64
     f66:	89 8f       	std	Y+25, r24	; 0x19
     f68:	9a 8f       	std	Y+26, r25	; 0x1a
     f6a:	ab 8f       	std	Y+27, r26	; 0x1b
     f6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f6e:	69 8d       	ldd	r22, Y+25	; 0x19
     f70:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f72:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f74:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	4a e7       	ldi	r20, 0x7A	; 122
     f7c:	53 e4       	ldi	r21, 0x43	; 67
     f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	8d 8b       	std	Y+21, r24	; 0x15
     f88:	9e 8b       	std	Y+22, r25	; 0x16
     f8a:	af 8b       	std	Y+23, r26	; 0x17
     f8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f8e:	6d 89       	ldd	r22, Y+21	; 0x15
     f90:	7e 89       	ldd	r23, Y+22	; 0x16
     f92:	8f 89       	ldd	r24, Y+23	; 0x17
     f94:	98 8d       	ldd	r25, Y+24	; 0x18
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	5f e3       	ldi	r21, 0x3F	; 63
     f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa2:	88 23       	and	r24, r24
     fa4:	2c f4       	brge	.+10     	; 0xfb0 <CLCD_voidSendData+0x96>
		__ticks = 1;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	9c 8b       	std	Y+20, r25	; 0x14
     fac:	8b 8b       	std	Y+19, r24	; 0x13
     fae:	3f c0       	rjmp	.+126    	; 0x102e <CLCD_voidSendData+0x114>
	else if (__tmp > 65535)
     fb0:	6d 89       	ldd	r22, Y+21	; 0x15
     fb2:	7e 89       	ldd	r23, Y+22	; 0x16
     fb4:	8f 89       	ldd	r24, Y+23	; 0x17
     fb6:	98 8d       	ldd	r25, Y+24	; 0x18
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	3f ef       	ldi	r19, 0xFF	; 255
     fbc:	4f e7       	ldi	r20, 0x7F	; 127
     fbe:	57 e4       	ldi	r21, 0x47	; 71
     fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc4:	18 16       	cp	r1, r24
     fc6:	4c f5       	brge	.+82     	; 0x101a <CLCD_voidSendData+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc8:	69 8d       	ldd	r22, Y+25	; 0x19
     fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e2       	ldi	r20, 0x20	; 32
     fd6:	51 e4       	ldi	r21, 0x41	; 65
     fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	bc 01       	movw	r22, r24
     fe2:	cd 01       	movw	r24, r26
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9c 8b       	std	Y+20, r25	; 0x14
     fee:	8b 8b       	std	Y+19, r24	; 0x13
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <CLCD_voidSendData+0xf6>
     ff2:	89 e1       	ldi	r24, 0x19	; 25
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9a 8b       	std	Y+18, r25	; 0x12
     ff8:	89 8b       	std	Y+17, r24	; 0x11
     ffa:	89 89       	ldd	r24, Y+17	; 0x11
     ffc:	9a 89       	ldd	r25, Y+18	; 0x12
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <CLCD_voidSendData+0xe4>
    1002:	9a 8b       	std	Y+18, r25	; 0x12
    1004:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1006:	8b 89       	ldd	r24, Y+19	; 0x13
    1008:	9c 89       	ldd	r25, Y+20	; 0x14
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	9c 8b       	std	Y+20, r25	; 0x14
    100e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1010:	8b 89       	ldd	r24, Y+19	; 0x13
    1012:	9c 89       	ldd	r25, Y+20	; 0x14
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	69 f7       	brne	.-38     	; 0xff2 <CLCD_voidSendData+0xd8>
    1018:	14 c0       	rjmp	.+40     	; 0x1042 <CLCD_voidSendData+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101a:	6d 89       	ldd	r22, Y+21	; 0x15
    101c:	7e 89       	ldd	r23, Y+22	; 0x16
    101e:	8f 89       	ldd	r24, Y+23	; 0x17
    1020:	98 8d       	ldd	r25, Y+24	; 0x18
    1022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	9c 8b       	std	Y+20, r25	; 0x14
    102c:	8b 8b       	std	Y+19, r24	; 0x13
    102e:	8b 89       	ldd	r24, Y+19	; 0x13
    1030:	9c 89       	ldd	r25, Y+20	; 0x14
    1032:	98 8b       	std	Y+16, r25	; 0x10
    1034:	8f 87       	std	Y+15, r24	; 0x0f
    1036:	8f 85       	ldd	r24, Y+15	; 0x0f
    1038:	98 89       	ldd	r25, Y+16	; 0x10
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <CLCD_voidSendData+0x120>
    103e:	98 8b       	std	Y+16, r25	; 0x10
    1040:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
		DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_CONTROL_PIN, DIO_u8PIN_LOW);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	62 e0       	ldi	r22, 0x02	; 2
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
		DIO_U8SetPortValue(CLCD_DATA_PORT, CLCD_u8Data);
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1050:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_U8SetPortValue>
			/*set enable pin to display*/
			DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_CONTROL_PIN, DIO_u8PIN_HIGH);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	62 e0       	ldi	r22, 0x02	; 2
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a0 e0       	ldi	r26, 0x00	; 0
    1064:	b0 e4       	ldi	r27, 0x40	; 64
    1066:	8b 87       	std	Y+11, r24	; 0x0b
    1068:	9c 87       	std	Y+12, r25	; 0x0c
    106a:	ad 87       	std	Y+13, r26	; 0x0d
    106c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1070:	7c 85       	ldd	r23, Y+12	; 0x0c
    1072:	8d 85       	ldd	r24, Y+13	; 0x0d
    1074:	9e 85       	ldd	r25, Y+14	; 0x0e
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	4a e7       	ldi	r20, 0x7A	; 122
    107c:	53 e4       	ldi	r21, 0x43	; 67
    107e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	8f 83       	std	Y+7, r24	; 0x07
    1088:	98 87       	std	Y+8, r25	; 0x08
    108a:	a9 87       	std	Y+9, r26	; 0x09
    108c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    108e:	6f 81       	ldd	r22, Y+7	; 0x07
    1090:	78 85       	ldd	r23, Y+8	; 0x08
    1092:	89 85       	ldd	r24, Y+9	; 0x09
    1094:	9a 85       	ldd	r25, Y+10	; 0x0a
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a2:	88 23       	and	r24, r24
    10a4:	2c f4       	brge	.+10     	; 0x10b0 <CLCD_voidSendData+0x196>
		__ticks = 1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	3f c0       	rjmp	.+126    	; 0x112e <CLCD_voidSendData+0x214>
	else if (__tmp > 65535)
    10b0:	6f 81       	ldd	r22, Y+7	; 0x07
    10b2:	78 85       	ldd	r23, Y+8	; 0x08
    10b4:	89 85       	ldd	r24, Y+9	; 0x09
    10b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	4f e7       	ldi	r20, 0x7F	; 127
    10be:	57 e4       	ldi	r21, 0x47	; 71
    10c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c4:	18 16       	cp	r1, r24
    10c6:	4c f5       	brge	.+82     	; 0x111a <CLCD_voidSendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    10cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	9e 83       	std	Y+6, r25	; 0x06
    10ee:	8d 83       	std	Y+5, r24	; 0x05
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <CLCD_voidSendData+0x1f6>
    10f2:	89 e1       	ldi	r24, 0x19	; 25
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9c 83       	std	Y+4, r25	; 0x04
    10f8:	8b 83       	std	Y+3, r24	; 0x03
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <CLCD_voidSendData+0x1e4>
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	9e 81       	ldd	r25, Y+6	; 0x06
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	69 f7       	brne	.-38     	; 0x10f2 <CLCD_voidSendData+0x1d8>
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <CLCD_voidSendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111a:	6f 81       	ldd	r22, Y+7	; 0x07
    111c:	78 85       	ldd	r23, Y+8	; 0x08
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <CLCD_voidSendData+0x220>
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
				DIO_U8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_CONTROL_PIN, DIO_u8PIN_LOW);
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	62 e0       	ldi	r22, 0x02	; 2
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>


}
    114c:	6d 96       	adiw	r28, 0x1d	; 29
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <CLCD_voidSend_String>:
void CLCD_voidSend_String(const char*Copy_pcString){
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <CLCD_voidSend_String+0x6>
    1164:	0f 92       	push	r0
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	9b 83       	std	Y+3, r25	; 0x03
    116c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	Local_u8Counter=0;
    116e:	19 82       	std	Y+1, r1	; 0x01
    1170:	0e c0       	rjmp	.+28     	; 0x118e <CLCD_voidSend_String+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0'){
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	fc 01       	movw	r30, r24
    117e:	e2 0f       	add	r30, r18
    1180:	f3 1f       	adc	r31, r19
    1182:	80 81       	ld	r24, Z
    1184:	0e 94 8d 07 	call	0xf1a	; 0xf1a <CLCD_voidSendData>
		Local_u8Counter++;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	89 83       	std	Y+1, r24	; 0x01

}
void CLCD_voidSend_String(const char*Copy_pcString){
	u8 Local_u8Counter;
	Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0'){
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	9b 81       	ldd	r25, Y+3	; 0x03
    1198:	fc 01       	movw	r30, r24
    119a:	e2 0f       	add	r30, r18
    119c:	f3 1f       	adc	r31, r19
    119e:	80 81       	ld	r24, Z
    11a0:	88 23       	and	r24, r24
    11a2:	39 f7       	brne	.-50     	; 0x1172 <CLCD_voidSend_String+0x14>





}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <CLCD_voidGo_To_X_Y>:
void CLCD_voidGo_To_X_Y(u8 Copy_u8Xpos,u8 Copy_u8Ypos){
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <CLCD_voidGo_To_X_Y+0x6>
    11b6:	0f 92       	push	r0
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Postion;
	if(Copy_u8Xpos==0){
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	88 23       	and	r24, r24
    11c4:	19 f4       	brne	.+6      	; 0x11cc <CLCD_voidGo_To_X_Y+0x1c>
		Local_u8Postion=Copy_u8Ypos;
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <CLCD_voidGo_To_X_Y+0x28>

	}
	else if(Copy_u8Xpos==1){
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	19 f4       	brne	.+6      	; 0x11d8 <CLCD_voidGo_To_X_Y+0x28>
		Local_u8Postion=0x40+Copy_u8Ypos;
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	80 5c       	subi	r24, 0xC0	; 192
    11d6:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(128+Local_u8Postion);
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	80 58       	subi	r24, 0x80	; 128
    11dc:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <CLCD_voidDraw_Sympol>:
void CLCD_voidDraw_Sympol(u8 *Copy_Pu8Pattren,u8 Copy_u8Block_Num,u8 Copy_u8XPos,u8 Copy_u8YPos){
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	27 97       	sbiw	r28, 0x07	; 7
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	9c 83       	std	Y+4, r25	; 0x04
    1202:	8b 83       	std	Y+3, r24	; 0x03
    1204:	6d 83       	std	Y+5, r22	; 0x05
    1206:	4e 83       	std	Y+6, r20	; 0x06
    1208:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address=0;
    120a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter=0;
    120c:	19 82       	std	Y+1, r1	; 0x01
	/*CLACULATE CGRAM STARTING BYTE ADDRESS*/
	Local_u8Address=Copy_u8Block_Num*8;
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	8a 83       	std	Y+2, r24	; 0x02
	/*SET THE SCGRAM BY MAKING THE MEMORY POINTER POINT TO THE ADDRESS*/
	CLCD_voidSendCommand(64+Local_u8Address);
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	80 5c       	subi	r24, 0xC0	; 192
    1226:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
	/*STARTING WRITING IN THE SCGRAM ADDRESS BYTE BY BYTE*/
	for( Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++){
    122a:	19 82       	std	Y+1, r1	; 0x01
    122c:	0e c0       	rjmp	.+28     	; 0x124a <CLCD_voidDraw_Sympol+0x5e>
		CLCD_voidSendData(Copy_Pu8Pattren[Local_u8Counter]);
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	fc 01       	movw	r30, r24
    123a:	e2 0f       	add	r30, r18
    123c:	f3 1f       	adc	r31, r19
    123e:	80 81       	ld	r24, Z
    1240:	0e 94 8d 07 	call	0xf1a	; 0xf1a <CLCD_voidSendData>
	/*CLACULATE CGRAM STARTING BYTE ADDRESS*/
	Local_u8Address=Copy_u8Block_Num*8;
	/*SET THE SCGRAM BY MAKING THE MEMORY POINTER POINT TO THE ADDRESS*/
	CLCD_voidSendCommand(64+Local_u8Address);
	/*STARTING WRITING IN THE SCGRAM ADDRESS BYTE BY BYTE*/
	for( Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++){
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	88 30       	cpi	r24, 0x08	; 8
    124e:	78 f3       	brcs	.-34     	; 0x122e <CLCD_voidDraw_Sympol+0x42>
		CLCD_voidSendData(Copy_Pu8Pattren[Local_u8Counter]);
	}
	/*RETURN THE POINTER TO DDRAM */
	CLCD_voidGo_To_X_Y(Copy_u8XPos, Copy_u8YPos);
    1250:	8e 81       	ldd	r24, Y+6	; 0x06
    1252:	6f 81       	ldd	r22, Y+7	; 0x07
    1254:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <CLCD_voidGo_To_X_Y>
	/*SENDING THE DATA FROM CGRAM TO DDRM*/
	CLCD_voidSendData(Copy_u8Block_Num);
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <CLCD_voidSendData>
}
    125e:	27 96       	adiw	r28, 0x07	; 7
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <CLCD_voidClear_Display>:
void CLCD_voidClear_Display(void){
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	2e 97       	sbiw	r28, 0x0e	; 14
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
	/*send command to clear display*/
	CLCD_voidSendCommand(0b00000001);
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a0 ea       	ldi	r26, 0xA0	; 160
    1290:	b1 e4       	ldi	r27, 0x41	; 65
    1292:	8b 87       	std	Y+11, r24	; 0x0b
    1294:	9c 87       	std	Y+12, r25	; 0x0c
    1296:	ad 87       	std	Y+13, r26	; 0x0d
    1298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129a:	6b 85       	ldd	r22, Y+11	; 0x0b
    129c:	7c 85       	ldd	r23, Y+12	; 0x0c
    129e:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	4a e7       	ldi	r20, 0x7A	; 122
    12a8:	53 e4       	ldi	r21, 0x43	; 67
    12aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	8f 83       	std	Y+7, r24	; 0x07
    12b4:	98 87       	std	Y+8, r25	; 0x08
    12b6:	a9 87       	std	Y+9, r26	; 0x09
    12b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ba:	6f 81       	ldd	r22, Y+7	; 0x07
    12bc:	78 85       	ldd	r23, Y+8	; 0x08
    12be:	89 85       	ldd	r24, Y+9	; 0x09
    12c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e8       	ldi	r20, 0x80	; 128
    12c8:	5f e3       	ldi	r21, 0x3F	; 63
    12ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ce:	88 23       	and	r24, r24
    12d0:	2c f4       	brge	.+10     	; 0x12dc <CLCD_voidClear_Display+0x6c>
		__ticks = 1;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	9e 83       	std	Y+6, r25	; 0x06
    12d8:	8d 83       	std	Y+5, r24	; 0x05
    12da:	3f c0       	rjmp	.+126    	; 0x135a <CLCD_voidClear_Display+0xea>
	else if (__tmp > 65535)
    12dc:	6f 81       	ldd	r22, Y+7	; 0x07
    12de:	78 85       	ldd	r23, Y+8	; 0x08
    12e0:	89 85       	ldd	r24, Y+9	; 0x09
    12e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	3f ef       	ldi	r19, 0xFF	; 255
    12e8:	4f e7       	ldi	r20, 0x7F	; 127
    12ea:	57 e4       	ldi	r21, 0x47	; 71
    12ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f0:	18 16       	cp	r1, r24
    12f2:	4c f5       	brge	.+82     	; 0x1346 <CLCD_voidClear_Display+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e2       	ldi	r20, 0x20	; 32
    1302:	51 e4       	ldi	r21, 0x41	; 65
    1304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	bc 01       	movw	r22, r24
    130e:	cd 01       	movw	r24, r26
    1310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	9e 83       	std	Y+6, r25	; 0x06
    131a:	8d 83       	std	Y+5, r24	; 0x05
    131c:	0f c0       	rjmp	.+30     	; 0x133c <CLCD_voidClear_Display+0xcc>
    131e:	89 e1       	ldi	r24, 0x19	; 25
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	f1 f7       	brne	.-4      	; 0x132a <CLCD_voidClear_Display+0xba>
    132e:	9c 83       	std	Y+4, r25	; 0x04
    1330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	69 f7       	brne	.-38     	; 0x131e <CLCD_voidClear_Display+0xae>
    1344:	14 c0       	rjmp	.+40     	; 0x136e <CLCD_voidClear_Display+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1346:	6f 81       	ldd	r22, Y+7	; 0x07
    1348:	78 85       	ldd	r23, Y+8	; 0x08
    134a:	89 85       	ldd	r24, Y+9	; 0x09
    134c:	9a 85       	ldd	r25, Y+10	; 0x0a
    134e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	9e 83       	std	Y+6, r25	; 0x06
    1358:	8d 83       	std	Y+5, r24	; 0x05
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <CLCD_voidClear_Display+0xf6>
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

}
    136e:	2e 96       	adiw	r28, 0x0e	; 14
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <CLCD_voidInit>:


void CLCD_voidInit(void){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	6c 97       	sbiw	r28, 0x1c	; 28
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e2       	ldi	r26, 0x20	; 32
    139a:	b2 e4       	ldi	r27, 0x42	; 66
    139c:	89 8f       	std	Y+25, r24	; 0x19
    139e:	9a 8f       	std	Y+26, r25	; 0x1a
    13a0:	ab 8f       	std	Y+27, r26	; 0x1b
    13a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a4:	69 8d       	ldd	r22, Y+25	; 0x19
    13a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	4a e7       	ldi	r20, 0x7A	; 122
    13b2:	53 e4       	ldi	r21, 0x43	; 67
    13b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	8d 8b       	std	Y+21, r24	; 0x15
    13be:	9e 8b       	std	Y+22, r25	; 0x16
    13c0:	af 8b       	std	Y+23, r26	; 0x17
    13c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13c4:	6d 89       	ldd	r22, Y+21	; 0x15
    13c6:	7e 89       	ldd	r23, Y+22	; 0x16
    13c8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ca:	98 8d       	ldd	r25, Y+24	; 0x18
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e8       	ldi	r20, 0x80	; 128
    13d2:	5f e3       	ldi	r21, 0x3F	; 63
    13d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d8:	88 23       	and	r24, r24
    13da:	2c f4       	brge	.+10     	; 0x13e6 <CLCD_voidInit+0x66>
		__ticks = 1;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9c 8b       	std	Y+20, r25	; 0x14
    13e2:	8b 8b       	std	Y+19, r24	; 0x13
    13e4:	3f c0       	rjmp	.+126    	; 0x1464 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    13e6:	6d 89       	ldd	r22, Y+21	; 0x15
    13e8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ea:	8f 89       	ldd	r24, Y+23	; 0x17
    13ec:	98 8d       	ldd	r25, Y+24	; 0x18
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	3f ef       	ldi	r19, 0xFF	; 255
    13f2:	4f e7       	ldi	r20, 0x7F	; 127
    13f4:	57 e4       	ldi	r21, 0x47	; 71
    13f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fa:	18 16       	cp	r1, r24
    13fc:	4c f5       	brge	.+82     	; 0x1450 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e2       	ldi	r20, 0x20	; 32
    140c:	51 e4       	ldi	r21, 0x41	; 65
    140e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	bc 01       	movw	r22, r24
    1418:	cd 01       	movw	r24, r26
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9c 8b       	std	Y+20, r25	; 0x14
    1424:	8b 8b       	std	Y+19, r24	; 0x13
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <CLCD_voidInit+0xc6>
    1428:	89 e1       	ldi	r24, 0x19	; 25
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9a 8b       	std	Y+18, r25	; 0x12
    142e:	89 8b       	std	Y+17, r24	; 0x11
    1430:	89 89       	ldd	r24, Y+17	; 0x11
    1432:	9a 89       	ldd	r25, Y+18	; 0x12
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <CLCD_voidInit+0xb4>
    1438:	9a 8b       	std	Y+18, r25	; 0x12
    143a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	9c 89       	ldd	r25, Y+20	; 0x14
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	9c 8b       	std	Y+20, r25	; 0x14
    1444:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1446:	8b 89       	ldd	r24, Y+19	; 0x13
    1448:	9c 89       	ldd	r25, Y+20	; 0x14
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	69 f7       	brne	.-38     	; 0x1428 <CLCD_voidInit+0xa8>
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1450:	6d 89       	ldd	r22, Y+21	; 0x15
    1452:	7e 89       	ldd	r23, Y+22	; 0x16
    1454:	8f 89       	ldd	r24, Y+23	; 0x17
    1456:	98 8d       	ldd	r25, Y+24	; 0x18
    1458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
    1464:	8b 89       	ldd	r24, Y+19	; 0x13
    1466:	9c 89       	ldd	r25, Y+20	; 0x14
    1468:	98 8b       	std	Y+16, r25	; 0x10
    146a:	8f 87       	std	Y+15, r24	; 0x0f
    146c:	8f 85       	ldd	r24, Y+15	; 0x0f
    146e:	98 89       	ldd	r25, Y+16	; 0x10
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <CLCD_voidInit+0xf0>
    1474:	98 8b       	std	Y+16, r25	; 0x10
    1476:	8f 87       	std	Y+15, r24	; 0x0f
	/*wait more than 30ms*/
		_delay_ms(40);
		/*function set command :2 lines,5*8 font size and 4bit mode*/
		CLCD_voidSendCommand(0x33);
    1478:	83 e3       	ldi	r24, 0x33	; 51
    147a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
		/*display the screen on ,display the cursor on,display cursor blinking*/
		CLCD_voidSendCommand(0x32);
    147e:	82 e3       	ldi	r24, 0x32	; 50
    1480:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
		/*clear display*/
		CLCD_voidSendCommand(0x28);
    1484:	88 e2       	ldi	r24, 0x28	; 40
    1486:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
		CLCD_voidSendCommand(0x0c);
    148a:	8c e0       	ldi	r24, 0x0C	; 12
    148c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
		CLCD_voidSendCommand(0x06);
    1490:	86 e0       	ldi	r24, 0x06	; 6
    1492:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
		CLCD_voidSendCommand(0x01);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a0 e0       	ldi	r26, 0x00	; 0
    14a2:	b0 e4       	ldi	r27, 0x40	; 64
    14a4:	8b 87       	std	Y+11, r24	; 0x0b
    14a6:	9c 87       	std	Y+12, r25	; 0x0c
    14a8:	ad 87       	std	Y+13, r26	; 0x0d
    14aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a e7       	ldi	r20, 0x7A	; 122
    14ba:	53 e4       	ldi	r21, 0x43	; 67
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8f 83       	std	Y+7, r24	; 0x07
    14c6:	98 87       	std	Y+8, r25	; 0x08
    14c8:	a9 87       	std	Y+9, r26	; 0x09
    14ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14cc:	6f 81       	ldd	r22, Y+7	; 0x07
    14ce:	78 85       	ldd	r23, Y+8	; 0x08
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	2c f4       	brge	.+10     	; 0x14ee <CLCD_voidInit+0x16e>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <CLCD_voidInit+0x1ec>
	else if (__tmp > 65535)
    14ee:	6f 81       	ldd	r22, Y+7	; 0x07
    14f0:	78 85       	ldd	r23, Y+8	; 0x08
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	4c f5       	brge	.+82     	; 0x1558 <CLCD_voidInit+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	6b 85       	ldd	r22, Y+11	; 0x0b
    1508:	7c 85       	ldd	r23, Y+12	; 0x0c
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	9e 85       	ldd	r25, Y+14	; 0x0e
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	0f c0       	rjmp	.+30     	; 0x154e <CLCD_voidInit+0x1ce>
    1530:	89 e1       	ldi	r24, 0x19	; 25
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9c 83       	std	Y+4, r25	; 0x04
    1536:	8b 83       	std	Y+3, r24	; 0x03
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <CLCD_voidInit+0x1bc>
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f7       	brne	.-38     	; 0x1530 <CLCD_voidInit+0x1b0>
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <CLCD_voidInit+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <CLCD_voidInit+0x1f8>
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);


}
    1580:	6c 96       	adiw	r28, 0x1c	; 28
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <DIO_U8SetPinDirection>:

#include"DIO_register.h"
#include"DIO_private.h"
#include"DIO_interface.h"
#include"DIO_config.h"
u8 DIO_U8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction){
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	28 97       	sbiw	r28, 0x08	; 8
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	8a 83       	std	Y+2, r24	; 0x02
    15a8:	6b 83       	std	Y+3, r22	; 0x03
    15aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    15ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	88 30       	cpi	r24, 0x08	; 8
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <DIO_U8SetPinDirection+0x24>
    15b4:	b3 c0       	rjmp	.+358    	; 0x171c <DIO_U8SetPinDirection+0x18a>
		if(Copy_u8Direction==DIO_u8PIN_INPUT){
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	88 23       	and	r24, r24
    15ba:	09 f0       	breq	.+2      	; 0x15be <DIO_U8SetPinDirection+0x2c>
    15bc:	56 c0       	rjmp	.+172    	; 0x166a <DIO_U8SetPinDirection+0xd8>
			switch(Copy_u8Port){
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	38 87       	std	Y+8, r19	; 0x08
    15c6:	2f 83       	std	Y+7, r18	; 0x07
    15c8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ca:	98 85       	ldd	r25, Y+8	; 0x08
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	f9 f0       	breq	.+62     	; 0x1610 <DIO_U8SetPinDirection+0x7e>
    15d2:	2f 81       	ldd	r18, Y+7	; 0x07
    15d4:	38 85       	ldd	r19, Y+8	; 0x08
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	79 f1       	breq	.+94     	; 0x163a <DIO_U8SetPinDirection+0xa8>
    15dc:	8f 81       	ldd	r24, Y+7	; 0x07
    15de:	98 85       	ldd	r25, Y+8	; 0x08
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <DIO_U8SetPinDirection+0x54>
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <DIO_U8SetPinDirection+0xd2>
			case DIO_u8PORTD:CLEAR_BIT(DDRD,Copy_u8Pin);break;
    15e6:	aa e2       	ldi	r26, 0x2A	; 42
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ea e2       	ldi	r30, 0x2A	; 42
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_U8SetPinDirection+0x72>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_U8SetPinDirection+0x6e>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	88 c0       	rjmp	.+272    	; 0x1720 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTB:CLEAR_BIT(DDRB,Copy_u8Pin);break;
    1610:	a4 e2       	ldi	r26, 0x24	; 36
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e4 e2       	ldi	r30, 0x24	; 36
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_U8SetPinDirection+0x9c>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_U8SetPinDirection+0x98>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	73 c0       	rjmp	.+230    	; 0x1720 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTC:CLEAR_BIT(DDRC,Copy_u8Pin);break;
    163a:	a7 e2       	ldi	r26, 0x27	; 39
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e7 e2       	ldi	r30, 0x27	; 39
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_U8SetPinDirection+0xc6>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_U8SetPinDirection+0xc2>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	5e c0       	rjmp	.+188    	; 0x1720 <DIO_U8SetPinDirection+0x18e>
			default :Local_u8ErrorState=1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	5b c0       	rjmp	.+182    	; 0x1720 <DIO_U8SetPinDirection+0x18e>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT){
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	09 f0       	breq	.+2      	; 0x1672 <DIO_U8SetPinDirection+0xe0>
    1670:	52 c0       	rjmp	.+164    	; 0x1716 <DIO_U8SetPinDirection+0x184>
			switch(Copy_u8Port){
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3e 83       	std	Y+6, r19	; 0x06
    167a:	2d 83       	std	Y+5, r18	; 0x05
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	e9 f0       	breq	.+58     	; 0x16c0 <DIO_U8SetPinDirection+0x12e>
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	3e 81       	ldd	r19, Y+6	; 0x06
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	61 f1       	breq	.+88     	; 0x16e8 <DIO_U8SetPinDirection+0x156>
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	e1 f5       	brne	.+120    	; 0x1710 <DIO_U8SetPinDirection+0x17e>
			case DIO_u8PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
    1698:	aa e2       	ldi	r26, 0x2A	; 42
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ea e2       	ldi	r30, 0x2A	; 42
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_U8SetPinDirection+0x124>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_U8SetPinDirection+0x120>
    16ba:	84 2b       	or	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	30 c0       	rjmp	.+96     	; 0x1720 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
    16c0:	a4 e2       	ldi	r26, 0x24	; 36
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e4 e2       	ldi	r30, 0x24	; 36
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_U8SetPinDirection+0x14c>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <DIO_U8SetPinDirection+0x148>
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	1c c0       	rjmp	.+56     	; 0x1720 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
    16e8:	a7 e2       	ldi	r26, 0x27	; 39
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e7 e2       	ldi	r30, 0x27	; 39
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_U8SetPinDirection+0x174>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_U8SetPinDirection+0x170>
    170a:	84 2b       	or	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	08 c0       	rjmp	.+16     	; 0x1720 <DIO_U8SetPinDirection+0x18e>
			default :Local_u8ErrorState=1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <DIO_U8SetPinDirection+0x18e>
			}
		}
		else{
			Local_u8ErrorState=1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_U8SetPinDirection+0x18e>
		}

	}
	else{
		Local_u8ErrorState=1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1720:	89 81       	ldd	r24, Y+1	; 0x01

}
    1722:	28 96       	adiw	r28, 0x08	; 8
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <DIO_U8SetPortirection>:
u8 DIO_U8SetPortirection(u8 Copy_u8Port,u8 Copy_u8Direction){
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	00 d0       	rcall	.+0      	; 0x173a <DIO_U8SetPortirection+0x6>
    173a:	00 d0       	rcall	.+0      	; 0x173c <DIO_U8SetPortirection+0x8>
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	8a 83       	std	Y+2, r24	; 0x02
    1744:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1746:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3d 83       	std	Y+5, r19	; 0x05
    1750:	2c 83       	std	Y+4, r18	; 0x04
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	71 f0       	breq	.+28     	; 0x1778 <DIO_U8SetPortirection+0x44>
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	71 f0       	breq	.+28     	; 0x1782 <DIO_U8SetPortirection+0x4e>
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	79 f4       	brne	.+30     	; 0x178c <DIO_U8SetPortirection+0x58>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    176e:	ea e2       	ldi	r30, 0x2A	; 42
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	80 83       	st	Z, r24
    1776:	0c c0       	rjmp	.+24     	; 0x1790 <DIO_U8SetPortirection+0x5c>
	case DIO_u8PORTB: DDRB =Copy_u8Direction; break;
    1778:	e4 e2       	ldi	r30, 0x24	; 36
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	80 83       	st	Z, r24
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <DIO_U8SetPortirection+0x5c>
	case DIO_u8PORTC: DDRC =Copy_u8Direction; break;
    1782:	e7 e2       	ldi	r30, 0x27	; 39
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	80 83       	st	Z, r24
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_U8SetPortirection+0x5c>
	default:Local_u8ErrorState=1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorState;
    1790:	89 81       	ldd	r24, Y+1	; 0x01

}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <DIO_U8SetPinValue>:
u8 DIO_U8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Vlaue){
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	28 97       	sbiw	r28, 0x08	; 8
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	8a 83       	std	Y+2, r24	; 0x02
    17b8:	6b 83       	std	Y+3, r22	; 0x03
    17ba:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    17bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	88 30       	cpi	r24, 0x08	; 8
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <DIO_U8SetPinValue+0x24>
    17c4:	b3 c0       	rjmp	.+358    	; 0x192c <DIO_U8SetPinValue+0x18a>
			if(Copy_u8Vlaue==DIO_u8PIN_LOW){
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	88 23       	and	r24, r24
    17ca:	09 f0       	breq	.+2      	; 0x17ce <DIO_U8SetPinValue+0x2c>
    17cc:	56 c0       	rjmp	.+172    	; 0x187a <DIO_U8SetPinValue+0xd8>
				switch(Copy_u8Port){
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	38 87       	std	Y+8, r19	; 0x08
    17d6:	2f 83       	std	Y+7, r18	; 0x07
    17d8:	8f 81       	ldd	r24, Y+7	; 0x07
    17da:	98 85       	ldd	r25, Y+8	; 0x08
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	f9 f0       	breq	.+62     	; 0x1820 <DIO_U8SetPinValue+0x7e>
    17e2:	2f 81       	ldd	r18, Y+7	; 0x07
    17e4:	38 85       	ldd	r19, Y+8	; 0x08
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	79 f1       	breq	.+94     	; 0x184a <DIO_U8SetPinValue+0xa8>
    17ec:	8f 81       	ldd	r24, Y+7	; 0x07
    17ee:	98 85       	ldd	r25, Y+8	; 0x08
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <DIO_U8SetPinValue+0x54>
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <DIO_U8SetPinValue+0xd2>
				case DIO_u8PORTD:CLEAR_BIT(PORTD,Copy_u8Pin);break;
    17f6:	ab e2       	ldi	r26, 0x2B	; 43
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	eb e2       	ldi	r30, 0x2B	; 43
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <DIO_U8SetPinValue+0x72>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <DIO_U8SetPinValue+0x6e>
    1818:	80 95       	com	r24
    181a:	84 23       	and	r24, r20
    181c:	8c 93       	st	X, r24
    181e:	88 c0       	rjmp	.+272    	; 0x1930 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTB:CLEAR_BIT(PORTB,Copy_u8Pin);break;
    1820:	a5 e2       	ldi	r26, 0x25	; 37
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e5 e2       	ldi	r30, 0x25	; 37
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_U8SetPinValue+0x9c>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_U8SetPinValue+0x98>
    1842:	80 95       	com	r24
    1844:	84 23       	and	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	73 c0       	rjmp	.+230    	; 0x1930 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTC:CLEAR_BIT(PORTC,Copy_u8Pin);break;
    184a:	a8 e2       	ldi	r26, 0x28	; 40
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e8 e2       	ldi	r30, 0x28	; 40
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_U8SetPinValue+0xc6>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_U8SetPinValue+0xc2>
    186c:	80 95       	com	r24
    186e:	84 23       	and	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	5e c0       	rjmp	.+188    	; 0x1930 <DIO_U8SetPinValue+0x18e>
				default :Local_u8ErrorState=1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	5b c0       	rjmp	.+182    	; 0x1930 <DIO_U8SetPinValue+0x18e>
				}
			}
			else if(Copy_u8Vlaue==DIO_u8PIN_HIGH)
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	09 f0       	breq	.+2      	; 0x1882 <DIO_U8SetPinValue+0xe0>
    1880:	52 c0       	rjmp	.+164    	; 0x1926 <DIO_U8SetPinValue+0x184>
			{
				switch(Copy_u8Port){
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3e 83       	std	Y+6, r19	; 0x06
    188a:	2d 83       	std	Y+5, r18	; 0x05
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 05       	cpc	r25, r1
    1894:	e9 f0       	breq	.+58     	; 0x18d0 <DIO_U8SetPinValue+0x12e>
    1896:	2d 81       	ldd	r18, Y+5	; 0x05
    1898:	3e 81       	ldd	r19, Y+6	; 0x06
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	61 f1       	breq	.+88     	; 0x18f8 <DIO_U8SetPinValue+0x156>
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	e1 f5       	brne	.+120    	; 0x1920 <DIO_U8SetPinValue+0x17e>
				case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    18a8:	ab e2       	ldi	r26, 0x2B	; 43
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e2       	ldi	r30, 0x2B	; 43
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_U8SetPinValue+0x124>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <DIO_U8SetPinValue+0x120>
    18ca:	84 2b       	or	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	30 c0       	rjmp	.+96     	; 0x1930 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    18d0:	a5 e2       	ldi	r26, 0x25	; 37
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e2       	ldi	r30, 0x25	; 37
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_U8SetPinValue+0x14c>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_U8SetPinValue+0x148>
    18f2:	84 2b       	or	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	1c c0       	rjmp	.+56     	; 0x1930 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    18f8:	a8 e2       	ldi	r26, 0x28	; 40
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e8 e2       	ldi	r30, 0x28	; 40
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_U8SetPinValue+0x174>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_U8SetPinValue+0x170>
    191a:	84 2b       	or	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <DIO_U8SetPinValue+0x18e>
				default :Local_u8ErrorState=1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <DIO_U8SetPinValue+0x18e>
				}
			}
			else{
				Local_u8ErrorState=1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_U8SetPinValue+0x18e>
			}

		}
		else{
			Local_u8ErrorState=1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
    1930:	89 81       	ldd	r24, Y+1	; 0x01

}
    1932:	28 96       	adiw	r28, 0x08	; 8
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <DIO_U8SetPortValue>:
u8 DIO_U8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <DIO_U8SetPortValue+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <DIO_U8SetPortValue+0x8>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	8a 83       	std	Y+2, r24	; 0x02
    1954:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1956:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3d 83       	std	Y+5, r19	; 0x05
    1960:	2c 83       	std	Y+4, r18	; 0x04
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	71 f0       	breq	.+28     	; 0x1988 <DIO_U8SetPortValue+0x44>
    196c:	2c 81       	ldd	r18, Y+4	; 0x04
    196e:	3d 81       	ldd	r19, Y+5	; 0x05
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	71 f0       	breq	.+28     	; 0x1992 <DIO_U8SetPortValue+0x4e>
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	9d 81       	ldd	r25, Y+5	; 0x05
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	79 f4       	brne	.+30     	; 0x199c <DIO_U8SetPortValue+0x58>
		case DIO_u8PORTD: PORTD =Copy_u8Value; break;
    197e:	eb e2       	ldi	r30, 0x2B	; 43
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	80 83       	st	Z, r24
    1986:	0c c0       	rjmp	.+24     	; 0x19a0 <DIO_U8SetPortValue+0x5c>
		case DIO_u8PORTB: PORTB =Copy_u8Value; break;
    1988:	e5 e2       	ldi	r30, 0x25	; 37
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	80 83       	st	Z, r24
    1990:	07 c0       	rjmp	.+14     	; 0x19a0 <DIO_U8SetPortValue+0x5c>
		case DIO_u8PORTC: PORTC =Copy_u8Value; break;
    1992:	e8 e2       	ldi	r30, 0x28	; 40
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	80 83       	st	Z, r24
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <DIO_U8SetPortValue+0x5c>
		default:Local_u8ErrorState=1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01

		}
	return Local_u8ErrorState;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01

}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_u8Value ){
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	27 97       	sbiw	r28, 0x07	; 7
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	8a 83       	std	Y+2, r24	; 0x02
    19c8:	6b 83       	std	Y+3, r22	; 0x03
    19ca:	5d 83       	std	Y+5, r21	; 0x05
    19cc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    19ce:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value!=NULL&&Copy_u8Pin<=DIO_u8PIN7){
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	9d 81       	ldd	r25, Y+5	; 0x05
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	09 f4       	brne	.+2      	; 0x19da <DIO_U8GetPinValue+0x28>
    19d8:	58 c0       	rjmp	.+176    	; 0x1a8a <DIO_U8GetPinValue+0xd8>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	88 30       	cpi	r24, 0x08	; 8
    19de:	08 f0       	brcs	.+2      	; 0x19e2 <DIO_U8GetPinValue+0x30>
    19e0:	54 c0       	rjmp	.+168    	; 0x1a8a <DIO_U8GetPinValue+0xd8>
		switch(Copy_u8Port){
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3f 83       	std	Y+7, r19	; 0x07
    19ea:	2e 83       	std	Y+6, r18	; 0x06
    19ec:	4e 81       	ldd	r20, Y+6	; 0x06
    19ee:	5f 81       	ldd	r21, Y+7	; 0x07
    19f0:	41 30       	cpi	r20, 0x01	; 1
    19f2:	51 05       	cpc	r21, r1
    19f4:	f9 f0       	breq	.+62     	; 0x1a34 <DIO_U8GetPinValue+0x82>
    19f6:	8e 81       	ldd	r24, Y+6	; 0x06
    19f8:	9f 81       	ldd	r25, Y+7	; 0x07
    19fa:	82 30       	cpi	r24, 0x02	; 2
    19fc:	91 05       	cpc	r25, r1
    19fe:	71 f1       	breq	.+92     	; 0x1a5c <DIO_U8GetPinValue+0xaa>
    1a00:	2e 81       	ldd	r18, Y+6	; 0x06
    1a02:	3f 81       	ldd	r19, Y+7	; 0x07
    1a04:	21 15       	cp	r18, r1
    1a06:	31 05       	cpc	r19, r1
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <DIO_U8GetPinValue+0x5a>
    1a0a:	3c c0       	rjmp	.+120    	; 0x1a84 <DIO_U8GetPinValue+0xd2>
		case DIO_u8PORTD: *Copy_u8Value=GET_BIT(PIND ,Copy_u8Pin);break;
    1a0c:	e9 e2       	ldi	r30, 0x29	; 41
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a9 01       	movw	r20, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <DIO_U8GetPinValue+0x72>
    1a20:	55 95       	asr	r21
    1a22:	47 95       	ror	r20
    1a24:	8a 95       	dec	r24
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <DIO_U8GetPinValue+0x6e>
    1a28:	ca 01       	movw	r24, r20
    1a2a:	81 70       	andi	r24, 0x01	; 1
    1a2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a30:	80 83       	st	Z, r24
    1a32:	2d c0       	rjmp	.+90     	; 0x1a8e <DIO_U8GetPinValue+0xdc>
        case DIO_u8PORTB: *Copy_u8Value=GET_BIT(PINB ,Copy_u8Pin);break;
    1a34:	e3 e2       	ldi	r30, 0x23	; 35
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	a9 01       	movw	r20, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <DIO_U8GetPinValue+0x9a>
    1a48:	55 95       	asr	r21
    1a4a:	47 95       	ror	r20
    1a4c:	8a 95       	dec	r24
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <DIO_U8GetPinValue+0x96>
    1a50:	ca 01       	movw	r24, r20
    1a52:	81 70       	andi	r24, 0x01	; 1
    1a54:	ec 81       	ldd	r30, Y+4	; 0x04
    1a56:	fd 81       	ldd	r31, Y+5	; 0x05
    1a58:	80 83       	st	Z, r24
    1a5a:	19 c0       	rjmp	.+50     	; 0x1a8e <DIO_U8GetPinValue+0xdc>
        case DIO_u8PORTC:*Copy_u8Value=GET_BIT(PINC  ,Copy_u8Pin);break;
    1a5c:	e6 e2       	ldi	r30, 0x26	; 38
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a9 01       	movw	r20, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_U8GetPinValue+0xc2>
    1a70:	55 95       	asr	r21
    1a72:	47 95       	ror	r20
    1a74:	8a 95       	dec	r24
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_U8GetPinValue+0xbe>
    1a78:	ca 01       	movw	r24, r20
    1a7a:	81 70       	andi	r24, 0x01	; 1
    1a7c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a7e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a80:	80 83       	st	Z, r24
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <DIO_U8GetPinValue+0xdc>
        default:Local_u8ErrorState=1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_U8GetPinValue+0xdc>
		}
	}
	else{
		Local_u8ErrorState=1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a90:	27 96       	adiw	r28, 0x07	; 7
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <delay_function>:
#include "NRF_config.h"
/*start of low level functions, specific to the mcu and compiler*/

/*delay in miliseconds*/
void delay_function(uint32_t duration_ms)
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	62 97       	sbiw	r28, 0x12	; 18
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	6f 87       	std	Y+15, r22	; 0x0f
    1ab8:	78 8b       	std	Y+16, r23	; 0x10
    1aba:	89 8b       	std	Y+17, r24	; 0x11
    1abc:	9a 8b       	std	Y+18, r25	; 0x12

	_delay_ms(duration_ms);
    1abe:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ac0:	78 89       	ldd	r23, Y+16	; 0x10
    1ac2:	89 89       	ldd	r24, Y+17	; 0x11
    1ac4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	8b 87       	std	Y+11, r24	; 0x0b
    1ad0:	9c 87       	std	Y+12, r25	; 0x0c
    1ad2:	ad 87       	std	Y+13, r26	; 0x0d
    1ad4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a e7       	ldi	r20, 0x7A	; 122
    1ae4:	53 e4       	ldi	r21, 0x43	; 67
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8f 83       	std	Y+7, r24	; 0x07
    1af0:	98 87       	std	Y+8, r25	; 0x08
    1af2:	a9 87       	std	Y+9, r26	; 0x09
    1af4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <delay_function+0x76>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	3f c0       	rjmp	.+126    	; 0x1b96 <delay_function+0xf4>
	else if (__tmp > 65535)
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	4c f5       	brge	.+82     	; 0x1b82 <delay_function+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <delay_function+0xd6>
    1b5a:	89 e1       	ldi	r24, 0x19	; 25
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <delay_function+0xc4>
    1b6a:	9c 83       	std	Y+4, r25	; 0x04
    1b6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <delay_function+0xb8>
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <delay_function+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <delay_function+0x100>
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
}
    1baa:	62 96       	adiw	r28, 0x12	; 18
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <SPI_Initializer>:

/*contains all SPI configuations, such as pins and control registers*/
/*SPI control: master, interrupts disabled, clock polarity low when idle, clock phase falling edge, clock up tp 1 MHz*/
void SPI_Initializer()
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
	 SPCR = 0X51;                      /*master, interrupt disabled, spi enabled, clock polarity low when idle, clock phase falling edge, 1 MHz clock*/
    1bc4:	ec e4       	ldi	r30, 0x4C	; 76
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	81 e5       	ldi	r24, 0x51	; 81
    1bca:	80 83       	st	Z, r24
	}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <pinout_Initializer>:


/*contains all CSN and CE pins gpio configurations, including setting them as gpio outputs and turning SPI off and CE '1'*/
void pinout_Initializer()
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinDirection(NRF_PORT, CE_PIN, DIO_u8PIN_OUTPUT);
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	41 e0       	ldi	r20, 0x01	; 1
    1be0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(NRF_PORT, CSN_PIN, DIO_u8PIN_OUTPUT);
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_U8SetPinDirection>
	DIO_U8SetPinValue(NRF_PORT, CSN_PIN, SPI_OFF);
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	61 e0       	ldi	r22, 0x01	; 1
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
	nrf24_CE(1);                         /*no need to change this line*/
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <nrf24_CE>



}
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <nrf24_SPI>:

/*CSN pin manipulation to high or low (SPI on or off)*/
void nrf24_SPI(uint8_t input)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	0f 92       	push	r0
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	89 83       	std	Y+1, r24	; 0x01
	if (input == SPI_ON){
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	88 23       	and	r24, r24
    1c14:	31 f4       	brne	.+12     	; 0x1c22 <nrf24_SPI+0x1e>
		DIO_U8SetPinValue(NRF_PORT, CSN_PIN, DIO_u8PIN_LOW);
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <nrf24_SPI+0x28>
	}
	else{
		DIO_U8SetPinValue(NRF_PORT, CSN_PIN, DIO_u8PIN_HIGH);
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	61 e0       	ldi	r22, 0x01	; 1
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>

	}

}
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <SPI_send_command>:

/*1 byte SPI shift register send and receive routine*/
uint8_t SPI_send_command(uint8_t command)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = command;
    1c40:	ee e4       	ldi	r30, 0x4E	; 78
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	80 83       	st	Z, r24
	while ((SPSR & (1 << SPSR_SPIF)) == 0);
    1c48:	ed e4       	ldi	r30, 0x4D	; 77
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	88 23       	and	r24, r24
    1c50:	dc f7       	brge	.-10     	; 0x1c48 <SPI_send_command+0x14>
	return SPDR;
    1c52:	ee e4       	ldi	r30, 0x4E	; 78
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
}
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <nrf24_CE>:

/*CE pin maniplation to high or low*/
void nrf24_CE(uint8_t input)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
	if (input == CE_ON)
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	31 f4       	brne	.+12     	; 0x1c7e <nrf24_CE+0x1e>
		DIO_U8SetPinValue(NRF_PORT, CE_PIN, DIO_u8PIN_HIGH);
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
    1c7c:	05 c0       	rjmp	.+10     	; 0x1c88 <nrf24_CE+0x28>
	else
		DIO_U8SetPinValue(NRF_PORT, CE_PIN, DIO_u8PIN_LOW);
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_U8SetPinValue>
}
    1c88:	0f 90       	pop	r0
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <nrf24_dynamic_ack>:

/*function to enable or disable dynamic acknowledge. if enabled, you can disable acknowledge
   on a specific payload with W_TX_PAYLOAD_NOACK or enable acknowledge using W_TX_PAYLOAD commands.
   if disabled, you cannot disable acknowledging a payload. manipulates EN_DYN_ACK inside FEATURE*/
void nrf24_dynamic_ack(uint8_t state)
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	89 83       	std	Y+1, r24	; 0x01
	if (state == ENABLE)
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	b1 f4       	brne	.+44     	; 0x1cce <nrf24_dynamic_ack+0x3e>
	{
		nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
    1ca2:	2d e8       	ldi	r18, 0x8D	; 141
    1ca4:	31 e0       	ldi	r19, 0x01	; 1
    1ca6:	8d e1       	ldi	r24, 0x1D	; 29
    1ca8:	b9 01       	movw	r22, r18
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
		register_new_value = register_current_value | (1 << EN_DYN_ACK);
    1cb2:	80 91 8d 01 	lds	r24, 0x018D
    1cb6:	81 60       	ori	r24, 0x01	; 1
    1cb8:	80 93 8e 01 	sts	0x018E, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    1cbc:	2e e8       	ldi	r18, 0x8E	; 142
    1cbe:	31 e0       	ldi	r19, 0x01	; 1
    1cc0:	8d e1       	ldi	r24, 0x1D	; 29
    1cc2:	b9 01       	movw	r22, r18
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
    1ccc:	15 c0       	rjmp	.+42     	; 0x1cf8 <nrf24_dynamic_ack+0x68>
	}
	else
	{
		nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
    1cce:	2d e8       	ldi	r18, 0x8D	; 141
    1cd0:	31 e0       	ldi	r19, 0x01	; 1
    1cd2:	8d e1       	ldi	r24, 0x1D	; 29
    1cd4:	b9 01       	movw	r22, r18
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
		register_new_value = register_current_value & (~(1 << EN_DYN_ACK));
    1cde:	80 91 8d 01 	lds	r24, 0x018D
    1ce2:	8e 7f       	andi	r24, 0xFE	; 254
    1ce4:	80 93 8e 01 	sts	0x018E, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    1ce8:	2e e8       	ldi	r18, 0x8E	; 142
    1cea:	31 e0       	ldi	r19, 0x01	; 1
    1cec:	8d e1       	ldi	r24, 0x1D	; 29
    1cee:	b9 01       	movw	r22, r18
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	}
}
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <nrf24_transmit>:

/*function for PTX device to transmit 1 to 32 bytes of data, used for both dynamic payload length
   and static payload length methods. acknowledgemet state could be NO_ACK_MODE or ACK_MODE*/
uint8_t nrf24_transmit(uint8_t *payload, uint8_t payload_width, uint8_t acknowledgement_state)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <nrf24_transmit+0x6>
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <nrf24_transmit+0x8>
    1d08:	0f 92       	push	r0
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	6b 83       	std	Y+3, r22	; 0x03
    1d14:	4c 83       	std	Y+4, r20	; 0x04
	nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);         /*in order to check TX_FIFO status*/
    1d16:	2d e8       	ldi	r18, 0x8D	; 141
    1d18:	31 e0       	ldi	r19, 0x01	; 1
    1d1a:	87 e0       	ldi	r24, 0x07	; 7
    1d1c:	b9 01       	movw	r22, r18
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
	if ((!(register_current_value & (1 << TX_FULL))) && (current_mode == PTX))
    1d26:	80 91 8d 01 	lds	r24, 0x018D
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	80 72       	andi	r24, 0x20	; 32
    1d30:	90 70       	andi	r25, 0x00	; 0
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	b1 f4       	brne	.+44     	; 0x1d62 <nrf24_transmit+0x62>
    1d36:	80 91 68 01 	lds	r24, 0x0168
    1d3a:	83 30       	cpi	r24, 0x03	; 3
    1d3c:	91 f4       	brne	.+36     	; 0x1d62 <nrf24_transmit+0x62>
	{
		current_acknowledgement_state = acknowledgement_state;      /*setting the acknowledgement state to either NO_ACK or ACK, based on input*/
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	80 93 69 01 	sts	0x0169, r24
		if (dynamic_payload == ENABLE)
    1d44:	80 91 8b 01 	lds	r24, 0x018B
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	19 f4       	brne	.+6      	; 0x1d52 <nrf24_transmit+0x52>
			payload_width = current_payload_width;
    1d4c:	80 91 91 01 	lds	r24, 0x0191
    1d50:	8b 83       	std	Y+3, r24	; 0x03
		nrf24_send_payload(payload, payload_width);                 /*the actual function to send data*/
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	6b 81       	ldd	r22, Y+3	; 0x03
    1d58:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <nrf24_send_payload>
		return (TRANSMIT_BEGIN);                                     /*TX FIFO is not full and nrf24l01+ mode is standby ii or ptx*/
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <nrf24_transmit+0x64>
	}
	else
	{
		return (TRANSMIT_FAIL);            /*TX FIFO full or wrong mode*/
    1d62:	1d 82       	std	Y+5, r1	; 0x05
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <nrf24_send_payload>:

/*used by nrf24_transmit function to send the actual data*/
void nrf24_send_payload(uint8_t *payload, uint8_t payload_width)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <nrf24_send_payload+0x6>
    1d7c:	0f 92       	push	r0
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	6b 83       	std	Y+3, r22	; 0x03
	nrf24_SPI(SPI_ON);
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
	if (current_acknowledgement_state == NO_ACK_MODE)
    1d8e:	80 91 69 01 	lds	r24, 0x0169
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	21 f4       	brne	.+8      	; 0x1d9e <nrf24_send_payload+0x28>
		SPI_command = W_TX_PAYLOAD_NOACK;
    1d96:	80 eb       	ldi	r24, 0xB0	; 176
    1d98:	80 93 8c 01 	sts	0x018C, r24
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <nrf24_send_payload+0x2e>
	else
		SPI_command = W_TX_PAYLOAD;
    1d9e:	80 ea       	ldi	r24, 0xA0	; 160
    1da0:	80 93 8c 01 	sts	0x018C, r24
	SPI_send_command(SPI_command);
    1da4:	80 91 8c 01 	lds	r24, 0x018C
    1da8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
    1dac:	11 c0       	rjmp	.+34     	; 0x1dd0 <nrf24_send_payload+0x5a>
	for (; payload_width; payload_width--)
	{
		SPI_command = *payload;
    1dae:	e9 81       	ldd	r30, Y+1	; 0x01
    1db0:	fa 81       	ldd	r31, Y+2	; 0x02
    1db2:	80 81       	ld	r24, Z
    1db4:	80 93 8c 01 	sts	0x018C, r24
		SPI_send_command(SPI_command);
    1db8:	80 91 8c 01 	lds	r24, 0x018C
    1dbc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
		payload++;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
	if (current_acknowledgement_state == NO_ACK_MODE)
		SPI_command = W_TX_PAYLOAD_NOACK;
	else
		SPI_command = W_TX_PAYLOAD;
	SPI_send_command(SPI_command);
	for (; payload_width; payload_width--)
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	81 50       	subi	r24, 0x01	; 1
    1dce:	8b 83       	std	Y+3, r24	; 0x03
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	88 23       	and	r24, r24
    1dd4:	61 f7       	brne	.-40     	; 0x1dae <nrf24_send_payload+0x38>
	{
		SPI_command = *payload;
		SPI_send_command(SPI_command);
		payload++;
	}
	nrf24_SPI(SPI_OFF);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
}
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <nrf24_transmit_status>:

/*reports back transmit status: TRANSMIT_DONE, TRANSMIT_FAILED (in case of reaching maximum number of retransmits in auto acknowledgement mode)
  and TRANSMIT_IN_PROGRESS, if neither flags are set. automatically resets the '1' flags.*/
uint8_t nrf24_transmit_status()
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	0f 92       	push	r0
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);      /*status register is read to check TX_DS flag*/
    1df2:	2d e8       	ldi	r18, 0x8D	; 141
    1df4:	31 e0       	ldi	r19, 0x01	; 1
    1df6:	87 e0       	ldi	r24, 0x07	; 7
    1df8:	b9 01       	movw	r22, r18
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
	if (register_current_value & (1 << TX_DS))                          /*if the TX_DS == 1, */
    1e02:	80 91 8d 01 	lds	r24, 0x018D
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	80 72       	andi	r24, 0x20	; 32
    1e0c:	90 70       	andi	r25, 0x00	; 0
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	59 f0       	breq	.+22     	; 0x1e28 <nrf24_transmit_status+0x40>
	{
		nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the TX_DS flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
    1e12:	2d e8       	ldi	r18, 0x8D	; 141
    1e14:	31 e0       	ldi	r19, 0x01	; 1
    1e16:	87 e0       	ldi	r24, 0x07	; 7
    1e18:	b9 01       	movw	r22, r18
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
		return TRANSMIT_DONE;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <nrf24_transmit_status+0x68>
	}
	else if (register_current_value & (1 << MAX_RT))
    1e28:	80 91 8d 01 	lds	r24, 0x018D
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	80 71       	andi	r24, 0x10	; 16
    1e32:	90 70       	andi	r25, 0x00	; 0
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	59 f0       	breq	.+22     	; 0x1e4e <nrf24_transmit_status+0x66>
	{
		nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the MAX_RT flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
    1e38:	2d e8       	ldi	r18, 0x8D	; 141
    1e3a:	31 e0       	ldi	r19, 0x01	; 1
    1e3c:	87 e0       	ldi	r24, 0x07	; 7
    1e3e:	b9 01       	movw	r22, r18
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
		return TRANSMIT_FAILED;
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <nrf24_transmit_status+0x68>
	}
	else
		return TRANSMIT_IN_PROGRESS;
    1e4e:	19 82       	std	Y+1, r1	; 0x01
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <nrf24_receive>:

/*the receive function output is used as a polling method to check the received data inside RX FIFOs.
If there is any data available, it will be loaded inside payload array*/
uint8_t nrf24_receive(uint8_t *payload, uint8_t payload_width)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <nrf24_receive+0x6>
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <nrf24_receive+0x8>
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	6b 83       	std	Y+3, r22	; 0x03
	if (current_mode == PRX)
    1e6c:	80 91 68 01 	lds	r24, 0x0168
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <nrf24_receive+0x1c>
    1e74:	66 c0       	rjmp	.+204    	; 0x1f42 <nrf24_receive+0xe8>
	{
		nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
    1e76:	2d e8       	ldi	r18, 0x8D	; 141
    1e78:	31 e0       	ldi	r19, 0x01	; 1
    1e7a:	87 e0       	ldi	r24, 0x07	; 7
    1e7c:	b9 01       	movw	r22, r18
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
		if (register_current_value & (1 << RX_DR))                         /*if received data is ready inside RX FIFO*/
    1e86:	80 91 8d 01 	lds	r24, 0x018D
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	80 74       	andi	r24, 0x40	; 64
    1e90:	90 70       	andi	r25, 0x00	; 0
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <nrf24_receive+0x3e>
    1e96:	52 c0       	rjmp	.+164    	; 0x1f3c <nrf24_receive+0xe2>
		{
			if(dynamic_payload == DISABLE)                                    /*if dynamic payload width is disabled, use the static payload width and ignore the input*/
    1e98:	80 91 8b 01 	lds	r24, 0x018B
    1e9c:	88 23       	and	r24, r24
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <nrf24_receive+0x4c>
				payload_width = current_payload_width;
    1ea0:	80 91 91 01 	lds	r24, 0x0191
    1ea4:	8b 83       	std	Y+3, r24	; 0x03

			nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
			SPI_command = R_RX_PAYLOAD;
    1eac:	81 e6       	ldi	r24, 0x61	; 97
    1eae:	80 93 8c 01 	sts	0x018C, r24
			SPI_send_command(SPI_command);
    1eb2:	80 91 8c 01 	lds	r24, 0x018C
    1eb6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
    1eba:	12 c0       	rjmp	.+36     	; 0x1ee0 <nrf24_receive+0x86>

			for (; payload_width; payload_width--)
			{
				SPI_command = NOP_CMD;
    1ebc:	8f ef       	ldi	r24, 0xFF	; 255
    1ebe:	80 93 8c 01 	sts	0x018C, r24
				*payload = SPI_send_command(SPI_command);
    1ec2:	80 91 8c 01 	lds	r24, 0x018C
    1ec6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
    1eca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ece:	80 83       	st	Z, r24
				payload++;
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01

			nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/
			SPI_command = R_RX_PAYLOAD;
			SPI_send_command(SPI_command);

			for (; payload_width; payload_width--)
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	81 50       	subi	r24, 0x01	; 1
    1ede:	8b 83       	std	Y+3, r24	; 0x03
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	88 23       	and	r24, r24
    1ee4:	59 f7       	brne	.-42     	; 0x1ebc <nrf24_receive+0x62>
			{
				SPI_command = NOP_CMD;
				*payload = SPI_send_command(SPI_command);
				payload++;
			}
			nrf24_SPI(SPI_OFF);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
			nrf24_read(FIFO_STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*in order to check the RX_EMPTY flag*/
    1eec:	2d e8       	ldi	r18, 0x8D	; 141
    1eee:	31 e0       	ldi	r19, 0x01	; 1
    1ef0:	87 e1       	ldi	r24, 0x17	; 23
    1ef2:	b9 01       	movw	r22, r18
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
			if(register_current_value & (1 << RX_EMPTY))                        /*if the RX FIFO is empty, reset the RX_DR flag inside STATUS register*/
    1efc:	80 91 8d 01 	lds	r24, 0x018D
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	81 70       	andi	r24, 0x01	; 1
    1f06:	90 70       	andi	r25, 0x00	; 0
    1f08:	88 23       	and	r24, r24
    1f0a:	a9 f0       	breq	.+42     	; 0x1f36 <nrf24_receive+0xdc>
			{
				nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
    1f0c:	2d e8       	ldi	r18, 0x8D	; 141
    1f0e:	31 e0       	ldi	r19, 0x01	; 1
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	b9 01       	movw	r22, r18
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
				register_new_value = register_current_value | (1 << RX_DR);
    1f1c:	80 91 8d 01 	lds	r24, 0x018D
    1f20:	80 64       	ori	r24, 0x40	; 64
    1f22:	80 93 8e 01 	sts	0x018E, r24
				nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
    1f26:	2e e8       	ldi	r18, 0x8E	; 142
    1f28:	31 e0       	ldi	r19, 0x01	; 1
    1f2a:	87 e0       	ldi	r24, 0x07	; 7
    1f2c:	b9 01       	movw	r22, r18
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
			}
			return OPERATION_DONE;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	8c 83       	std	Y+4, r24	; 0x04
    1f3a:	04 c0       	rjmp	.+8      	; 0x1f44 <nrf24_receive+0xea>
		}
		else
		{
			return RECEIVE_FIFO_EMPTY;
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	8c 83       	std	Y+4, r24	; 0x04
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <nrf24_receive+0xea>
		}
	}
	else
		return OPERATION_ERROR;
    1f42:	1c 82       	std	Y+4, r1	; 0x04
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <nrf24_flush>:

/*function which uses TX_FLUSH or RX_FLUSH command to flush the fifo buffers. if successful, output is OPERATION_DONE.
   if not successful (wrong input or wrong mode of operation) output will be OPERATION_ERROR*/
uint8_t nrf24_flush(uint8_t fifo_select)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <nrf24_flush+0x6>
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <nrf24_flush+0x8>
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	89 83       	std	Y+1, r24	; 0x01
	switch (fifo_select)
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	3c 83       	std	Y+4, r19	; 0x04
    1f6a:	2b 83       	std	Y+3, r18	; 0x03
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	d9 f0       	breq	.+54     	; 0x1faa <nrf24_flush+0x56>
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	21 30       	cpi	r18, 0x01	; 1
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	61 f5       	brne	.+88     	; 0x1fd6 <nrf24_flush+0x82>
	{
	case TX_BUFFER:
		if (current_mode == PTX)
    1f7e:	80 91 68 01 	lds	r24, 0x0168
    1f82:	83 30       	cpi	r24, 0x03	; 3
    1f84:	81 f4       	brne	.+32     	; 0x1fa6 <nrf24_flush+0x52>
		{
			nrf24_SPI(SPI_ON);
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
			SPI_command = FLUSH_TX;
    1f8c:	81 ee       	ldi	r24, 0xE1	; 225
    1f8e:	80 93 8c 01 	sts	0x018C, r24
			SPI_send_command(SPI_command);
    1f92:	80 91 8c 01 	lds	r24, 0x018C
    1f96:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
			nrf24_SPI(SPI_OFF);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
			return OPERATION_DONE;
    1fa0:	31 e0       	ldi	r19, 0x01	; 1
    1fa2:	3a 83       	std	Y+2, r19	; 0x02
    1fa4:	19 c0       	rjmp	.+50     	; 0x1fd8 <nrf24_flush+0x84>
		}
		else
			return OPERATION_ERROR;
    1fa6:	1a 82       	std	Y+2, r1	; 0x02
    1fa8:	17 c0       	rjmp	.+46     	; 0x1fd8 <nrf24_flush+0x84>
	case RX_BUFFER:
		if (current_mode == PRX)
    1faa:	80 91 68 01 	lds	r24, 0x0168
    1fae:	84 30       	cpi	r24, 0x04	; 4
    1fb0:	81 f4       	brne	.+32     	; 0x1fd2 <nrf24_flush+0x7e>
		{
			nrf24_SPI(SPI_ON);
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
			SPI_command = FLUSH_RX;
    1fb8:	82 ee       	ldi	r24, 0xE2	; 226
    1fba:	80 93 8c 01 	sts	0x018C, r24
			SPI_send_command(SPI_command);
    1fbe:	80 91 8c 01 	lds	r24, 0x018C
    1fc2:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
			nrf24_SPI(SPI_OFF);
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
			return OPERATION_DONE;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	8a 83       	std	Y+2, r24	; 0x02
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <nrf24_flush+0x84>
		}
		else
			return OPERATION_ERROR;
    1fd2:	1a 82       	std	Y+2, r1	; 0x02
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <nrf24_flush+0x84>
	default:
		return OPERATION_ERROR;
    1fd6:	1a 82       	std	Y+2, r1	; 0x02
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <nrf24_reset>:

/*must be called atleast once, which happens with calling nrf24_device function*/
void nrf24_reset()
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	reset_flag = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	80 93 8a 01 	sts	0x018A, r24
	nrf24_CE(CE_OFF);
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <nrf24_CE>
	register_new_value = CONFIG_REGISTER_DEFAULT;
    1ffc:	88 e0       	ldi	r24, 0x08	; 8
    1ffe:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    2002:	2e e8       	ldi	r18, 0x8E	; 142
    2004:	31 e0       	ldi	r19, 0x01	; 1
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	b9 01       	movw	r22, r18
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	register_new_value = EN_AA_REGISTER_DEFAULT;
    2012:	8f e3       	ldi	r24, 0x3F	; 63
    2014:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
    2018:	2e e8       	ldi	r18, 0x8E	; 142
    201a:	31 e0       	ldi	r19, 0x01	; 1
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	b9 01       	movw	r22, r18
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	register_new_value = EN_RXADDR_REGISTER_DEFAULT;
    2028:	10 92 8e 01 	sts	0x018E, r1
	nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
    202c:	2e e8       	ldi	r18, 0x8E	; 142
    202e:	31 e0       	ldi	r19, 0x01	; 1
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	b9 01       	movw	r22, r18
    2034:	41 e0       	ldi	r20, 0x01	; 1
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	register_new_value = SETUP_AW_REGISTER_DEFAULT;
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(SETUP_AW_ADDRESS, &register_new_value, 1, CLOSE);
    2042:	2e e8       	ldi	r18, 0x8E	; 142
    2044:	31 e0       	ldi	r19, 0x01	; 1
    2046:	83 e0       	ldi	r24, 0x03	; 3
    2048:	b9 01       	movw	r22, r18
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	register_new_value = RF_CH_REGISTER_DEFAULT;
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(RF_CH_ADDRESS, &register_new_value, 1, CLOSE);
    2058:	2e e8       	ldi	r18, 0x8E	; 142
    205a:	31 e0       	ldi	r19, 0x01	; 1
    205c:	85 e0       	ldi	r24, 0x05	; 5
    205e:	b9 01       	movw	r22, r18
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	register_new_value = RF_SETUP_REGISTER_DEFAULT;
    2068:	8e e0       	ldi	r24, 0x0E	; 14
    206a:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
    206e:	2e e8       	ldi	r18, 0x8E	; 142
    2070:	31 e0       	ldi	r19, 0x01	; 1
    2072:	86 e0       	ldi	r24, 0x06	; 6
    2074:	b9 01       	movw	r22, r18
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	register_new_value = STATUS_REGISTER_DEFAULT;
    207e:	8e e0       	ldi	r24, 0x0E	; 14
    2080:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
    2084:	2e e8       	ldi	r18, 0x8E	; 142
    2086:	31 e0       	ldi	r19, 0x01	; 1
    2088:	87 e0       	ldi	r24, 0x07	; 7
    208a:	b9 01       	movw	r22, r18
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>

	nrf24_mode(PTX);
    2094:	83 e0       	ldi	r24, 0x03	; 3
    2096:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
	nrf24_flush(TX_BUFFER);
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <nrf24_flush>
	nrf24_mode(PRX);
    20a0:	84 e0       	ldi	r24, 0x04	; 4
    20a2:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
	nrf24_flush(RX_BUFFER);
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <nrf24_flush>

	nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
    20ac:	2d e8       	ldi	r18, 0x8D	; 141
    20ae:	31 e0       	ldi	r19, 0x01	; 1
    20b0:	87 e0       	ldi	r24, 0x07	; 7
    20b2:	b9 01       	movw	r22, r18
    20b4:	41 e0       	ldi	r20, 0x01	; 1
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
	register_new_value = register_current_value | (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
    20bc:	80 91 8d 01 	lds	r24, 0x018D
    20c0:	80 67       	ori	r24, 0x70	; 112
    20c2:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
    20c6:	2e e8       	ldi	r18, 0x8E	; 142
    20c8:	31 e0       	ldi	r19, 0x01	; 1
    20ca:	87 e0       	ldi	r24, 0x07	; 7
    20cc:	b9 01       	movw	r22, r18
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>

	nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 3f 13 	call	0x267e	; 0x267e <nrf24_interrupt_mask>
	nrf24_crc_configuration(ENABLE, 1);
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	0e 94 88 13 	call	0x2710	; 0x2710 <nrf24_crc_configuration>
	nrf24_address_width(ADDRESS_WIDTH_DEFAULT);
    20e8:	85 e0       	ldi	r24, 0x05	; 5
    20ea:	0e 94 66 12 	call	0x24cc	; 0x24cc <nrf24_address_width>
	nrf24_rf_datarate(RF_DATARATE_DEFAULT);
    20ee:	88 ee       	ldi	r24, 0xE8	; 232
    20f0:	0e 94 89 12 	call	0x2512	; 0x2512 <nrf24_rf_datarate>
	nrf24_rf_power(RF_PWR_DEFAULT);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	0e 94 b8 12 	call	0x2570	; 0x2570 <nrf24_rf_power>
	nrf24_rf_channel(RF_CHANNEL_DEFAULT);
    20fa:	80 e2       	ldi	r24, 0x20	; 32
    20fc:	0e 94 15 13 	call	0x262a	; 0x262a <nrf24_rf_channel>
	nrf24_datapipe_enable(NUMBER_OF_DP_DEFAULT);
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	0e 94 47 12 	call	0x248e	; 0x248e <nrf24_datapipe_enable>
	nrf24_datapipe_address_configuration();
    2106:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <nrf24_datapipe_address_configuration>
	nrf24_datapipe_ptx(1);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <nrf24_datapipe_ptx>
	nrf24_prx_static_payload_width(STATIC_PAYLOAD_WIDTH_DEFAULT, NUMBER_OF_DP_DEFAULT);
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	61 e0       	ldi	r22, 0x01	; 1
    2114:	0e 94 21 12 	call	0x2442	; 0x2442 <nrf24_prx_static_payload_width>
	nrf24_automatic_retransmit_setup(RETRANSMIT_DELAY_DEFAULT, RETRANSMIT_COUNT_DEFAULT);
    2118:	84 ef       	ldi	r24, 0xF4	; 244
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	62 e0       	ldi	r22, 0x02	; 2
    211e:	0e 94 1a 11 	call	0x2234	; 0x2234 <nrf24_automatic_retransmit_setup>
	nrf24_auto_acknowledgment_setup(NUMBER_OF_DP_DEFAULT);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	0e 94 5f 11 	call	0x22be	; 0x22be <nrf24_auto_acknowledgment_setup>
	nrf24_dynamic_payload(DISABLE, NUMBER_OF_DP_DEFAULT);
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	61 e0       	ldi	r22, 0x01	; 1
    212c:	0e 94 81 11 	call	0x2302	; 0x2302 <nrf24_dynamic_payload>
	nrf24_dynamic_ack(ENABLE);
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <nrf24_dynamic_ack>
}
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <nrf24_device>:

/*used by firmware to set the nrf24 mode in TRANSMITTER, RECEIVER, POWER_SAVING or TURN_OFF states, and reseting the device
  if it has not been done yet. This is the initializer, and everything starts by calling nrf24_device first.It has a higher
  level of abstraction than nrf24_mode and must be used by user*/
void nrf24_device(uint8_t device_mode, uint8_t reset_state)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	00 d0       	rcall	.+0      	; 0x2142 <nrf24_device+0x6>
    2142:	00 d0       	rcall	.+0      	; 0x2144 <nrf24_device+0x8>
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	6a 83       	std	Y+2, r22	; 0x02
	SPI_Initializer();
    214c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <SPI_Initializer>
	pinout_Initializer();
    2150:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <pinout_Initializer>
	delay_function(STARTUP_DELAY);
    2154:	66 e9       	ldi	r22, 0x96	; 150
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <delay_function>

	if ((reset_state == RESET) || (reset_flag == 0))
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	21 f0       	breq	.+8      	; 0x216e <nrf24_device+0x32>
    2166:	80 91 8a 01 	lds	r24, 0x018A
    216a:	88 23       	and	r24, r24
    216c:	11 f4       	brne	.+4      	; 0x2172 <nrf24_device+0x36>
	{
		nrf24_reset();
    216e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <nrf24_reset>
	}

	switch (device_mode)
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	3c 83       	std	Y+4, r19	; 0x04
    217a:	2b 83       	std	Y+3, r18	; 0x03
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	09 f1       	breq	.+66     	; 0x21c8 <nrf24_device+0x8c>
    2186:	2b 81       	ldd	r18, Y+3	; 0x03
    2188:	3c 81       	ldd	r19, Y+4	; 0x04
    218a:	22 30       	cpi	r18, 0x02	; 2
    218c:	31 05       	cpc	r19, r1
    218e:	2c f4       	brge	.+10     	; 0x219a <nrf24_device+0x5e>
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	61 f0       	breq	.+24     	; 0x21b0 <nrf24_device+0x74>
    2198:	3e c0       	rjmp	.+124    	; 0x2216 <nrf24_device+0xda>
    219a:	2b 81       	ldd	r18, Y+3	; 0x03
    219c:	3c 81       	ldd	r19, Y+4	; 0x04
    219e:	22 30       	cpi	r18, 0x02	; 2
    21a0:	31 05       	cpc	r19, r1
    21a2:	21 f1       	breq	.+72     	; 0x21ec <nrf24_device+0xb0>
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	91 05       	cpc	r25, r1
    21ac:	59 f1       	breq	.+86     	; 0x2204 <nrf24_device+0xc8>
    21ae:	33 c0       	rjmp	.+102    	; 0x2216 <nrf24_device+0xda>
	{
	case TRANSMITTER:
		nrf24_mode(POWER_DOWN);
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, DISABLE, DISABLE);                /*disabling tx interrupt mask*/
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 3f 13 	call	0x267e	; 0x267e <nrf24_interrupt_mask>
		nrf24_mode(PTX);
    21c0:	83 e0       	ldi	r24, 0x03	; 3
    21c2:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
    21c6:	2f c0       	rjmp	.+94     	; 0x2226 <nrf24_device+0xea>
		break;
	case RECEIVER:
		nrf24_mode(POWER_DOWN);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
		nrf24_interrupt_mask(DISABLE, ENABLE, ENABLE);                /*disabling rx interrupt mask*/
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 3f 13 	call	0x267e	; 0x267e <nrf24_interrupt_mask>
		nrf24_mode(PRX);
    21d8:	84 e0       	ldi	r24, 0x04	; 4
    21da:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
		delay_function(PRX_MODE_DELAY);                              /*100ms for PRX mode*/
    21de:	64 e6       	ldi	r22, 0x64	; 100
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <delay_function>
    21ea:	1d c0       	rjmp	.+58     	; 0x2226 <nrf24_device+0xea>
		break;
	case POWER_SAVING:
		nrf24_mode(POWER_DOWN);
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	41 e0       	ldi	r20, 0x01	; 1
    21f8:	0e 94 3f 13 	call	0x267e	; 0x267e <nrf24_interrupt_mask>
		nrf24_mode(STANDBYI);
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
    2202:	11 c0       	rjmp	.+34     	; 0x2226 <nrf24_device+0xea>
		break;
	case TURN_OFF:
		nrf24_mode(POWER_DOWN);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	61 e0       	ldi	r22, 0x01	; 1
    220e:	41 e0       	ldi	r20, 0x01	; 1
    2210:	0e 94 3f 13 	call	0x267e	; 0x267e <nrf24_interrupt_mask>
    2214:	08 c0       	rjmp	.+16     	; 0x2226 <nrf24_device+0xea>
		break;
	default:
		nrf24_mode(POWER_DOWN);
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	0e 94 c0 13 	call	0x2780	; 0x2780 <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	61 e0       	ldi	r22, 0x01	; 1
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 3f 13 	call	0x267e	; 0x267e <nrf24_interrupt_mask>
		break;
	}
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <nrf24_automatic_retransmit_setup>:

/*setting automatic retransmit delay time and maximum number of retransmits*/
void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	00 d0       	rcall	.+0      	; 0x223a <nrf24_automatic_retransmit_setup+0x6>
    223a:	0f 92       	push	r0
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	6b 83       	std	Y+3, r22	; 0x03
	register_new_value = 0x00;
    2246:	10 92 8e 01 	sts	0x018E, r1
    224a:	0b c0       	rjmp	.+22     	; 0x2262 <nrf24_automatic_retransmit_setup+0x2e>
	for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
		register_new_value++;
    224c:	80 91 8e 01 	lds	r24, 0x018E
    2250:	8f 5f       	subi	r24, 0xFF	; 255
    2252:	80 93 8e 01 	sts	0x018E, r24

/*setting automatic retransmit delay time and maximum number of retransmits*/
void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
{
	register_new_value = 0x00;
	for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	8a 5f       	subi	r24, 0xFA	; 250
    225c:	90 40       	sbci	r25, 0x00	; 0
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	8b 3f       	cpi	r24, 0xFB	; 251
    2268:	91 05       	cpc	r25, r1
    226a:	20 f0       	brcs	.+8      	; 0x2274 <nrf24_automatic_retransmit_setup+0x40>
    226c:	80 91 8e 01 	lds	r24, 0x018E
    2270:	8f 30       	cpi	r24, 0x0F	; 15
    2272:	60 f3       	brcs	.-40     	; 0x224c <nrf24_automatic_retransmit_setup+0x18>
		register_new_value++;
	register_new_value <<= ARD_0;
    2274:	80 91 8e 01 	lds	r24, 0x018E
    2278:	82 95       	swap	r24
    227a:	80 7f       	andi	r24, 0xF0	; 240
    227c:	80 93 8e 01 	sts	0x018E, r24
	if ((retransmit_count > 0) && (retransmit_count < 16))
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	88 23       	and	r24, r24
    2284:	51 f0       	breq	.+20     	; 0x229a <nrf24_automatic_retransmit_setup+0x66>
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	80 31       	cpi	r24, 0x10	; 16
    228a:	38 f4       	brcc	.+14     	; 0x229a <nrf24_automatic_retransmit_setup+0x66>
		register_new_value |= retransmit_count;
    228c:	80 91 8e 01 	lds	r24, 0x018E
    2290:	9b 81       	ldd	r25, Y+3	; 0x03
    2292:	89 2b       	or	r24, r25
    2294:	80 93 8e 01 	sts	0x018E, r24
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <nrf24_automatic_retransmit_setup+0x6e>
	else
		register_new_value |= 0;
    229a:	80 91 8e 01 	lds	r24, 0x018E
    229e:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(SETUP_RETR_ADDRESS, &register_new_value, 1, CLOSE);
    22a2:	2e e8       	ldi	r18, 0x8E	; 142
    22a4:	31 e0       	ldi	r19, 0x01	; 1
    22a6:	84 e0       	ldi	r24, 0x04	; 4
    22a8:	b9 01       	movw	r22, r18
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
}
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <nrf24_auto_acknowledgment_setup>:

/*setting auto acknoledgement on datapipes*/
void nrf24_auto_acknowledgment_setup(uint8_t datapipe)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	0f 92       	push	r0
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	89 83       	std	Y+1, r24	; 0x01
	if (datapipe < 7)
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	87 30       	cpi	r24, 0x07	; 7
    22ce:	68 f4       	brcc	.+26     	; 0x22ea <nrf24_auto_acknowledgment_setup+0x2c>
		register_new_value = (1 << datapipe) - 1;
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <nrf24_auto_acknowledgment_setup+0x22>
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	2a 95       	dec	r18
    22e2:	e2 f7       	brpl	.-8      	; 0x22dc <nrf24_auto_acknowledgment_setup+0x1e>
    22e4:	81 50       	subi	r24, 0x01	; 1
    22e6:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
    22ea:	2e e8       	ldi	r18, 0x8E	; 142
    22ec:	31 e0       	ldi	r19, 0x01	; 1
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	b9 01       	movw	r22, r18
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
}
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <nrf24_dynamic_payload>:

/*turns on or off the dynamic payload width capability*/
void nrf24_dynamic_payload(uint8_t state, uint8_t datapipe)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	00 d0       	rcall	.+0      	; 0x2308 <nrf24_dynamic_payload+0x6>
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	6a 83       	std	Y+2, r22	; 0x02
	nrf24_auto_acknowledgment_setup(datapipe);                        /*setting auto acknowledgment before setting dynamic payload*/
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	0e 94 5f 11 	call	0x22be	; 0x22be <nrf24_auto_acknowledgment_setup>
	nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
    2316:	2d e8       	ldi	r18, 0x8D	; 141
    2318:	31 e0       	ldi	r19, 0x01	; 1
    231a:	8d e1       	ldi	r24, 0x1D	; 29
    231c:	b9 01       	movw	r22, r18
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
	if (state == ENABLE)
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	49 f5       	brne	.+82     	; 0x237e <nrf24_dynamic_payload+0x7c>
	{
		register_new_value = register_current_value | (1 << EN_DPL);    /*EN_DPL bit turns dynamic payload width on or off on all datapipes*/
    232c:	80 91 8d 01 	lds	r24, 0x018D
    2330:	84 60       	ori	r24, 0x04	; 4
    2332:	80 93 8e 01 	sts	0x018E, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    2336:	2e e8       	ldi	r18, 0x8E	; 142
    2338:	31 e0       	ldi	r19, 0x01	; 1
    233a:	8d e1       	ldi	r24, 0x1D	; 29
    233c:	b9 01       	movw	r22, r18
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
		if (datapipe < 7)
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	87 30       	cpi	r24, 0x07	; 7
    234a:	68 f4       	brcc	.+26     	; 0x2366 <nrf24_dynamic_payload+0x64>
			register_new_value = (1 << datapipe) - 1;                       /*turning on dynamic payload width on chosen datapipes, using DYNPD register*/
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	02 c0       	rjmp	.+4      	; 0x235c <nrf24_dynamic_payload+0x5a>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	2a 95       	dec	r18
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <nrf24_dynamic_payload+0x56>
    2360:	81 50       	subi	r24, 0x01	; 1
    2362:	80 93 8e 01 	sts	0x018E, r24
		nrf24_write(DYNPD_ADDRESS, &register_new_value, 1, CLOSE);
    2366:	2e e8       	ldi	r18, 0x8E	; 142
    2368:	31 e0       	ldi	r19, 0x01	; 1
    236a:	8c e1       	ldi	r24, 0x1C	; 28
    236c:	b9 01       	movw	r22, r18
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
		dynamic_payload = ENABLE;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	80 93 8b 01 	sts	0x018B, r24
    237c:	0f c0       	rjmp	.+30     	; 0x239c <nrf24_dynamic_payload+0x9a>
	}
	else
	{
		register_new_value = register_current_value & (~(1 << EN_DPL));
    237e:	80 91 8d 01 	lds	r24, 0x018D
    2382:	8b 7f       	andi	r24, 0xFB	; 251
    2384:	80 93 8e 01 	sts	0x018E, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    2388:	2e e8       	ldi	r18, 0x8E	; 142
    238a:	31 e0       	ldi	r19, 0x01	; 1
    238c:	8d e1       	ldi	r24, 0x1D	; 29
    238e:	b9 01       	movw	r22, r18
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
		dynamic_payload = DISABLE;
    2398:	10 92 8b 01 	sts	0x018B, r1
	}
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <nrf24_datapipe_ptx>:

/*on nrf24l01+ there is only one address for PTX device which must be the same as PRX data pipe address 0*/
void nrf24_datapipe_ptx(uint8_t datapipe_number)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	0f 92       	push	r0
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(TX_ADDR_ADDRESS, &datapipe_address[datapipe_number - 1][0], current_address_width, CLOSE);
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	c9 01       	movw	r24, r18
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	82 0f       	add	r24, r18
    23c4:	93 1f       	adc	r25, r19
    23c6:	05 97       	sbiw	r24, 0x05	; 5
    23c8:	86 59       	subi	r24, 0x96	; 150
    23ca:	9e 4f       	sbci	r25, 0xFE	; 254
    23cc:	9c 01       	movw	r18, r24
    23ce:	90 91 90 01 	lds	r25, 0x0190
    23d2:	80 e1       	ldi	r24, 0x10	; 16
    23d4:	b9 01       	movw	r22, r18
    23d6:	49 2f       	mov	r20, r25
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
}
    23de:	0f 90       	pop	r0
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <nrf24_datapipe_address_configuration>:

/*setting the 6 datapipe addresses using the datapipe_address[][]*/
void nrf24_datapipe_address_configuration()
{
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <nrf24_datapipe_address_configuration+0x6>
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t address = RX_ADDR_P0_ADDRESS;
    23f0:	8a e0       	ldi	r24, 0x0A	; 10
    23f2:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t counter = 0; counter < 6; counter++)
    23f4:	19 82       	std	Y+1, r1	; 0x01
    23f6:	1d c0       	rjmp	.+58     	; 0x2432 <nrf24_datapipe_address_configuration+0x4c>
	{
		nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
    23f8:	4a e6       	ldi	r20, 0x6A	; 106
    23fa:	51 e0       	ldi	r21, 0x01	; 1
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	c9 01       	movw	r24, r18
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	82 0f       	add	r24, r18
    240e:	93 1f       	adc	r25, r19
    2410:	9a 01       	movw	r18, r20
    2412:	28 0f       	add	r18, r24
    2414:	39 1f       	adc	r19, r25
    2416:	90 91 90 01 	lds	r25, 0x0190
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	b9 01       	movw	r22, r18
    241e:	49 2f       	mov	r20, r25
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
		address++;
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	8a 83       	std	Y+2, r24	; 0x02

/*setting the 6 datapipe addresses using the datapipe_address[][]*/
void nrf24_datapipe_address_configuration()
{
	uint8_t address = RX_ADDR_P0_ADDRESS;
	for (uint8_t counter = 0; counter < 6; counter++)
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	8f 5f       	subi	r24, 0xFF	; 255
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	86 30       	cpi	r24, 0x06	; 6
    2436:	00 f3       	brcs	.-64     	; 0x23f8 <nrf24_datapipe_address_configuration+0x12>
	{
		nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
		address++;
	}
}
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <nrf24_prx_static_payload_width>:

/*function to change static payload width, from 1 to 32 bytes in each payload*/
void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <nrf24_prx_static_payload_width+0x6>
    2448:	0f 92       	push	r0
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	8a 83       	std	Y+2, r24	; 0x02
    2450:	6b 83       	std	Y+3, r22	; 0x03
	for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
    2452:	81 e1       	ldi	r24, 0x11	; 17
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	0f c0       	rjmp	.+30     	; 0x2476 <nrf24_prx_static_payload_width+0x34>
	{
		nrf24_write(address, &static_payload_width, 1, CLOSE);
    2458:	9e 01       	movw	r18, r28
    245a:	2e 5f       	subi	r18, 0xFE	; 254
    245c:	3f 4f       	sbci	r19, 0xFF	; 255
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	b9 01       	movw	r22, r18
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
		address++;
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	8f 5f       	subi	r24, 0xFF	; 255
    246e:	89 83       	std	Y+1, r24	; 0x01
}

/*function to change static payload width, from 1 to 32 bytes in each payload*/
void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
{
	for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	81 50       	subi	r24, 0x01	; 1
    2474:	8b 83       	std	Y+3, r24	; 0x03
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	88 23       	and	r24, r24
    247a:	71 f7       	brne	.-36     	; 0x2458 <nrf24_prx_static_payload_width+0x16>
	{
		nrf24_write(address, &static_payload_width, 1, CLOSE);
		address++;
	}
	current_payload_width = static_payload_width;
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	80 93 91 01 	sts	0x0191, r24
}
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <nrf24_datapipe_enable>:

/*datapipes are turned on and off using EN_RXADDR register, PRX datapipe addresses are located in RX_ADDR_Pn, TX address is located inside TX_ADDR*/
void nrf24_datapipe_enable(uint8_t number_of_datapipes)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	0f 92       	push	r0
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	89 83       	std	Y+1, r24	; 0x01
	register_new_value = (1 << number_of_datapipes) - 1;
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <nrf24_datapipe_enable+0x1c>
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	2a 95       	dec	r18
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <nrf24_datapipe_enable+0x18>
    24ae:	81 50       	subi	r24, 0x01	; 1
    24b0:	80 93 8e 01 	sts	0x018E, r24
	nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
    24b4:	2e e8       	ldi	r18, 0x8E	; 142
    24b6:	31 e0       	ldi	r19, 0x01	; 1
    24b8:	82 e0       	ldi	r24, 0x02	; 2
    24ba:	b9 01       	movw	r22, r18
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
}
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <nrf24_address_width>:

/*function to set the nrf24l01+ address width, from 3 to 5 bytes*/
void nrf24_address_width(uint8_t address_width)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	0f 92       	push	r0
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	89 83       	std	Y+1, r24	; 0x01
	if ((address_width <= 5) && (address_width >= 3))
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	86 30       	cpi	r24, 0x06	; 6
    24dc:	40 f4       	brcc	.+16     	; 0x24ee <nrf24_address_width+0x22>
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	83 30       	cpi	r24, 0x03	; 3
    24e2:	28 f0       	brcs	.+10     	; 0x24ee <nrf24_address_width+0x22>
	{
		write_pointer = address_width - 2;
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	82 50       	subi	r24, 0x02	; 2
    24e8:	80 93 8f 01 	sts	0x018F, r24
    24ec:	03 c0       	rjmp	.+6      	; 0x24f4 <nrf24_address_width+0x28>
	}
	else
	{
		write_pointer = 3;
    24ee:	83 e0       	ldi	r24, 0x03	; 3
    24f0:	80 93 8f 01 	sts	0x018F, r24
	}
	nrf24_write(SETUP_AW_ADDRESS, &write_pointer, 1, CLOSE);                    /*5 bytes is the maximum address width available*/
    24f4:	2f e8       	ldi	r18, 0x8F	; 143
    24f6:	31 e0       	ldi	r19, 0x01	; 1
    24f8:	83 e0       	ldi	r24, 0x03	; 3
    24fa:	b9 01       	movw	r22, r18
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	current_address_width = address_width;
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	80 93 90 01 	sts	0x0190, r24
}
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <nrf24_rf_datarate>:

/*datarate settings, you can choose between 2mbps, 1mbps, 250kbps*/
void nrf24_rf_datarate(uint8_t rf_datarate)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	0f 92       	push	r0
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	89 83       	std	Y+1, r24	; 0x01
	nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
    251e:	2d e8       	ldi	r18, 0x8D	; 141
    2520:	31 e0       	ldi	r19, 0x01	; 1
    2522:	86 e0       	ldi	r24, 0x06	; 6
    2524:	b9 01       	movw	r22, r18
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
	register_current_value &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
    252e:	80 91 8d 01 	lds	r24, 0x018D
    2532:	87 7d       	andi	r24, 0xD7	; 215
    2534:	80 93 8d 01 	sts	0x018D, r24
	switch (rf_datarate)
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	8a 3f       	cpi	r24, 0xFA	; 250
    2540:	91 05       	cpc	r25, r1
    2542:	31 f4       	brne	.+12     	; 0x2550 <nrf24_rf_datarate+0x3e>
		break;
	case 1000:
		register_new_value = register_current_value;
		break;
	case 250:
		register_new_value = register_current_value | (1 << RF_DR_LOW);
    2544:	80 91 8d 01 	lds	r24, 0x018D
    2548:	80 62       	ori	r24, 0x20	; 32
    254a:	80 93 8e 01 	sts	0x018E, r24
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <nrf24_rf_datarate+0x46>
		break;
	default:
		register_new_value = register_current_value;
    2550:	80 91 8d 01 	lds	r24, 0x018D
    2554:	80 93 8e 01 	sts	0x018E, r24
		break;
	}
	nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
    2558:	2e e8       	ldi	r18, 0x8E	; 142
    255a:	31 e0       	ldi	r19, 0x01	; 1
    255c:	86 e0       	ldi	r24, 0x06	; 6
    255e:	b9 01       	movw	r22, r18
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
}
    2568:	0f 90       	pop	r0
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <nrf24_rf_power>:

/*nrf24l01+ RF power settings. 0dbm, -6dbm, -12dbm, -18dbm*/
void nrf24_rf_power(uint8_t rf_power)
{
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	00 d0       	rcall	.+0      	; 0x2576 <nrf24_rf_power+0x6>
    2576:	0f 92       	push	r0
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	89 83       	std	Y+1, r24	; 0x01
	nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
    257e:	2d e8       	ldi	r18, 0x8D	; 141
    2580:	31 e0       	ldi	r19, 0x01	; 1
    2582:	86 e0       	ldi	r24, 0x06	; 6
    2584:	b9 01       	movw	r22, r18
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
	register_current_value &= ~((1 << RF_PWR_1) | (1 << RF_PWR_0));
    258e:	80 91 8d 01 	lds	r24, 0x018D
    2592:	89 7f       	andi	r24, 0xF9	; 249
    2594:	80 93 8d 01 	sts	0x018D, r24
	switch (rf_power)
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	3b 83       	std	Y+3, r19	; 0x03
    25a0:	2a 83       	std	Y+2, r18	; 0x02
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	86 30       	cpi	r24, 0x06	; 6
    25a8:	91 05       	cpc	r25, r1
    25aa:	d9 f0       	breq	.+54     	; 0x25e2 <nrf24_rf_power+0x72>
    25ac:	2a 81       	ldd	r18, Y+2	; 0x02
    25ae:	3b 81       	ldd	r19, Y+3	; 0x03
    25b0:	27 30       	cpi	r18, 0x07	; 7
    25b2:	31 05       	cpc	r19, r1
    25b4:	2c f4       	brge	.+10     	; 0x25c0 <nrf24_rf_power+0x50>
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	61 f0       	breq	.+24     	; 0x25d6 <nrf24_rf_power+0x66>
    25be:	22 c0       	rjmp	.+68     	; 0x2604 <nrf24_rf_power+0x94>
    25c0:	2a 81       	ldd	r18, Y+2	; 0x02
    25c2:	3b 81       	ldd	r19, Y+3	; 0x03
    25c4:	2c 30       	cpi	r18, 0x0C	; 12
    25c6:	31 05       	cpc	r19, r1
    25c8:	91 f0       	breq	.+36     	; 0x25ee <nrf24_rf_power+0x7e>
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	82 31       	cpi	r24, 0x12	; 18
    25d0:	91 05       	cpc	r25, r1
    25d2:	99 f0       	breq	.+38     	; 0x25fa <nrf24_rf_power+0x8a>
    25d4:	17 c0       	rjmp	.+46     	; 0x2604 <nrf24_rf_power+0x94>
	{
	case 0:
		register_new_value = register_current_value | ((1 << RF_PWR_1) | (1 << RF_PWR_0));
    25d6:	80 91 8d 01 	lds	r24, 0x018D
    25da:	86 60       	ori	r24, 0x06	; 6
    25dc:	80 93 8e 01 	sts	0x018E, r24
    25e0:	16 c0       	rjmp	.+44     	; 0x260e <nrf24_rf_power+0x9e>
		break;
	case 6:
		register_new_value = register_current_value | (1 << RF_PWR_1);
    25e2:	80 91 8d 01 	lds	r24, 0x018D
    25e6:	84 60       	ori	r24, 0x04	; 4
    25e8:	80 93 8e 01 	sts	0x018E, r24
    25ec:	10 c0       	rjmp	.+32     	; 0x260e <nrf24_rf_power+0x9e>
		break;
	case 12:
		register_new_value = register_current_value | (1 << RF_PWR_0);
    25ee:	80 91 8d 01 	lds	r24, 0x018D
    25f2:	82 60       	ori	r24, 0x02	; 2
    25f4:	80 93 8e 01 	sts	0x018E, r24
    25f8:	0a c0       	rjmp	.+20     	; 0x260e <nrf24_rf_power+0x9e>
		break;
	case 18:
		register_new_value = register_current_value;
    25fa:	80 91 8d 01 	lds	r24, 0x018D
    25fe:	80 93 8e 01 	sts	0x018E, r24
    2602:	05 c0       	rjmp	.+10     	; 0x260e <nrf24_rf_power+0x9e>
		break;
	default:
		register_new_value = register_current_value | (1 << RF_PWR_1);
    2604:	80 91 8d 01 	lds	r24, 0x018D
    2608:	84 60       	ori	r24, 0x04	; 4
    260a:	80 93 8e 01 	sts	0x018E, r24
		break;
	}
	nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
    260e:	2e e8       	ldi	r18, 0x8E	; 142
    2610:	31 e0       	ldi	r19, 0x01	; 1
    2612:	86 e0       	ldi	r24, 0x06	; 6
    2614:	b9 01       	movw	r22, r18
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <nrf24_rf_channel>:

/*nrf24l01+ RF channel selection, from 1 to 125*/
void nrf24_rf_channel(uint8_t rf_channel)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <nrf24_rf_channel+0x6>
    2630:	0f 92       	push	r0
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	8b 83       	std	Y+3, r24	; 0x03
	if ((rf_channel <= 125) && (rf_channel >= 1))
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	8e 37       	cpi	r24, 0x7E	; 126
    263c:	78 f4       	brcc	.+30     	; 0x265c <nrf24_rf_channel+0x32>
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	88 23       	and	r24, r24
    2642:	61 f0       	breq	.+24     	; 0x265c <nrf24_rf_channel+0x32>
	{
		uint8_t write_pointer = rf_channel;
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
    2648:	85 e0       	ldi	r24, 0x05	; 5
    264a:	9e 01       	movw	r18, r28
    264c:	2f 5f       	subi	r18, 0xFF	; 255
    264e:	3f 4f       	sbci	r19, 0xFF	; 255
    2650:	b9 01       	movw	r22, r18
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
    265a:	0b c0       	rjmp	.+22     	; 0x2672 <nrf24_rf_channel+0x48>
	}
	else
	{
		uint8_t write_pointer = 1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	8a 83       	std	Y+2, r24	; 0x02
		nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
    2660:	9e 01       	movw	r18, r28
    2662:	2e 5f       	subi	r18, 0xFE	; 254
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	85 e0       	ldi	r24, 0x05	; 5
    2668:	b9 01       	movw	r22, r18
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	}
}
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <nrf24_interrupt_mask>:

/*interrupt mask settings. 3 seperate masks for RX, TX, and RT (maximum numbers of retransmission reached*/
void nrf24_interrupt_mask(uint8_t rx_mask, uint8_t tx_mask, uint8_t max_rt_mask)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	00 d0       	rcall	.+0      	; 0x2684 <nrf24_interrupt_mask+0x6>
    2684:	0f 92       	push	r0
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	6a 83       	std	Y+2, r22	; 0x02
    268e:	4b 83       	std	Y+3, r20	; 0x03
	nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
    2690:	2d e8       	ldi	r18, 0x8D	; 141
    2692:	31 e0       	ldi	r19, 0x01	; 1
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	b9 01       	movw	r22, r18
    2698:	41 e0       	ldi	r20, 0x01	; 1
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
	if (rx_mask)
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	88 23       	and	r24, r24
    26a4:	31 f0       	breq	.+12     	; 0x26b2 <nrf24_interrupt_mask+0x34>
		register_new_value = (register_current_value) | (1 << MASK_RX_DR);
    26a6:	80 91 8d 01 	lds	r24, 0x018D
    26aa:	80 64       	ori	r24, 0x40	; 64
    26ac:	80 93 8e 01 	sts	0x018E, r24
    26b0:	05 c0       	rjmp	.+10     	; 0x26bc <nrf24_interrupt_mask+0x3e>
	else
		register_new_value &= (~(1 << MASK_RX_DR));
    26b2:	80 91 8e 01 	lds	r24, 0x018E
    26b6:	8f 7b       	andi	r24, 0xBF	; 191
    26b8:	80 93 8e 01 	sts	0x018E, r24
	if (tx_mask)
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	88 23       	and	r24, r24
    26c0:	31 f0       	breq	.+12     	; 0x26ce <nrf24_interrupt_mask+0x50>
		register_new_value |= (1 << MASK_TX_DS);
    26c2:	80 91 8e 01 	lds	r24, 0x018E
    26c6:	80 62       	ori	r24, 0x20	; 32
    26c8:	80 93 8e 01 	sts	0x018E, r24
    26cc:	05 c0       	rjmp	.+10     	; 0x26d8 <nrf24_interrupt_mask+0x5a>
	else
		register_new_value &= (~(1 << MASK_TX_DS));
    26ce:	80 91 8e 01 	lds	r24, 0x018E
    26d2:	8f 7d       	andi	r24, 0xDF	; 223
    26d4:	80 93 8e 01 	sts	0x018E, r24
	if (max_rt_mask)
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	88 23       	and	r24, r24
    26dc:	31 f0       	breq	.+12     	; 0x26ea <nrf24_interrupt_mask+0x6c>
		register_new_value |= (1 << MASK_MAX_RT);
    26de:	80 91 8e 01 	lds	r24, 0x018E
    26e2:	80 61       	ori	r24, 0x10	; 16
    26e4:	80 93 8e 01 	sts	0x018E, r24
    26e8:	05 c0       	rjmp	.+10     	; 0x26f4 <nrf24_interrupt_mask+0x76>
	else
		register_new_value &= (~(1 << MASK_MAX_RT));
    26ea:	80 91 8e 01 	lds	r24, 0x018E
    26ee:	8f 7e       	andi	r24, 0xEF	; 239
    26f0:	80 93 8e 01 	sts	0x018E, r24

	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    26f4:	2e e8       	ldi	r18, 0x8E	; 142
    26f6:	31 e0       	ldi	r19, 0x01	; 1
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	b9 01       	movw	r22, r18
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
}
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <nrf24_crc_configuration>:

/*enabling or disabling crc in payload; setting crc encoding scheme between 1 or 2 bytes*/
void nrf24_crc_configuration(uint8_t crc_enable, uint8_t crc_encoding_scheme)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	00 d0       	rcall	.+0      	; 0x2716 <nrf24_crc_configuration+0x6>
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	6a 83       	std	Y+2, r22	; 0x02
	nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
    271e:	2d e8       	ldi	r18, 0x8D	; 141
    2720:	31 e0       	ldi	r19, 0x01	; 1
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	b9 01       	movw	r22, r18
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
	if (crc_enable)
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	88 23       	and	r24, r24
    2732:	31 f0       	breq	.+12     	; 0x2740 <nrf24_crc_configuration+0x30>
		register_new_value = (register_current_value) | (1 << EN_CRC);
    2734:	80 91 8d 01 	lds	r24, 0x018D
    2738:	88 60       	ori	r24, 0x08	; 8
    273a:	80 93 8e 01 	sts	0x018E, r24
    273e:	05 c0       	rjmp	.+10     	; 0x274a <nrf24_crc_configuration+0x3a>
	else
		register_new_value &= (~(1 << EN_CRC));
    2740:	80 91 8e 01 	lds	r24, 0x018E
    2744:	87 7f       	andi	r24, 0xF7	; 247
    2746:	80 93 8e 01 	sts	0x018E, r24
	if (crc_encoding_scheme == 2)
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	82 30       	cpi	r24, 0x02	; 2
    274e:	31 f4       	brne	.+12     	; 0x275c <nrf24_crc_configuration+0x4c>
		register_new_value |= (1 << CRCO);
    2750:	80 91 8e 01 	lds	r24, 0x018E
    2754:	84 60       	ori	r24, 0x04	; 4
    2756:	80 93 8e 01 	sts	0x018E, r24
    275a:	05 c0       	rjmp	.+10     	; 0x2766 <nrf24_crc_configuration+0x56>
	else
		register_new_value &= (~(1 << CRCO));
    275c:	80 91 8e 01 	lds	r24, 0x018E
    2760:	8b 7f       	andi	r24, 0xFB	; 251
    2762:	80 93 8e 01 	sts	0x018E, r24

	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    2766:	2e e8       	ldi	r18, 0x8E	; 142
    2768:	31 e0       	ldi	r19, 0x01	; 1
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	b9 01       	movw	r22, r18
    276e:	41 e0       	ldi	r20, 0x01	; 1
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
}
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <nrf24_mode>:

/*mode selector: power down, standby i, standby ii, ptx, prx. used by nrf24_device function*/
void nrf24_mode(uint8_t mode)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <nrf24_mode+0x6>
    2786:	0f 92       	push	r0
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	89 83       	std	Y+1, r24	; 0x01
	nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
    278e:	2d e8       	ldi	r18, 0x8D	; 141
    2790:	31 e0       	ldi	r19, 0x01	; 1
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	b9 01       	movw	r22, r18
    2796:	41 e0       	ldi	r20, 0x01	; 1
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nrf24_read>
	switch (mode)
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	3b 83       	std	Y+3, r19	; 0x03
    27a6:	2a 83       	std	Y+2, r18	; 0x02
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	9b 81       	ldd	r25, Y+3	; 0x03
    27ac:	82 30       	cpi	r24, 0x02	; 2
    27ae:	91 05       	cpc	r25, r1
    27b0:	c9 f1       	breq	.+114    	; 0x2824 <nrf24_mode+0xa4>
    27b2:	2a 81       	ldd	r18, Y+2	; 0x02
    27b4:	3b 81       	ldd	r19, Y+3	; 0x03
    27b6:	23 30       	cpi	r18, 0x03	; 3
    27b8:	31 05       	cpc	r19, r1
    27ba:	54 f4       	brge	.+20     	; 0x27d0 <nrf24_mode+0x50>
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	9b 81       	ldd	r25, Y+3	; 0x03
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	91 f0       	breq	.+36     	; 0x27e8 <nrf24_mode+0x68>
    27c4:	2a 81       	ldd	r18, Y+2	; 0x02
    27c6:	3b 81       	ldd	r19, Y+3	; 0x03
    27c8:	21 30       	cpi	r18, 0x01	; 1
    27ca:	31 05       	cpc	r19, r1
    27cc:	e1 f0       	breq	.+56     	; 0x2806 <nrf24_mode+0x86>
    27ce:	59 c0       	rjmp	.+178    	; 0x2882 <nrf24_mode+0x102>
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	9b 81       	ldd	r25, Y+3	; 0x03
    27d4:	83 30       	cpi	r24, 0x03	; 3
    27d6:	91 05       	cpc	r25, r1
    27d8:	a9 f1       	breq	.+106    	; 0x2844 <nrf24_mode+0xc4>
    27da:	2a 81       	ldd	r18, Y+2	; 0x02
    27dc:	3b 81       	ldd	r19, Y+3	; 0x03
    27de:	24 30       	cpi	r18, 0x04	; 4
    27e0:	31 05       	cpc	r19, r1
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <nrf24_mode+0x66>
    27e4:	3f c0       	rjmp	.+126    	; 0x2864 <nrf24_mode+0xe4>
    27e6:	4d c0       	rjmp	.+154    	; 0x2882 <nrf24_mode+0x102>
	{
	case POWER_DOWN:
		nrf24_CE(CE_OFF);
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <nrf24_CE>
		register_new_value = (register_current_value) & (~(1 << PWR_UP));
    27ee:	80 91 8d 01 	lds	r24, 0x018D
    27f2:	8d 7f       	andi	r24, 0xFD	; 253
    27f4:	80 93 8e 01 	sts	0x018E, r24
		delay_function(POWER_DOWN_DELAY);
    27f8:	62 e0       	ldi	r22, 0x02	; 2
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <delay_function>
    2804:	4c c0       	rjmp	.+152    	; 0x289e <nrf24_mode+0x11e>
		break;
	case STANDBYI:                                 /*standby I is defined by 'PWR_UP = 1' and 'CE pin LOW'*/
		nrf24_CE(CE_OFF);
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <nrf24_CE>
		register_new_value = (register_current_value) | (1 << PWR_UP);
    280c:	80 91 8d 01 	lds	r24, 0x018D
    2810:	82 60       	ori	r24, 0x02	; 2
    2812:	80 93 8e 01 	sts	0x018E, r24
		delay_function(STANDBYI_DELAY);
    2816:	62 e0       	ldi	r22, 0x02	; 2
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <delay_function>
    2822:	3d c0       	rjmp	.+122    	; 0x289e <nrf24_mode+0x11e>
		break;
	case STANDBYII:                                 /*standby ii is related to a ptx device*/
		nrf24_CE(CE_ON);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <nrf24_CE>
		register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
    282a:	80 91 8d 01 	lds	r24, 0x018D
    282e:	8c 7f       	andi	r24, 0xFC	; 252
    2830:	82 60       	ori	r24, 0x02	; 2
    2832:	80 93 8e 01 	sts	0x018E, r24
		delay_function(STANDBYI_DELAY);
    2836:	62 e0       	ldi	r22, 0x02	; 2
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <delay_function>
    2842:	2d c0       	rjmp	.+90     	; 0x289e <nrf24_mode+0x11e>
		break;
	case PTX:
		nrf24_CE(CE_ON);
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <nrf24_CE>
		register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
    284a:	80 91 8d 01 	lds	r24, 0x018D
    284e:	8c 7f       	andi	r24, 0xFC	; 252
    2850:	82 60       	ori	r24, 0x02	; 2
    2852:	80 93 8e 01 	sts	0x018E, r24
		delay_function(STANDBYI_DELAY);
    2856:	62 e0       	ldi	r22, 0x02	; 2
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <delay_function>
    2862:	1d c0       	rjmp	.+58     	; 0x289e <nrf24_mode+0x11e>
		break;
	case PRX:
		nrf24_CE(CE_ON);
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <nrf24_CE>
		register_new_value = (register_current_value) | (1 << PWR_UP) | (1 << PRIM_RX);
    286a:	80 91 8d 01 	lds	r24, 0x018D
    286e:	83 60       	ori	r24, 0x03	; 3
    2870:	80 93 8e 01 	sts	0x018E, r24
		delay_function(STANDBYI_DELAY);
    2874:	62 e0       	ldi	r22, 0x02	; 2
    2876:	70 e0       	ldi	r23, 0x00	; 0
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <delay_function>
    2880:	0e c0       	rjmp	.+28     	; 0x289e <nrf24_mode+0x11e>
		break;
	default:
		nrf24_CE(CE_OFF);
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <nrf24_CE>
		register_new_value = (register_current_value) & (~(1 << PWR_UP));
    2888:	80 91 8d 01 	lds	r24, 0x018D
    288c:	8d 7f       	andi	r24, 0xFD	; 253
    288e:	80 93 8e 01 	sts	0x018E, r24
		delay_function(POWER_DOWN_DELAY);
    2892:	62 e0       	ldi	r22, 0x02	; 2
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <delay_function>
		break;
	}
	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    289e:	2e e8       	ldi	r18, 0x8E	; 142
    28a0:	31 e0       	ldi	r19, 0x01	; 1
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	b9 01       	movw	r22, r18
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrf24_write>
	current_mode = mode;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	80 93 68 01 	sts	0x0168, r24
}
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <nrf24_read>:

/*reads the number of bytes (data_length) from the register in nrf24l01+ (address) and stores them inside an array (value),
  then closes the spi connection (spi_state = CLOSE) or leaves it open (spi_state = OPEN)*/
void nrf24_read(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
{
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <nrf24_read+0x6>
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <nrf24_read+0x8>
    28c8:	0f 92       	push	r0
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	7b 83       	std	Y+3, r23	; 0x03
    28d2:	6a 83       	std	Y+2, r22	; 0x02
    28d4:	4c 83       	std	Y+4, r20	; 0x04
    28d6:	2d 83       	std	Y+5, r18	; 0x05
	nrf24_SPI(SPI_ON);
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
	SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	80 93 8c 01 	sts	0x018C, r24
	SPI_send_command(SPI_command);
    28e4:	80 91 8c 01 	lds	r24, 0x018C
    28e8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
	SPI_command = NOP_CMD;
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	80 93 8c 01 	sts	0x018C, r24
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <nrf24_read+0x52>
	for (; data_length ; data_length--)
	{
		*value = SPI_send_command(SPI_command);
    28f4:	80 91 8c 01 	lds	r24, 0x018C
    28f8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
    28fc:	ea 81       	ldd	r30, Y+2	; 0x02
    28fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2900:	80 83       	st	Z, r24
		value++;
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	9b 81       	ldd	r25, Y+3	; 0x03
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	9b 83       	std	Y+3, r25	; 0x03
    290a:	8a 83       	std	Y+2, r24	; 0x02
{
	nrf24_SPI(SPI_ON);
	SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
	SPI_send_command(SPI_command);
	SPI_command = NOP_CMD;
	for (; data_length ; data_length--)
    290c:	8c 81       	ldd	r24, Y+4	; 0x04
    290e:	81 50       	subi	r24, 0x01	; 1
    2910:	8c 83       	std	Y+4, r24	; 0x04
    2912:	8c 81       	ldd	r24, Y+4	; 0x04
    2914:	88 23       	and	r24, r24
    2916:	71 f7       	brne	.-36     	; 0x28f4 <nrf24_read+0x34>
	{
		*value = SPI_send_command(SPI_command);
		value++;
	}
	if (spi_state == CLOSE)
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	88 23       	and	r24, r24
    291c:	19 f4       	brne	.+6      	; 0x2924 <nrf24_read+0x64>
		nrf24_SPI(SPI_OFF);
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
}
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <nrf24_write>:

/*writes the number of bytes (data_length) from an array (value) inside registers in nrf24l01+ (address),
  then closes the spi connection (spi_state = CLOSE) or leaves it open (spi_state = OPEN)*/
void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <nrf24_write+0x6>
    293a:	00 d0       	rcall	.+0      	; 0x293c <nrf24_write+0x8>
    293c:	0f 92       	push	r0
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	7b 83       	std	Y+3, r23	; 0x03
    2946:	6a 83       	std	Y+2, r22	; 0x02
    2948:	4c 83       	std	Y+4, r20	; 0x04
    294a:	2d 83       	std	Y+5, r18	; 0x05
	nrf24_SPI(SPI_ON);
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
	SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	80 62       	ori	r24, 0x20	; 32
    2956:	80 93 8c 01 	sts	0x018C, r24
	SPI_send_command(SPI_command);
    295a:	80 91 8c 01 	lds	r24, 0x018C
    295e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
    2962:	11 c0       	rjmp	.+34     	; 0x2986 <nrf24_write+0x52>
	for (; data_length ; data_length--)
	{
		SPI_command = *value;
    2964:	ea 81       	ldd	r30, Y+2	; 0x02
    2966:	fb 81       	ldd	r31, Y+3	; 0x03
    2968:	80 81       	ld	r24, Z
    296a:	80 93 8c 01 	sts	0x018C, r24
		value++;
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	9b 81       	ldd	r25, Y+3	; 0x03
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	9b 83       	std	Y+3, r25	; 0x03
    2976:	8a 83       	std	Y+2, r24	; 0x02
		SPI_send_command(SPI_command);
    2978:	80 91 8c 01 	lds	r24, 0x018C
    297c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SPI_send_command>
void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
{
	nrf24_SPI(SPI_ON);
	SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
	SPI_send_command(SPI_command);
	for (; data_length ; data_length--)
    2980:	8c 81       	ldd	r24, Y+4	; 0x04
    2982:	81 50       	subi	r24, 0x01	; 1
    2984:	8c 83       	std	Y+4, r24	; 0x04
    2986:	8c 81       	ldd	r24, Y+4	; 0x04
    2988:	88 23       	and	r24, r24
    298a:	61 f7       	brne	.-40     	; 0x2964 <nrf24_write+0x30>
	{
		SPI_command = *value;
		value++;
		SPI_send_command(SPI_command);
	}
	if (spi_state == CLOSE)
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	88 23       	and	r24, r24
    2990:	19 f4       	brne	.+6      	; 0x2998 <nrf24_write+0x64>
		nrf24_SPI(SPI_OFF);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <nrf24_SPI>
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <PORT_voidInit>:
#include"STD_TYPES.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
#include"PORT_interface.h"
  void PORT_voidInit(void){
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    DDRD=PORTD_DIR;
    29b0:	ea e2       	ldi	r30, 0x2A	; 42
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	8f ef       	ldi	r24, 0xFF	; 255
    29b6:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    29b8:	e7 e2       	ldi	r30, 0x27	; 39
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	8f ef       	ldi	r24, 0xFF	; 255
    29be:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    29c0:	e4 e2       	ldi	r30, 0x24	; 36
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	8f e2       	ldi	r24, 0x2F	; 47
    29c6:	80 83       	st	Z, r24
    PORTD=PORTD_INIT_VALUE;
    29c8:	eb e2       	ldi	r30, 0x2B	; 43
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	10 82       	st	Z, r1
    PORTC=PORTC_INIT_VALUE;
    29ce:	e8 e2       	ldi	r30, 0x28	; 40
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VALUE;
    29d4:	e5 e2       	ldi	r30, 0x25	; 37
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	10 82       	st	Z, r1
  }
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <SPI_VoidMasterInit>:
#include"SPI_config.h"
#include"SPI_private.h"
#include"SPI_register.h"


void SPI_VoidMasterInit(void){
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	//select master
	SET_BIT(SPCR,SPCR_MSTR);
    29e8:	ac e4       	ldi	r26, 0x4C	; 76
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	ec e4       	ldi	r30, 0x4C	; 76
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	80 61       	ori	r24, 0x10	; 16
    29f4:	8c 93       	st	X, r24
	//set the clock divide by 16
	SET_BIT(SPCR,SPCR_SPR0);
    29f6:	ac e4       	ldi	r26, 0x4C	; 76
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	ec e4       	ldi	r30, 0x4C	; 76
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	81 60       	ori	r24, 0x01	; 1
    2a02:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,SPCR_SPR1);
    2a04:	ac e4       	ldi	r26, 0x4C	; 76
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	ec e4       	ldi	r30, 0x4C	; 76
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	8d 7f       	andi	r24, 0xFD	; 253
    2a10:	8c 93       	st	X, r24
	CLEAR_BIT(SPSR,SPSR_SPI2X);
    2a12:	ad e4       	ldi	r26, 0x4D	; 77
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	ed e4       	ldi	r30, 0x4D	; 77
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8e 7f       	andi	r24, 0xFE	; 254
    2a1e:	8c 93       	st	X, r24
	//SPI enable
	SET_BIT(SPCR,SPCR_SPE);
    2a20:	ac e4       	ldi	r26, 0x4C	; 76
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	ec e4       	ldi	r30, 0x4C	; 76
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	80 64       	ori	r24, 0x40	; 64
    2a2c:	8c 93       	st	X, r24
}
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <SPI_VoidSlaveInit>:
void SPI_VoidSlaveInit(void){
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
	//select slave
	CLEAR_BIT(SPCR,SPCR_MSTR);
    2a3c:	ac e4       	ldi	r26, 0x4C	; 76
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ec e4       	ldi	r30, 0x4C	; 76
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	8f 7e       	andi	r24, 0xEF	; 239
    2a48:	8c 93       	st	X, r24
	//SPI enable
	SET_BIT(SPCR,SPCR_SPE);
    2a4a:	ac e4       	ldi	r26, 0x4C	; 76
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	ec e4       	ldi	r30, 0x4C	; 76
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	80 64       	ori	r24, 0x40	; 64
    2a56:	8c 93       	st	X, r24
}
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <SPI_u8Transceive>:
u8 SPI_u8Transceive(u8 Copy_u8SentData,u8* Copy_Pu8ReceviedData ){
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <SPI_u8Transceive+0x6>
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <SPI_u8Transceive+0x8>
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	8a 83       	std	Y+2, r24	; 0x02
    2a6c:	7c 83       	std	Y+4, r23	; 0x04
    2a6e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorState=OK;
    2a70:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8ReceviedData==NULL){
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	19 f4       	brne	.+6      	; 0x2a80 <SPI_u8Transceive+0x22>
		Local_u8ErorState=NULL_POINTER;
    2a7a:	82 e0       	ldi	r24, 0x02	; 2
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	0f c0       	rjmp	.+30     	; 0x2a9e <SPI_u8Transceive+0x40>
	}
	else {
		//send data
		SPDR=Copy_u8SentData;
    2a80:	ee e4       	ldi	r30, 0x4E	; 78
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	80 83       	st	Z, r24
		//busy wating until the end of transmission flag is set
		while(GET_BIT(SPSR,SPSR_SPIF)==0);
    2a88:	ed e4       	ldi	r30, 0x4D	; 77
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	88 23       	and	r24, r24
    2a90:	dc f7       	brge	.-10     	; 0x2a88 <SPI_u8Transceive+0x2a>
		//get the received data
		*Copy_Pu8ReceviedData=SPDR;
    2a92:	ee e4       	ldi	r30, 0x4E	; 78
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	eb 81       	ldd	r30, Y+3	; 0x03
    2a9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a9c:	80 83       	st	Z, r24
	}
	return Local_u8ErorState;
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <main>:
#include"PORT_interface.h"

u8 ReceivedData = '0' ;
u8 c = 0 ;

void main(void){
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62


	PORT_voidInit();
    2ab6:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <PORT_voidInit>
	nrf24_device(RECEIVER, RESET);      //initializing nrf24l01+ as a receiver device with one simple function call
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	61 e0       	ldi	r22, 0x01	; 1
    2abe:	0e 94 9e 10 	call	0x213c	; 0x213c <nrf24_device>


	CLCD_voidInit();
    2ac2:	0e 94 c0 09 	call	0x1380	; 0x1380 <CLCD_voidInit>

	while (1){

		while(nrf24_receive(&ReceivedData,1) == RECEIVE_FIFO_EMPTY) ;   //poll and receive in one simple function call
    2ac6:	88 e8       	ldi	r24, 0x88	; 136
    2ac8:	91 e0       	ldi	r25, 0x01	; 1
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <nrf24_receive>
    2ad0:	82 30       	cpi	r24, 0x02	; 2
    2ad2:	c9 f3       	breq	.-14     	; 0x2ac6 <main+0x18>
		if(ReceivedData == '#'){
    2ad4:	80 91 88 01 	lds	r24, 0x0188
    2ad8:	83 32       	cpi	r24, 0x23	; 35
    2ada:	31 f4       	brne	.+12     	; 0x2ae8 <main+0x3a>
			CLCD_voidSendCommand(1);
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
			c= 0 ;
    2ae2:	10 92 92 01 	sts	0x0192, r1
    2ae6:	ef cf       	rjmp	.-34     	; 0x2ac6 <main+0x18>
			continue	;
		}
		CLCD_voidSendData(ReceivedData);
    2ae8:	80 91 88 01 	lds	r24, 0x0188
    2aec:	0e 94 8d 07 	call	0xf1a	; 0xf1a <CLCD_voidSendData>
		c++ ;
    2af0:	80 91 92 01 	lds	r24, 0x0192
    2af4:	8f 5f       	subi	r24, 0xFF	; 255
    2af6:	80 93 92 01 	sts	0x0192, r24
		if(c ==  16 ){
    2afa:	80 91 92 01 	lds	r24, 0x0192
    2afe:	80 31       	cpi	r24, 0x10	; 16
    2b00:	29 f4       	brne	.+10     	; 0x2b0c <main+0x5e>
			CLCD_voidGo_To_X_Y(1, 0);
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <CLCD_voidGo_To_X_Y>
    2b0a:	dd cf       	rjmp	.-70     	; 0x2ac6 <main+0x18>

		}
		else if (c == 33){
    2b0c:	80 91 92 01 	lds	r24, 0x0192
    2b10:	81 32       	cpi	r24, 0x21	; 33
    2b12:	c9 f6       	brne	.-78     	; 0x2ac6 <main+0x18>
			CLCD_voidSendCommand(1);
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
			c = 0 ;
    2b1a:	10 92 92 01 	sts	0x0192, r1
    2b1e:	d3 cf       	rjmp	.-90     	; 0x2ac6 <main+0x18>

00002b20 <__prologue_saves__>:
    2b20:	2f 92       	push	r2
    2b22:	3f 92       	push	r3
    2b24:	4f 92       	push	r4
    2b26:	5f 92       	push	r5
    2b28:	6f 92       	push	r6
    2b2a:	7f 92       	push	r7
    2b2c:	8f 92       	push	r8
    2b2e:	9f 92       	push	r9
    2b30:	af 92       	push	r10
    2b32:	bf 92       	push	r11
    2b34:	cf 92       	push	r12
    2b36:	df 92       	push	r13
    2b38:	ef 92       	push	r14
    2b3a:	ff 92       	push	r15
    2b3c:	0f 93       	push	r16
    2b3e:	1f 93       	push	r17
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	ca 1b       	sub	r28, r26
    2b4a:	db 0b       	sbc	r29, r27
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	09 94       	ijmp

00002b58 <__epilogue_restores__>:
    2b58:	2a 88       	ldd	r2, Y+18	; 0x12
    2b5a:	39 88       	ldd	r3, Y+17	; 0x11
    2b5c:	48 88       	ldd	r4, Y+16	; 0x10
    2b5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b60:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b62:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b64:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b66:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b68:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b6a:	b9 84       	ldd	r11, Y+9	; 0x09
    2b6c:	c8 84       	ldd	r12, Y+8	; 0x08
    2b6e:	df 80       	ldd	r13, Y+7	; 0x07
    2b70:	ee 80       	ldd	r14, Y+6	; 0x06
    2b72:	fd 80       	ldd	r15, Y+5	; 0x05
    2b74:	0c 81       	ldd	r16, Y+4	; 0x04
    2b76:	1b 81       	ldd	r17, Y+3	; 0x03
    2b78:	aa 81       	ldd	r26, Y+2	; 0x02
    2b7a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b7c:	ce 0f       	add	r28, r30
    2b7e:	d1 1d       	adc	r29, r1
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	ed 01       	movw	r28, r26
    2b8c:	08 95       	ret

00002b8e <_exit>:
    2b8e:	f8 94       	cli

00002b90 <__stop_program>:
    2b90:	ff cf       	rjmp	.-2      	; 0x2b90 <__stop_program>
